// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ds_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StruDsServerConnectRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsServerConnectRq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StruDsServerConnectRq_ConnectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StruDsServerConnectRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsServerConnectRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsServerReportCurrentUserCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsServerReportCurrentUserCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsServerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsGSGetRoomInfoRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsGSGetRoomInfoRq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsGSGetRoomInfoRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsGSGetRoomInfoRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsRSGetCsInfoRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsRSGetCsInfoRq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SStruDsRSGetCsInfoRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SStruDsRSGetCsInfoRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsMSStreamRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsMSStreamRq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StruDsMSStreamRq_StreamType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StruDsMSStreamRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsMSStreamRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsMSQueryStreamRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsMSQueryStreamRq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsMSQueryStreamRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsMSQueryStreamRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruDsServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruDsServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StruDsServerInfo_ServerInfoType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StruServerDetctInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruServerDetctInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruServerDetctResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruServerDetctResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CytPacketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ds_5fserver_2eproto() {
  protobuf_AddDesc_ds_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ds_server.proto");
  GOOGLE_CHECK(file != NULL);
  StruDsServerConnectRq_descriptor_ = file->message_type(0);
  static const int StruDsServerConnectRq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, connect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, server_detect_port_),
  };
  StruDsServerConnectRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsServerConnectRq_descriptor_,
      StruDsServerConnectRq::default_instance_,
      StruDsServerConnectRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsServerConnectRq));
  StruDsServerConnectRq_ConnectType_descriptor_ = StruDsServerConnectRq_descriptor_->enum_type(0);
  StruDsServerConnectRs_descriptor_ = file->message_type(1);
  static const int StruDsServerConnectRs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRs, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRs, result_),
  };
  StruDsServerConnectRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsServerConnectRs_descriptor_,
      StruDsServerConnectRs::default_instance_,
      StruDsServerConnectRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerConnectRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsServerConnectRs));
  StruDsServerReportCurrentUserCount_descriptor_ = file->message_type(2);
  static const int StruDsServerReportCurrentUserCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerReportCurrentUserCount, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerReportCurrentUserCount, current_user_count_),
  };
  StruDsServerReportCurrentUserCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsServerReportCurrentUserCount_descriptor_,
      StruDsServerReportCurrentUserCount::default_instance_,
      StruDsServerReportCurrentUserCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerReportCurrentUserCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerReportCurrentUserCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsServerReportCurrentUserCount));
  StruDsServerMsg_descriptor_ = file->message_type(3);
  static const int StruDsServerMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, dst_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, dst_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, msg_data_),
  };
  StruDsServerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsServerMsg_descriptor_,
      StruDsServerMsg::default_instance_,
      StruDsServerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsServerMsg));
  StruDsGSGetRoomInfoRq_descriptor_ = file->message_type(4);
  static const int StruDsGSGetRoomInfoRq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRq, room_id_),
  };
  StruDsGSGetRoomInfoRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsGSGetRoomInfoRq_descriptor_,
      StruDsGSGetRoomInfoRq::default_instance_,
      StruDsGSGetRoomInfoRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsGSGetRoomInfoRq));
  StruDsGSGetRoomInfoRs_descriptor_ = file->message_type(5);
  static const int StruDsGSGetRoomInfoRs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, rs_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, server_port_),
  };
  StruDsGSGetRoomInfoRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsGSGetRoomInfoRs_descriptor_,
      StruDsGSGetRoomInfoRs::default_instance_,
      StruDsGSGetRoomInfoRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsGSGetRoomInfoRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsGSGetRoomInfoRs));
  StruDsRSGetCsInfoRq_descriptor_ = file->message_type(6);
  static const int StruDsRSGetCsInfoRq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsRSGetCsInfoRq, server_id_),
  };
  StruDsRSGetCsInfoRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsRSGetCsInfoRq_descriptor_,
      StruDsRSGetCsInfoRq::default_instance_,
      StruDsRSGetCsInfoRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsRSGetCsInfoRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsRSGetCsInfoRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsRSGetCsInfoRq));
  SStruDsRSGetCsInfoRs_descriptor_ = file->message_type(7);
  static const int SStruDsRSGetCsInfoRs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, cs_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, server_port_),
  };
  SStruDsRSGetCsInfoRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SStruDsRSGetCsInfoRs_descriptor_,
      SStruDsRSGetCsInfoRs::default_instance_,
      SStruDsRSGetCsInfoRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStruDsRSGetCsInfoRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SStruDsRSGetCsInfoRs));
  StruDsMSStreamRq_descriptor_ = file->message_type(8);
  static const int StruDsMSStreamRq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRq, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRq, stream_type_),
  };
  StruDsMSStreamRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsMSStreamRq_descriptor_,
      StruDsMSStreamRq::default_instance_,
      StruDsMSStreamRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsMSStreamRq));
  StruDsMSStreamRq_StreamType_descriptor_ = StruDsMSStreamRq_descriptor_->enum_type(0);
  StruDsMSStreamRs_descriptor_ = file->message_type(9);
  static const int StruDsMSStreamRs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRs, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRs, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRs, result_),
  };
  StruDsMSStreamRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsMSStreamRs_descriptor_,
      StruDsMSStreamRs::default_instance_,
      StruDsMSStreamRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSStreamRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsMSStreamRs));
  StruDsMSQueryStreamRq_descriptor_ = file->message_type(10);
  static const int StruDsMSQueryStreamRq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRq, stream_id_),
  };
  StruDsMSQueryStreamRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsMSQueryStreamRq_descriptor_,
      StruDsMSQueryStreamRq::default_instance_,
      StruDsMSQueryStreamRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsMSQueryStreamRq));
  StruDsMSQueryStreamRs_descriptor_ = file->message_type(11);
  static const int StruDsMSQueryStreamRs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, src_stream_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, stream_server_id_),
  };
  StruDsMSQueryStreamRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsMSQueryStreamRs_descriptor_,
      StruDsMSQueryStreamRs::default_instance_,
      StruDsMSQueryStreamRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsMSQueryStreamRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsMSQueryStreamRs));
  StruDsServerInfo_descriptor_ = file->message_type(12);
  static const int StruDsServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, server_info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, server_detect_port_),
  };
  StruDsServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruDsServerInfo_descriptor_,
      StruDsServerInfo::default_instance_,
      StruDsServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruDsServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruDsServerInfo));
  StruDsServerInfo_ServerInfoType_descriptor_ = StruDsServerInfo_descriptor_->enum_type(0);
  StruServerDetctInfo_descriptor_ = file->message_type(13);
  static const int StruServerDetctInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, src_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, dst_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, pkt_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, pkt_sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, pkt_data_),
  };
  StruServerDetctInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruServerDetctInfo_descriptor_,
      StruServerDetctInfo::default_instance_,
      StruServerDetctInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruServerDetctInfo));
  StruServerDetctResult_descriptor_ = file->message_type(14);
  static const int StruServerDetctResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, src_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, dst_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, delay_),
  };
  StruServerDetctResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruServerDetctResult_descriptor_,
      StruServerDetctResult::default_instance_,
      StruServerDetctResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruServerDetctResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruServerDetctResult));
  CytPacketType_descriptor_ = file->enum_type(0);
  ServerType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ds_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsServerConnectRq_descriptor_, &StruDsServerConnectRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsServerConnectRs_descriptor_, &StruDsServerConnectRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsServerReportCurrentUserCount_descriptor_, &StruDsServerReportCurrentUserCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsServerMsg_descriptor_, &StruDsServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsGSGetRoomInfoRq_descriptor_, &StruDsGSGetRoomInfoRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsGSGetRoomInfoRs_descriptor_, &StruDsGSGetRoomInfoRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsRSGetCsInfoRq_descriptor_, &StruDsRSGetCsInfoRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SStruDsRSGetCsInfoRs_descriptor_, &SStruDsRSGetCsInfoRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsMSStreamRq_descriptor_, &StruDsMSStreamRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsMSStreamRs_descriptor_, &StruDsMSStreamRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsMSQueryStreamRq_descriptor_, &StruDsMSQueryStreamRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsMSQueryStreamRs_descriptor_, &StruDsMSQueryStreamRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruDsServerInfo_descriptor_, &StruDsServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruServerDetctInfo_descriptor_, &StruServerDetctInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruServerDetctResult_descriptor_, &StruServerDetctResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ds_5fserver_2eproto() {
  delete StruDsServerConnectRq::default_instance_;
  delete StruDsServerConnectRq_reflection_;
  delete StruDsServerConnectRs::default_instance_;
  delete StruDsServerConnectRs_reflection_;
  delete StruDsServerReportCurrentUserCount::default_instance_;
  delete StruDsServerReportCurrentUserCount_reflection_;
  delete StruDsServerMsg::default_instance_;
  delete StruDsServerMsg_reflection_;
  delete StruDsGSGetRoomInfoRq::default_instance_;
  delete StruDsGSGetRoomInfoRq_reflection_;
  delete StruDsGSGetRoomInfoRs::default_instance_;
  delete StruDsGSGetRoomInfoRs_reflection_;
  delete StruDsRSGetCsInfoRq::default_instance_;
  delete StruDsRSGetCsInfoRq_reflection_;
  delete SStruDsRSGetCsInfoRs::default_instance_;
  delete SStruDsRSGetCsInfoRs_reflection_;
  delete StruDsMSStreamRq::default_instance_;
  delete StruDsMSStreamRq_reflection_;
  delete StruDsMSStreamRs::default_instance_;
  delete StruDsMSStreamRs_reflection_;
  delete StruDsMSQueryStreamRq::default_instance_;
  delete StruDsMSQueryStreamRq_reflection_;
  delete StruDsMSQueryStreamRs::default_instance_;
  delete StruDsMSQueryStreamRs_reflection_;
  delete StruDsServerInfo::default_instance_;
  delete StruDsServerInfo_reflection_;
  delete StruServerDetctInfo::default_instance_;
  delete StruServerDetctInfo_reflection_;
  delete StruServerDetctResult::default_instance_;
  delete StruServerDetctResult_reflection_;
}

void protobuf_AddDesc_ds_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ds_server.proto\"\222\002\n\025StruDsServerConnec"
    "tRq\022\021\n\tserver_id\030\001 \002(\005\022\021\n\tserver_ip\030\002 \002("
    "\t\022\023\n\013server_port\030\003 \002(\005\022 \n\013server_type\030\004 "
    "\002(\0162\013.ServerType\0228\n\014connect_type\030\005 \002(\0162\""
    ".StruDsServerConnectRq.ConnectType\022\032\n\022se"
    "rver_detect_port\030\006 \001(\005\"F\n\013ConnectType\022\033\n"
    "\027CONNECT_TYPE_NEWCONNECT\020\000\022\032\n\026CONNECT_TY"
    "PE_RECONNECT\020\001\":\n\025StruDsServerConnectRs\022"
    "\021\n\tserver_id\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\"S\n\"St"
    "ruDsServerReportCurrentUserCount\022\021\n\tserv"
    "er_id\030\001 \002(\005\022\032\n\022current_user_count\030\002 \002(\005\""
    "s\n\017StruDsServerMsg\022\021\n\tserver_id\030\001 \002(\005\022\025\n"
    "\rdst_server_id\030\002 \002(\005\022$\n\017dst_server_type\030"
    "\003 \002(\0162\013.ServerType\022\020\n\010msg_data\030\004 \002(\014\";\n\025"
    "StruDsGSGetRoomInfoRq\022\021\n\tserver_id\030\001 \002(\005"
    "\022\017\n\007room_id\030\002 \002(\005\"y\n\025StruDsGSGetRoomInfo"
    "Rs\022\021\n\tserver_id\030\001 \002(\005\022\017\n\007room_id\030\002 \002(\005\022\024"
    "\n\014rs_server_id\030\003 \002(\005\022\021\n\tserver_ip\030\004 \002(\t\022"
    "\023\n\013server_port\030\005 \002(\005\"(\n\023StruDsRSGetCsInf"
    "oRq\022\021\n\tserver_id\030\001 \002(\005\"g\n\024SStruDsRSGetCs"
    "InfoRs\022\021\n\tserver_id\030\001 \002(\005\022\024\n\014cs_server_i"
    "d\030\002 \002(\005\022\021\n\tserver_ip\030\003 \002(\t\022\023\n\013server_por"
    "t\030\004 \002(\005\"\246\001\n\020StruDsMSStreamRq\022\021\n\tserver_i"
    "d\030\001 \002(\005\022\021\n\tstream_id\030\002 \002(\t\0221\n\013stream_typ"
    "e\030\003 \002(\0162\034.StruDsMSStreamRq.StreamType\"9\n"
    "\nStreamType\022\024\n\020STREAM_TYPE_OPEN\020\000\022\025\n\021STR"
    "EAM_TYPE_CLOSE\020\001\"H\n\020StruDsMSStreamRs\022\021\n\t"
    "server_id\030\001 \002(\005\022\021\n\tstream_id\030\002 \002(\t\022\016\n\006re"
    "sult\030\003 \002(\005\"=\n\025StruDsMSQueryStreamRq\022\021\n\ts"
    "erver_id\030\001 \002(\005\022\021\n\tstream_id\030\002 \002(\t\"\177\n\025Str"
    "uDsMSQueryStreamRs\022\021\n\tserver_id\030\001 \002(\005\022\016\n"
    "\006result\030\002 \002(\005\022\021\n\tstream_id\030\003 \002(\t\022\026\n\016src_"
    "stream_url\030\004 \002(\t\022\030\n\020stream_server_id\030\005 \002"
    "(\005\"\326\001\n\020StruDsServerInfo\022\021\n\tserver_id\030\001 \002"
    "(\005\022:\n\020server_info_type\030\002 \002(\0162 .StruDsSer"
    "verInfo.ServerInfoType\022\021\n\tserver_ip\030\003 \002("
    "\t\022\032\n\022server_detect_port\030\004 \002(\005\"D\n\016ServerI"
    "nfoType\022\030\n\024SERVER_INFO_TYPE_ADD\020\000\022\030\n\024SER"
    "VER_INFO_TYPE_DEL\020\001\"~\n\023StruServerDetctIn"
    "fo\022\025\n\rsrc_server_id\030\001 \002(\005\022\025\n\rdst_server_"
    "id\030\002 \002(\005\022\021\n\tpkt_index\030\003 \002(\005\022\024\n\014pkt_sendt"
    "ime\030\004 \002(\005\022\020\n\010pkt_data\030\005 \002(\014\"b\n\025StruServe"
    "rDetctResult\022\025\n\rsrc_server_id\030\001 \002(\005\022\025\n\rd"
    "st_server_id\030\002 \002(\005\022\014\n\004lost\030\003 \002(\005\022\r\n\005dela"
    "y\030\004 \002(\005*\317\003\n\rCytPacketType\022\035\n\030DEF_DS_SERV"
    "ER_CONNECT_RQ\020\351\007\022\035\n\030DEF_DS_SERVER_CONNEC"
    "T_RS\020\352\007\022,\n\'DEF_DS_SERVER_REPORT_CURRENT_"
    "USER_COUNT\020\353\007\022\026\n\021DEF_DS_SERVER_MSG\020\354\007\022\036\n"
    "\031DEF_DS_GS_GET_ROOMINFO_RQ\020\355\007\022\036\n\031DEF_DS_"
    "GS_GET_ROOMINFO_RS\020\356\007\022\030\n\023DEF_DS_MS_STREA"
    "M_RQ\020\357\007\022\030\n\023DEF_DS_MS_STREAM_RS\020\360\007\022\036\n\031DEF"
    "_DS_MS_QUERY_STREAM_RQ\020\361\007\022\036\n\031DEF_DS_MS_Q"
    "UERY_STREAM_RS\020\232N\022\030\n\023DEF_DS_RS_GET_CS_RQ"
    "\020\233N\022\030\n\023DEF_DS_RS_GET_CS_RS\020\234N\022\027\n\022DEF_DS_"
    "SERVER_INFO\020\235N\022\030\n\023DEF_DS_SERVER_DETCT\020\236N"
    "\022\037\n\032DEF_DS_SERVER_DETCT_RESULT\020\237N*p\n\nSer"
    "verType\022\022\n\016SERVER_TYPE_DS\020\000\022\022\n\016SERVER_TY"
    "PE_GS\020\001\022\022\n\016SERVER_TYPE_RS\020\002\022\022\n\016SERVER_TY"
    "PE_CS\020\003\022\022\n\016SERVER_TYPE_MS\020\004", 2347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ds_server.proto", &protobuf_RegisterTypes);
  StruDsServerConnectRq::default_instance_ = new StruDsServerConnectRq();
  StruDsServerConnectRs::default_instance_ = new StruDsServerConnectRs();
  StruDsServerReportCurrentUserCount::default_instance_ = new StruDsServerReportCurrentUserCount();
  StruDsServerMsg::default_instance_ = new StruDsServerMsg();
  StruDsGSGetRoomInfoRq::default_instance_ = new StruDsGSGetRoomInfoRq();
  StruDsGSGetRoomInfoRs::default_instance_ = new StruDsGSGetRoomInfoRs();
  StruDsRSGetCsInfoRq::default_instance_ = new StruDsRSGetCsInfoRq();
  SStruDsRSGetCsInfoRs::default_instance_ = new SStruDsRSGetCsInfoRs();
  StruDsMSStreamRq::default_instance_ = new StruDsMSStreamRq();
  StruDsMSStreamRs::default_instance_ = new StruDsMSStreamRs();
  StruDsMSQueryStreamRq::default_instance_ = new StruDsMSQueryStreamRq();
  StruDsMSQueryStreamRs::default_instance_ = new StruDsMSQueryStreamRs();
  StruDsServerInfo::default_instance_ = new StruDsServerInfo();
  StruServerDetctInfo::default_instance_ = new StruServerDetctInfo();
  StruServerDetctResult::default_instance_ = new StruServerDetctResult();
  StruDsServerConnectRq::default_instance_->InitAsDefaultInstance();
  StruDsServerConnectRs::default_instance_->InitAsDefaultInstance();
  StruDsServerReportCurrentUserCount::default_instance_->InitAsDefaultInstance();
  StruDsServerMsg::default_instance_->InitAsDefaultInstance();
  StruDsGSGetRoomInfoRq::default_instance_->InitAsDefaultInstance();
  StruDsGSGetRoomInfoRs::default_instance_->InitAsDefaultInstance();
  StruDsRSGetCsInfoRq::default_instance_->InitAsDefaultInstance();
  SStruDsRSGetCsInfoRs::default_instance_->InitAsDefaultInstance();
  StruDsMSStreamRq::default_instance_->InitAsDefaultInstance();
  StruDsMSStreamRs::default_instance_->InitAsDefaultInstance();
  StruDsMSQueryStreamRq::default_instance_->InitAsDefaultInstance();
  StruDsMSQueryStreamRs::default_instance_->InitAsDefaultInstance();
  StruDsServerInfo::default_instance_->InitAsDefaultInstance();
  StruServerDetctInfo::default_instance_->InitAsDefaultInstance();
  StruServerDetctResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ds_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ds_5fserver_2eproto {
  StaticDescriptorInitializer_ds_5fserver_2eproto() {
    protobuf_AddDesc_ds_5fserver_2eproto();
  }
} static_descriptor_initializer_ds_5fserver_2eproto_;

const ::google::protobuf::EnumDescriptor* CytPacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CytPacketType_descriptor_;
}
bool CytPacketType_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StruDsServerConnectRq_ConnectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerConnectRq_ConnectType_descriptor_;
}
bool StruDsServerConnectRq_ConnectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq::CONNECT_TYPE_NEWCONNECT;
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq::CONNECT_TYPE_RECONNECT;
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq::ConnectType_MIN;
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq::ConnectType_MAX;
const int StruDsServerConnectRq::ConnectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StruDsServerConnectRq::kServerIdFieldNumber;
const int StruDsServerConnectRq::kServerIpFieldNumber;
const int StruDsServerConnectRq::kServerPortFieldNumber;
const int StruDsServerConnectRq::kServerTypeFieldNumber;
const int StruDsServerConnectRq::kConnectTypeFieldNumber;
const int StruDsServerConnectRq::kServerDetectPortFieldNumber;
#endif  // !_MSC_VER

StruDsServerConnectRq::StruDsServerConnectRq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsServerConnectRq::InitAsDefaultInstance() {
}

StruDsServerConnectRq::StruDsServerConnectRq(const StruDsServerConnectRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsServerConnectRq::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  server_type_ = 0;
  connect_type_ = 0;
  server_detect_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsServerConnectRq::~StruDsServerConnectRq() {
  SharedDtor();
}

void StruDsServerConnectRq::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void StruDsServerConnectRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsServerConnectRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerConnectRq_descriptor_;
}

const StruDsServerConnectRq& StruDsServerConnectRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsServerConnectRq* StruDsServerConnectRq::default_instance_ = NULL;

StruDsServerConnectRq* StruDsServerConnectRq::New() const {
  return new StruDsServerConnectRq;
}

void StruDsServerConnectRq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_port_ = 0;
    server_type_ = 0;
    connect_type_ = 0;
    server_detect_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsServerConnectRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_ip;
        break;
      }
      
      // required string server_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }
      
      // required int32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_type;
        break;
      }
      
      // required .ServerType server_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ServerType_IsValid(value)) {
            set_server_type(static_cast< ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_connect_type;
        break;
      }
      
      // required .StruDsServerConnectRq.ConnectType connect_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StruDsServerConnectRq_ConnectType_IsValid(value)) {
            set_connect_type(static_cast< ::StruDsServerConnectRq_ConnectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_detect_port;
        break;
      }
      
      // optional int32 server_detect_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_detect_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_detect_port_)));
          set_has_server_detect_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsServerConnectRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required string server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_ip(), output);
  }
  
  // required int32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_port(), output);
  }
  
  // required .ServerType server_type = 4;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->server_type(), output);
  }
  
  // required .StruDsServerConnectRq.ConnectType connect_type = 5;
  if (has_connect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->connect_type(), output);
  }
  
  // optional int32 server_detect_port = 6;
  if (has_server_detect_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_detect_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsServerConnectRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required string server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_ip(), target);
  }
  
  // required int32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_port(), target);
  }
  
  // required .ServerType server_type = 4;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->server_type(), target);
  }
  
  // required .StruDsServerConnectRq.ConnectType connect_type = 5;
  if (has_connect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->connect_type(), target);
  }
  
  // optional int32 server_detect_port = 6;
  if (has_server_detect_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_detect_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsServerConnectRq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required string server_ip = 2;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
    // required int32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }
    
    // required .ServerType server_type = 4;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }
    
    // required .StruDsServerConnectRq.ConnectType connect_type = 5;
    if (has_connect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_type());
    }
    
    // optional int32 server_detect_port = 6;
    if (has_server_detect_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_detect_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsServerConnectRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsServerConnectRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsServerConnectRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsServerConnectRq::MergeFrom(const StruDsServerConnectRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_connect_type()) {
      set_connect_type(from.connect_type());
    }
    if (from.has_server_detect_port()) {
      set_server_detect_port(from.server_detect_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsServerConnectRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsServerConnectRq::CopyFrom(const StruDsServerConnectRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsServerConnectRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruDsServerConnectRq::Swap(StruDsServerConnectRq* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_type_, other->server_type_);
    std::swap(connect_type_, other->connect_type_);
    std::swap(server_detect_port_, other->server_detect_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsServerConnectRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsServerConnectRq_descriptor_;
  metadata.reflection = StruDsServerConnectRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsServerConnectRs::kServerIdFieldNumber;
const int StruDsServerConnectRs::kResultFieldNumber;
#endif  // !_MSC_VER

StruDsServerConnectRs::StruDsServerConnectRs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsServerConnectRs::InitAsDefaultInstance() {
}

StruDsServerConnectRs::StruDsServerConnectRs(const StruDsServerConnectRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsServerConnectRs::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsServerConnectRs::~StruDsServerConnectRs() {
  SharedDtor();
}

void StruDsServerConnectRs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruDsServerConnectRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsServerConnectRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerConnectRs_descriptor_;
}

const StruDsServerConnectRs& StruDsServerConnectRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsServerConnectRs* StruDsServerConnectRs::default_instance_ = NULL;

StruDsServerConnectRs* StruDsServerConnectRs::New() const {
  return new StruDsServerConnectRs;
}

void StruDsServerConnectRs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsServerConnectRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsServerConnectRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsServerConnectRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsServerConnectRs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsServerConnectRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsServerConnectRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsServerConnectRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsServerConnectRs::MergeFrom(const StruDsServerConnectRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsServerConnectRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsServerConnectRs::CopyFrom(const StruDsServerConnectRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsServerConnectRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StruDsServerConnectRs::Swap(StruDsServerConnectRs* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsServerConnectRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsServerConnectRs_descriptor_;
  metadata.reflection = StruDsServerConnectRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsServerReportCurrentUserCount::kServerIdFieldNumber;
const int StruDsServerReportCurrentUserCount::kCurrentUserCountFieldNumber;
#endif  // !_MSC_VER

StruDsServerReportCurrentUserCount::StruDsServerReportCurrentUserCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsServerReportCurrentUserCount::InitAsDefaultInstance() {
}

StruDsServerReportCurrentUserCount::StruDsServerReportCurrentUserCount(const StruDsServerReportCurrentUserCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsServerReportCurrentUserCount::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  current_user_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsServerReportCurrentUserCount::~StruDsServerReportCurrentUserCount() {
  SharedDtor();
}

void StruDsServerReportCurrentUserCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruDsServerReportCurrentUserCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsServerReportCurrentUserCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerReportCurrentUserCount_descriptor_;
}

const StruDsServerReportCurrentUserCount& StruDsServerReportCurrentUserCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsServerReportCurrentUserCount* StruDsServerReportCurrentUserCount::default_instance_ = NULL;

StruDsServerReportCurrentUserCount* StruDsServerReportCurrentUserCount::New() const {
  return new StruDsServerReportCurrentUserCount;
}

void StruDsServerReportCurrentUserCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    current_user_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsServerReportCurrentUserCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user_count;
        break;
      }
      
      // required int32 current_user_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_count_)));
          set_has_current_user_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsServerReportCurrentUserCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 current_user_count = 2;
  if (has_current_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_user_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsServerReportCurrentUserCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 current_user_count = 2;
  if (has_current_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_user_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsServerReportCurrentUserCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 current_user_count = 2;
    if (has_current_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsServerReportCurrentUserCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsServerReportCurrentUserCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsServerReportCurrentUserCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsServerReportCurrentUserCount::MergeFrom(const StruDsServerReportCurrentUserCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_current_user_count()) {
      set_current_user_count(from.current_user_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsServerReportCurrentUserCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsServerReportCurrentUserCount::CopyFrom(const StruDsServerReportCurrentUserCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsServerReportCurrentUserCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StruDsServerReportCurrentUserCount::Swap(StruDsServerReportCurrentUserCount* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(current_user_count_, other->current_user_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsServerReportCurrentUserCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsServerReportCurrentUserCount_descriptor_;
  metadata.reflection = StruDsServerReportCurrentUserCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsServerMsg::kServerIdFieldNumber;
const int StruDsServerMsg::kDstServerIdFieldNumber;
const int StruDsServerMsg::kDstServerTypeFieldNumber;
const int StruDsServerMsg::kMsgDataFieldNumber;
#endif  // !_MSC_VER

StruDsServerMsg::StruDsServerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsServerMsg::InitAsDefaultInstance() {
}

StruDsServerMsg::StruDsServerMsg(const StruDsServerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsServerMsg::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  dst_server_id_ = 0;
  dst_server_type_ = 0;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsServerMsg::~StruDsServerMsg() {
  SharedDtor();
}

void StruDsServerMsg::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void StruDsServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerMsg_descriptor_;
}

const StruDsServerMsg& StruDsServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsServerMsg* StruDsServerMsg::default_instance_ = NULL;

StruDsServerMsg* StruDsServerMsg::New() const {
  return new StruDsServerMsg;
}

void StruDsServerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    dst_server_id_ = 0;
    dst_server_type_ = 0;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_server_id;
        break;
      }
      
      // required int32 dst_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_server_id_)));
          set_has_dst_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_server_type;
        break;
      }
      
      // required .ServerType dst_server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ServerType_IsValid(value)) {
            set_dst_server_type(static_cast< ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_data;
        break;
      }
      
      // required bytes msg_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_server_id(), output);
  }
  
  // required .ServerType dst_server_type = 3;
  if (has_dst_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dst_server_type(), output);
  }
  
  // required bytes msg_data = 4;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsServerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_server_id(), target);
  }
  
  // required .ServerType dst_server_type = 3;
  if (has_dst_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dst_server_type(), target);
  }
  
  // required bytes msg_data = 4;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsServerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 dst_server_id = 2;
    if (has_dst_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_server_id());
    }
    
    // required .ServerType dst_server_type = 3;
    if (has_dst_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_server_type());
    }
    
    // required bytes msg_data = 4;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsServerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsServerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsServerMsg::MergeFrom(const StruDsServerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_dst_server_id()) {
      set_dst_server_id(from.dst_server_id());
    }
    if (from.has_dst_server_type()) {
      set_dst_server_type(from.dst_server_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsServerMsg::CopyFrom(const StruDsServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsServerMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruDsServerMsg::Swap(StruDsServerMsg* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(dst_server_id_, other->dst_server_id_);
    std::swap(dst_server_type_, other->dst_server_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsServerMsg_descriptor_;
  metadata.reflection = StruDsServerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsGSGetRoomInfoRq::kServerIdFieldNumber;
const int StruDsGSGetRoomInfoRq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

StruDsGSGetRoomInfoRq::StruDsGSGetRoomInfoRq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsGSGetRoomInfoRq::InitAsDefaultInstance() {
}

StruDsGSGetRoomInfoRq::StruDsGSGetRoomInfoRq(const StruDsGSGetRoomInfoRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsGSGetRoomInfoRq::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsGSGetRoomInfoRq::~StruDsGSGetRoomInfoRq() {
  SharedDtor();
}

void StruDsGSGetRoomInfoRq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruDsGSGetRoomInfoRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsGSGetRoomInfoRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsGSGetRoomInfoRq_descriptor_;
}

const StruDsGSGetRoomInfoRq& StruDsGSGetRoomInfoRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsGSGetRoomInfoRq* StruDsGSGetRoomInfoRq::default_instance_ = NULL;

StruDsGSGetRoomInfoRq* StruDsGSGetRoomInfoRq::New() const {
  return new StruDsGSGetRoomInfoRq;
}

void StruDsGSGetRoomInfoRq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsGSGetRoomInfoRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsGSGetRoomInfoRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsGSGetRoomInfoRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsGSGetRoomInfoRq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsGSGetRoomInfoRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsGSGetRoomInfoRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsGSGetRoomInfoRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsGSGetRoomInfoRq::MergeFrom(const StruDsGSGetRoomInfoRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsGSGetRoomInfoRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsGSGetRoomInfoRq::CopyFrom(const StruDsGSGetRoomInfoRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsGSGetRoomInfoRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StruDsGSGetRoomInfoRq::Swap(StruDsGSGetRoomInfoRq* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsGSGetRoomInfoRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsGSGetRoomInfoRq_descriptor_;
  metadata.reflection = StruDsGSGetRoomInfoRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsGSGetRoomInfoRs::kServerIdFieldNumber;
const int StruDsGSGetRoomInfoRs::kRoomIdFieldNumber;
const int StruDsGSGetRoomInfoRs::kRsServerIdFieldNumber;
const int StruDsGSGetRoomInfoRs::kServerIpFieldNumber;
const int StruDsGSGetRoomInfoRs::kServerPortFieldNumber;
#endif  // !_MSC_VER

StruDsGSGetRoomInfoRs::StruDsGSGetRoomInfoRs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsGSGetRoomInfoRs::InitAsDefaultInstance() {
}

StruDsGSGetRoomInfoRs::StruDsGSGetRoomInfoRs(const StruDsGSGetRoomInfoRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsGSGetRoomInfoRs::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  room_id_ = 0;
  rs_server_id_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsGSGetRoomInfoRs::~StruDsGSGetRoomInfoRs() {
  SharedDtor();
}

void StruDsGSGetRoomInfoRs::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void StruDsGSGetRoomInfoRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsGSGetRoomInfoRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsGSGetRoomInfoRs_descriptor_;
}

const StruDsGSGetRoomInfoRs& StruDsGSGetRoomInfoRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsGSGetRoomInfoRs* StruDsGSGetRoomInfoRs::default_instance_ = NULL;

StruDsGSGetRoomInfoRs* StruDsGSGetRoomInfoRs::New() const {
  return new StruDsGSGetRoomInfoRs;
}

void StruDsGSGetRoomInfoRs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    room_id_ = 0;
    rs_server_id_ = 0;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsGSGetRoomInfoRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rs_server_id;
        break;
      }
      
      // required int32 rs_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rs_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rs_server_id_)));
          set_has_rs_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_ip;
        break;
      }
      
      // required string server_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_port;
        break;
      }
      
      // required int32 server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsGSGetRoomInfoRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }
  
  // required int32 rs_server_id = 3;
  if (has_rs_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rs_server_id(), output);
  }
  
  // required string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_ip(), output);
  }
  
  // required int32 server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsGSGetRoomInfoRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }
  
  // required int32 rs_server_id = 3;
  if (has_rs_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rs_server_id(), target);
  }
  
  // required string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ip(), target);
  }
  
  // required int32 server_port = 5;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsGSGetRoomInfoRs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 rs_server_id = 3;
    if (has_rs_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rs_server_id());
    }
    
    // required string server_ip = 4;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
    // required int32 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsGSGetRoomInfoRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsGSGetRoomInfoRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsGSGetRoomInfoRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsGSGetRoomInfoRs::MergeFrom(const StruDsGSGetRoomInfoRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_rs_server_id()) {
      set_rs_server_id(from.rs_server_id());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsGSGetRoomInfoRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsGSGetRoomInfoRs::CopyFrom(const StruDsGSGetRoomInfoRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsGSGetRoomInfoRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruDsGSGetRoomInfoRs::Swap(StruDsGSGetRoomInfoRs* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(rs_server_id_, other->rs_server_id_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsGSGetRoomInfoRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsGSGetRoomInfoRs_descriptor_;
  metadata.reflection = StruDsGSGetRoomInfoRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsRSGetCsInfoRq::kServerIdFieldNumber;
#endif  // !_MSC_VER

StruDsRSGetCsInfoRq::StruDsRSGetCsInfoRq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsRSGetCsInfoRq::InitAsDefaultInstance() {
}

StruDsRSGetCsInfoRq::StruDsRSGetCsInfoRq(const StruDsRSGetCsInfoRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsRSGetCsInfoRq::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsRSGetCsInfoRq::~StruDsRSGetCsInfoRq() {
  SharedDtor();
}

void StruDsRSGetCsInfoRq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruDsRSGetCsInfoRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsRSGetCsInfoRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsRSGetCsInfoRq_descriptor_;
}

const StruDsRSGetCsInfoRq& StruDsRSGetCsInfoRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsRSGetCsInfoRq* StruDsRSGetCsInfoRq::default_instance_ = NULL;

StruDsRSGetCsInfoRq* StruDsRSGetCsInfoRq::New() const {
  return new StruDsRSGetCsInfoRq;
}

void StruDsRSGetCsInfoRq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsRSGetCsInfoRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsRSGetCsInfoRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsRSGetCsInfoRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsRSGetCsInfoRq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsRSGetCsInfoRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsRSGetCsInfoRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsRSGetCsInfoRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsRSGetCsInfoRq::MergeFrom(const StruDsRSGetCsInfoRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsRSGetCsInfoRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsRSGetCsInfoRq::CopyFrom(const StruDsRSGetCsInfoRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsRSGetCsInfoRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StruDsRSGetCsInfoRq::Swap(StruDsRSGetCsInfoRq* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsRSGetCsInfoRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsRSGetCsInfoRq_descriptor_;
  metadata.reflection = StruDsRSGetCsInfoRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SStruDsRSGetCsInfoRs::kServerIdFieldNumber;
const int SStruDsRSGetCsInfoRs::kCsServerIdFieldNumber;
const int SStruDsRSGetCsInfoRs::kServerIpFieldNumber;
const int SStruDsRSGetCsInfoRs::kServerPortFieldNumber;
#endif  // !_MSC_VER

SStruDsRSGetCsInfoRs::SStruDsRSGetCsInfoRs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SStruDsRSGetCsInfoRs::InitAsDefaultInstance() {
}

SStruDsRSGetCsInfoRs::SStruDsRSGetCsInfoRs(const SStruDsRSGetCsInfoRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SStruDsRSGetCsInfoRs::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  cs_server_id_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SStruDsRSGetCsInfoRs::~SStruDsRSGetCsInfoRs() {
  SharedDtor();
}

void SStruDsRSGetCsInfoRs::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void SStruDsRSGetCsInfoRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SStruDsRSGetCsInfoRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SStruDsRSGetCsInfoRs_descriptor_;
}

const SStruDsRSGetCsInfoRs& SStruDsRSGetCsInfoRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

SStruDsRSGetCsInfoRs* SStruDsRSGetCsInfoRs::default_instance_ = NULL;

SStruDsRSGetCsInfoRs* SStruDsRSGetCsInfoRs::New() const {
  return new SStruDsRSGetCsInfoRs;
}

void SStruDsRSGetCsInfoRs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    cs_server_id_ = 0;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SStruDsRSGetCsInfoRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cs_server_id;
        break;
      }
      
      // required int32 cs_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cs_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cs_server_id_)));
          set_has_cs_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_ip;
        break;
      }
      
      // required string server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_port;
        break;
      }
      
      // required int32 server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SStruDsRSGetCsInfoRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 cs_server_id = 2;
  if (has_cs_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cs_server_id(), output);
  }
  
  // required string server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_ip(), output);
  }
  
  // required int32 server_port = 4;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SStruDsRSGetCsInfoRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 cs_server_id = 2;
  if (has_cs_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cs_server_id(), target);
  }
  
  // required string server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ip(), target);
  }
  
  // required int32 server_port = 4;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SStruDsRSGetCsInfoRs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 cs_server_id = 2;
    if (has_cs_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cs_server_id());
    }
    
    // required string server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
    // required int32 server_port = 4;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SStruDsRSGetCsInfoRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SStruDsRSGetCsInfoRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SStruDsRSGetCsInfoRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SStruDsRSGetCsInfoRs::MergeFrom(const SStruDsRSGetCsInfoRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_cs_server_id()) {
      set_cs_server_id(from.cs_server_id());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SStruDsRSGetCsInfoRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStruDsRSGetCsInfoRs::CopyFrom(const SStruDsRSGetCsInfoRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStruDsRSGetCsInfoRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SStruDsRSGetCsInfoRs::Swap(SStruDsRSGetCsInfoRs* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(cs_server_id_, other->cs_server_id_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SStruDsRSGetCsInfoRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SStruDsRSGetCsInfoRs_descriptor_;
  metadata.reflection = SStruDsRSGetCsInfoRs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StruDsMSStreamRq_StreamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsMSStreamRq_StreamType_descriptor_;
}
bool StruDsMSStreamRq_StreamType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StruDsMSStreamRq_StreamType StruDsMSStreamRq::STREAM_TYPE_OPEN;
const StruDsMSStreamRq_StreamType StruDsMSStreamRq::STREAM_TYPE_CLOSE;
const StruDsMSStreamRq_StreamType StruDsMSStreamRq::StreamType_MIN;
const StruDsMSStreamRq_StreamType StruDsMSStreamRq::StreamType_MAX;
const int StruDsMSStreamRq::StreamType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StruDsMSStreamRq::kServerIdFieldNumber;
const int StruDsMSStreamRq::kStreamIdFieldNumber;
const int StruDsMSStreamRq::kStreamTypeFieldNumber;
#endif  // !_MSC_VER

StruDsMSStreamRq::StruDsMSStreamRq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsMSStreamRq::InitAsDefaultInstance() {
}

StruDsMSStreamRq::StruDsMSStreamRq(const StruDsMSStreamRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsMSStreamRq::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stream_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsMSStreamRq::~StruDsMSStreamRq() {
  SharedDtor();
}

void StruDsMSStreamRq::SharedDtor() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_id_;
  }
  if (this != default_instance_) {
  }
}

void StruDsMSStreamRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsMSStreamRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsMSStreamRq_descriptor_;
}

const StruDsMSStreamRq& StruDsMSStreamRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsMSStreamRq* StruDsMSStreamRq::default_instance_ = NULL;

StruDsMSStreamRq* StruDsMSStreamRq::New() const {
  return new StruDsMSStreamRq;
}

void StruDsMSStreamRq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_stream_id()) {
      if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
        stream_id_->clear();
      }
    }
    stream_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsMSStreamRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream_id;
        break;
      }
      
      // required string stream_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stream_type;
        break;
      }
      
      // required .StruDsMSStreamRq.StreamType stream_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StruDsMSStreamRq_StreamType_IsValid(value)) {
            set_stream_type(static_cast< ::StruDsMSStreamRq_StreamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsMSStreamRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stream_id(), output);
  }
  
  // required .StruDsMSStreamRq.StreamType stream_type = 3;
  if (has_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stream_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsMSStreamRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }
  
  // required .StruDsMSStreamRq.StreamType stream_type = 3;
  if (has_stream_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stream_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsMSStreamRq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required string stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_id());
    }
    
    // required .StruDsMSStreamRq.StreamType stream_type = 3;
    if (has_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsMSStreamRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsMSStreamRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsMSStreamRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsMSStreamRq::MergeFrom(const StruDsMSStreamRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_stream_type()) {
      set_stream_type(from.stream_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsMSStreamRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsMSStreamRq::CopyFrom(const StruDsMSStreamRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsMSStreamRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StruDsMSStreamRq::Swap(StruDsMSStreamRq* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(stream_type_, other->stream_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsMSStreamRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsMSStreamRq_descriptor_;
  metadata.reflection = StruDsMSStreamRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsMSStreamRs::kServerIdFieldNumber;
const int StruDsMSStreamRs::kStreamIdFieldNumber;
const int StruDsMSStreamRs::kResultFieldNumber;
#endif  // !_MSC_VER

StruDsMSStreamRs::StruDsMSStreamRs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsMSStreamRs::InitAsDefaultInstance() {
}

StruDsMSStreamRs::StruDsMSStreamRs(const StruDsMSStreamRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsMSStreamRs::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsMSStreamRs::~StruDsMSStreamRs() {
  SharedDtor();
}

void StruDsMSStreamRs::SharedDtor() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_id_;
  }
  if (this != default_instance_) {
  }
}

void StruDsMSStreamRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsMSStreamRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsMSStreamRs_descriptor_;
}

const StruDsMSStreamRs& StruDsMSStreamRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsMSStreamRs* StruDsMSStreamRs::default_instance_ = NULL;

StruDsMSStreamRs* StruDsMSStreamRs::New() const {
  return new StruDsMSStreamRs;
}

void StruDsMSStreamRs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_stream_id()) {
      if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
        stream_id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsMSStreamRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream_id;
        break;
      }
      
      // required string stream_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsMSStreamRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stream_id(), output);
  }
  
  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsMSStreamRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }
  
  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsMSStreamRs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required string stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_id());
    }
    
    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsMSStreamRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsMSStreamRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsMSStreamRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsMSStreamRs::MergeFrom(const StruDsMSStreamRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsMSStreamRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsMSStreamRs::CopyFrom(const StruDsMSStreamRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsMSStreamRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StruDsMSStreamRs::Swap(StruDsMSStreamRs* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsMSStreamRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsMSStreamRs_descriptor_;
  metadata.reflection = StruDsMSStreamRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsMSQueryStreamRq::kServerIdFieldNumber;
const int StruDsMSQueryStreamRq::kStreamIdFieldNumber;
#endif  // !_MSC_VER

StruDsMSQueryStreamRq::StruDsMSQueryStreamRq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsMSQueryStreamRq::InitAsDefaultInstance() {
}

StruDsMSQueryStreamRq::StruDsMSQueryStreamRq(const StruDsMSQueryStreamRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsMSQueryStreamRq::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsMSQueryStreamRq::~StruDsMSQueryStreamRq() {
  SharedDtor();
}

void StruDsMSQueryStreamRq::SharedDtor() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_id_;
  }
  if (this != default_instance_) {
  }
}

void StruDsMSQueryStreamRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsMSQueryStreamRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsMSQueryStreamRq_descriptor_;
}

const StruDsMSQueryStreamRq& StruDsMSQueryStreamRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsMSQueryStreamRq* StruDsMSQueryStreamRq::default_instance_ = NULL;

StruDsMSQueryStreamRq* StruDsMSQueryStreamRq::New() const {
  return new StruDsMSQueryStreamRq;
}

void StruDsMSQueryStreamRq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_stream_id()) {
      if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
        stream_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsMSQueryStreamRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream_id;
        break;
      }
      
      // required string stream_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsMSQueryStreamRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stream_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsMSQueryStreamRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required string stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsMSQueryStreamRq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required string stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsMSQueryStreamRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsMSQueryStreamRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsMSQueryStreamRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsMSQueryStreamRq::MergeFrom(const StruDsMSQueryStreamRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsMSQueryStreamRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsMSQueryStreamRq::CopyFrom(const StruDsMSQueryStreamRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsMSQueryStreamRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StruDsMSQueryStreamRq::Swap(StruDsMSQueryStreamRq* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsMSQueryStreamRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsMSQueryStreamRq_descriptor_;
  metadata.reflection = StruDsMSQueryStreamRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruDsMSQueryStreamRs::kServerIdFieldNumber;
const int StruDsMSQueryStreamRs::kResultFieldNumber;
const int StruDsMSQueryStreamRs::kStreamIdFieldNumber;
const int StruDsMSQueryStreamRs::kSrcStreamUrlFieldNumber;
const int StruDsMSQueryStreamRs::kStreamServerIdFieldNumber;
#endif  // !_MSC_VER

StruDsMSQueryStreamRs::StruDsMSQueryStreamRs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsMSQueryStreamRs::InitAsDefaultInstance() {
}

StruDsMSQueryStreamRs::StruDsMSQueryStreamRs(const StruDsMSQueryStreamRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsMSQueryStreamRs::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  result_ = 0;
  stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_stream_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stream_server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsMSQueryStreamRs::~StruDsMSQueryStreamRs() {
  SharedDtor();
}

void StruDsMSQueryStreamRs::SharedDtor() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_id_;
  }
  if (src_stream_url_ != &::google::protobuf::internal::kEmptyString) {
    delete src_stream_url_;
  }
  if (this != default_instance_) {
  }
}

void StruDsMSQueryStreamRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsMSQueryStreamRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsMSQueryStreamRs_descriptor_;
}

const StruDsMSQueryStreamRs& StruDsMSQueryStreamRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsMSQueryStreamRs* StruDsMSQueryStreamRs::default_instance_ = NULL;

StruDsMSQueryStreamRs* StruDsMSQueryStreamRs::New() const {
  return new StruDsMSQueryStreamRs;
}

void StruDsMSQueryStreamRs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    result_ = 0;
    if (has_stream_id()) {
      if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
        stream_id_->clear();
      }
    }
    if (has_src_stream_url()) {
      if (src_stream_url_ != &::google::protobuf::internal::kEmptyString) {
        src_stream_url_->clear();
      }
    }
    stream_server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsMSQueryStreamRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream_id;
        break;
      }
      
      // required string stream_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_src_stream_url;
        break;
      }
      
      // required string src_stream_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_stream_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_stream_url().data(), this->src_stream_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stream_server_id;
        break;
      }
      
      // required int32 stream_server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_server_id_)));
          set_has_stream_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsMSQueryStreamRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // required string stream_id = 3;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stream_id(), output);
  }
  
  // required string src_stream_url = 4;
  if (has_src_stream_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_stream_url().data(), this->src_stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->src_stream_url(), output);
  }
  
  // required int32 stream_server_id = 5;
  if (has_stream_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stream_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsMSQueryStreamRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // required string stream_id = 3;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_id(), target);
  }
  
  // required string src_stream_url = 4;
  if (has_src_stream_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_stream_url().data(), this->src_stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->src_stream_url(), target);
  }
  
  // required int32 stream_server_id = 5;
  if (has_stream_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stream_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsMSQueryStreamRs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string stream_id = 3;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_id());
    }
    
    // required string src_stream_url = 4;
    if (has_src_stream_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_stream_url());
    }
    
    // required int32 stream_server_id = 5;
    if (has_stream_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stream_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsMSQueryStreamRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsMSQueryStreamRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsMSQueryStreamRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsMSQueryStreamRs::MergeFrom(const StruDsMSQueryStreamRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_src_stream_url()) {
      set_src_stream_url(from.src_stream_url());
    }
    if (from.has_stream_server_id()) {
      set_stream_server_id(from.stream_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsMSQueryStreamRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsMSQueryStreamRs::CopyFrom(const StruDsMSQueryStreamRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsMSQueryStreamRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruDsMSQueryStreamRs::Swap(StruDsMSQueryStreamRs* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(result_, other->result_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(src_stream_url_, other->src_stream_url_);
    std::swap(stream_server_id_, other->stream_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsMSQueryStreamRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsMSQueryStreamRs_descriptor_;
  metadata.reflection = StruDsMSQueryStreamRs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StruDsServerInfo_ServerInfoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerInfo_ServerInfoType_descriptor_;
}
bool StruDsServerInfo_ServerInfoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StruDsServerInfo_ServerInfoType StruDsServerInfo::SERVER_INFO_TYPE_ADD;
const StruDsServerInfo_ServerInfoType StruDsServerInfo::SERVER_INFO_TYPE_DEL;
const StruDsServerInfo_ServerInfoType StruDsServerInfo::ServerInfoType_MIN;
const StruDsServerInfo_ServerInfoType StruDsServerInfo::ServerInfoType_MAX;
const int StruDsServerInfo::ServerInfoType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StruDsServerInfo::kServerIdFieldNumber;
const int StruDsServerInfo::kServerInfoTypeFieldNumber;
const int StruDsServerInfo::kServerIpFieldNumber;
const int StruDsServerInfo::kServerDetectPortFieldNumber;
#endif  // !_MSC_VER

StruDsServerInfo::StruDsServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruDsServerInfo::InitAsDefaultInstance() {
}

StruDsServerInfo::StruDsServerInfo(const StruDsServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruDsServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  server_info_type_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_detect_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruDsServerInfo::~StruDsServerInfo() {
  SharedDtor();
}

void StruDsServerInfo::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void StruDsServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruDsServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruDsServerInfo_descriptor_;
}

const StruDsServerInfo& StruDsServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruDsServerInfo* StruDsServerInfo::default_instance_ = NULL;

StruDsServerInfo* StruDsServerInfo::New() const {
  return new StruDsServerInfo;
}

void StruDsServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    server_info_type_ = 0;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_detect_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruDsServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_info_type;
        break;
      }
      
      // required .StruDsServerInfo.ServerInfoType server_info_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_info_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StruDsServerInfo_ServerInfoType_IsValid(value)) {
            set_server_info_type(static_cast< ::StruDsServerInfo_ServerInfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_ip;
        break;
      }
      
      // required string server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_detect_port;
        break;
      }
      
      // required int32 server_detect_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_detect_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_detect_port_)));
          set_has_server_detect_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruDsServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }
  
  // required .StruDsServerInfo.ServerInfoType server_info_type = 2;
  if (has_server_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server_info_type(), output);
  }
  
  // required string server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_ip(), output);
  }
  
  // required int32 server_detect_port = 4;
  if (has_server_detect_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_detect_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruDsServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }
  
  // required .StruDsServerInfo.ServerInfoType server_info_type = 2;
  if (has_server_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server_info_type(), target);
  }
  
  // required string server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ip(), target);
  }
  
  // required int32 server_detect_port = 4;
  if (has_server_detect_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_detect_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruDsServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // required .StruDsServerInfo.ServerInfoType server_info_type = 2;
    if (has_server_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_info_type());
    }
    
    // required string server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
    // required int32 server_detect_port = 4;
    if (has_server_detect_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_detect_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruDsServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruDsServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruDsServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruDsServerInfo::MergeFrom(const StruDsServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_info_type()) {
      set_server_info_type(from.server_info_type());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_detect_port()) {
      set_server_detect_port(from.server_detect_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruDsServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruDsServerInfo::CopyFrom(const StruDsServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruDsServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruDsServerInfo::Swap(StruDsServerInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_info_type_, other->server_info_type_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_detect_port_, other->server_detect_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruDsServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruDsServerInfo_descriptor_;
  metadata.reflection = StruDsServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruServerDetctInfo::kSrcServerIdFieldNumber;
const int StruServerDetctInfo::kDstServerIdFieldNumber;
const int StruServerDetctInfo::kPktIndexFieldNumber;
const int StruServerDetctInfo::kPktSendtimeFieldNumber;
const int StruServerDetctInfo::kPktDataFieldNumber;
#endif  // !_MSC_VER

StruServerDetctInfo::StruServerDetctInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruServerDetctInfo::InitAsDefaultInstance() {
}

StruServerDetctInfo::StruServerDetctInfo(const StruServerDetctInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruServerDetctInfo::SharedCtor() {
  _cached_size_ = 0;
  src_server_id_ = 0;
  dst_server_id_ = 0;
  pkt_index_ = 0;
  pkt_sendtime_ = 0;
  pkt_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruServerDetctInfo::~StruServerDetctInfo() {
  SharedDtor();
}

void StruServerDetctInfo::SharedDtor() {
  if (pkt_data_ != &::google::protobuf::internal::kEmptyString) {
    delete pkt_data_;
  }
  if (this != default_instance_) {
  }
}

void StruServerDetctInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruServerDetctInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruServerDetctInfo_descriptor_;
}

const StruServerDetctInfo& StruServerDetctInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruServerDetctInfo* StruServerDetctInfo::default_instance_ = NULL;

StruServerDetctInfo* StruServerDetctInfo::New() const {
  return new StruServerDetctInfo;
}

void StruServerDetctInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_server_id_ = 0;
    dst_server_id_ = 0;
    pkt_index_ = 0;
    pkt_sendtime_ = 0;
    if (has_pkt_data()) {
      if (pkt_data_ != &::google::protobuf::internal::kEmptyString) {
        pkt_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruServerDetctInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src_server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_id_)));
          set_has_src_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_server_id;
        break;
      }
      
      // required int32 dst_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_server_id_)));
          set_has_dst_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pkt_index;
        break;
      }
      
      // required int32 pkt_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkt_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkt_index_)));
          set_has_pkt_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkt_sendtime;
        break;
      }
      
      // required int32 pkt_sendtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkt_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkt_sendtime_)));
          set_has_pkt_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pkt_data;
        break;
      }
      
      // required bytes pkt_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkt_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pkt_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruServerDetctInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 src_server_id = 1;
  if (has_src_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_server_id(), output);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_server_id(), output);
  }
  
  // required int32 pkt_index = 3;
  if (has_pkt_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pkt_index(), output);
  }
  
  // required int32 pkt_sendtime = 4;
  if (has_pkt_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pkt_sendtime(), output);
  }
  
  // required bytes pkt_data = 5;
  if (has_pkt_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->pkt_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruServerDetctInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 src_server_id = 1;
  if (has_src_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_server_id(), target);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_server_id(), target);
  }
  
  // required int32 pkt_index = 3;
  if (has_pkt_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pkt_index(), target);
  }
  
  // required int32 pkt_sendtime = 4;
  if (has_pkt_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pkt_sendtime(), target);
  }
  
  // required bytes pkt_data = 5;
  if (has_pkt_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pkt_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruServerDetctInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src_server_id = 1;
    if (has_src_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_id());
    }
    
    // required int32 dst_server_id = 2;
    if (has_dst_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_server_id());
    }
    
    // required int32 pkt_index = 3;
    if (has_pkt_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkt_index());
    }
    
    // required int32 pkt_sendtime = 4;
    if (has_pkt_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkt_sendtime());
    }
    
    // required bytes pkt_data = 5;
    if (has_pkt_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pkt_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruServerDetctInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruServerDetctInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruServerDetctInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruServerDetctInfo::MergeFrom(const StruServerDetctInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_server_id()) {
      set_src_server_id(from.src_server_id());
    }
    if (from.has_dst_server_id()) {
      set_dst_server_id(from.dst_server_id());
    }
    if (from.has_pkt_index()) {
      set_pkt_index(from.pkt_index());
    }
    if (from.has_pkt_sendtime()) {
      set_pkt_sendtime(from.pkt_sendtime());
    }
    if (from.has_pkt_data()) {
      set_pkt_data(from.pkt_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruServerDetctInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruServerDetctInfo::CopyFrom(const StruServerDetctInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruServerDetctInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruServerDetctInfo::Swap(StruServerDetctInfo* other) {
  if (other != this) {
    std::swap(src_server_id_, other->src_server_id_);
    std::swap(dst_server_id_, other->dst_server_id_);
    std::swap(pkt_index_, other->pkt_index_);
    std::swap(pkt_sendtime_, other->pkt_sendtime_);
    std::swap(pkt_data_, other->pkt_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruServerDetctInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruServerDetctInfo_descriptor_;
  metadata.reflection = StruServerDetctInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruServerDetctResult::kSrcServerIdFieldNumber;
const int StruServerDetctResult::kDstServerIdFieldNumber;
const int StruServerDetctResult::kLostFieldNumber;
const int StruServerDetctResult::kDelayFieldNumber;
#endif  // !_MSC_VER

StruServerDetctResult::StruServerDetctResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruServerDetctResult::InitAsDefaultInstance() {
}

StruServerDetctResult::StruServerDetctResult(const StruServerDetctResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruServerDetctResult::SharedCtor() {
  _cached_size_ = 0;
  src_server_id_ = 0;
  dst_server_id_ = 0;
  lost_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruServerDetctResult::~StruServerDetctResult() {
  SharedDtor();
}

void StruServerDetctResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruServerDetctResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruServerDetctResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruServerDetctResult_descriptor_;
}

const StruServerDetctResult& StruServerDetctResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_5fserver_2eproto();  return *default_instance_;
}

StruServerDetctResult* StruServerDetctResult::default_instance_ = NULL;

StruServerDetctResult* StruServerDetctResult::New() const {
  return new StruServerDetctResult;
}

void StruServerDetctResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_server_id_ = 0;
    dst_server_id_ = 0;
    lost_ = 0;
    delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruServerDetctResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src_server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_id_)));
          set_has_src_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_server_id;
        break;
      }
      
      // required int32 dst_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_server_id_)));
          set_has_dst_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lost;
        break;
      }
      
      // required int32 lost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lost_)));
          set_has_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delay;
        break;
      }
      
      // required int32 delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruServerDetctResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 src_server_id = 1;
  if (has_src_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_server_id(), output);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_server_id(), output);
  }
  
  // required int32 lost = 3;
  if (has_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lost(), output);
  }
  
  // required int32 delay = 4;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruServerDetctResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 src_server_id = 1;
  if (has_src_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_server_id(), target);
  }
  
  // required int32 dst_server_id = 2;
  if (has_dst_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_server_id(), target);
  }
  
  // required int32 lost = 3;
  if (has_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lost(), target);
  }
  
  // required int32 delay = 4;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruServerDetctResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src_server_id = 1;
    if (has_src_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_id());
    }
    
    // required int32 dst_server_id = 2;
    if (has_dst_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_server_id());
    }
    
    // required int32 lost = 3;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lost());
    }
    
    // required int32 delay = 4;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruServerDetctResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruServerDetctResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruServerDetctResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruServerDetctResult::MergeFrom(const StruServerDetctResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_server_id()) {
      set_src_server_id(from.src_server_id());
    }
    if (from.has_dst_server_id()) {
      set_dst_server_id(from.dst_server_id());
    }
    if (from.has_lost()) {
      set_lost(from.lost());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruServerDetctResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruServerDetctResult::CopyFrom(const StruServerDetctResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruServerDetctResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruServerDetctResult::Swap(StruServerDetctResult* other) {
  if (other != this) {
    std::swap(src_server_id_, other->src_server_id_);
    std::swap(dst_server_id_, other->dst_server_id_);
    std::swap(lost_, other->lost_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruServerDetctResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruServerDetctResult_descriptor_;
  metadata.reflection = StruServerDetctResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
