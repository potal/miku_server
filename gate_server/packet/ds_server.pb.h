// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ds_server.proto

#ifndef PROTOBUF_ds_5fserver_2eproto__INCLUDED
#define PROTOBUF_ds_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ds_5fserver_2eproto();
void protobuf_AssignDesc_ds_5fserver_2eproto();
void protobuf_ShutdownFile_ds_5fserver_2eproto();

class StruDsServerConnectRq;
class StruDsServerConnectRs;
class StruDsServerReportCurrentUserCount;
class StruDsServerMsg;
class StruDsGSGetRoomInfoRq;
class StruDsGSGetRoomInfoRs;
class StruDsRSGetCsInfoRq;
class SStruDsRSGetCsInfoRs;
class StruDsMSStreamRq;
class StruDsMSStreamRs;
class StruDsMSQueryStreamRq;
class StruDsMSQueryStreamRs;
class StruDsServerInfo;
class StruServerDetctInfo;
class StruServerDetctResult;

enum StruDsServerConnectRq_ConnectType {
  StruDsServerConnectRq_ConnectType_CONNECT_TYPE_NEWCONNECT = 0,
  StruDsServerConnectRq_ConnectType_CONNECT_TYPE_RECONNECT = 1
};
bool StruDsServerConnectRq_ConnectType_IsValid(int value);
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq_ConnectType_ConnectType_MIN = StruDsServerConnectRq_ConnectType_CONNECT_TYPE_NEWCONNECT;
const StruDsServerConnectRq_ConnectType StruDsServerConnectRq_ConnectType_ConnectType_MAX = StruDsServerConnectRq_ConnectType_CONNECT_TYPE_RECONNECT;
const int StruDsServerConnectRq_ConnectType_ConnectType_ARRAYSIZE = StruDsServerConnectRq_ConnectType_ConnectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StruDsServerConnectRq_ConnectType_descriptor();
inline const ::std::string& StruDsServerConnectRq_ConnectType_Name(StruDsServerConnectRq_ConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StruDsServerConnectRq_ConnectType_descriptor(), value);
}
inline bool StruDsServerConnectRq_ConnectType_Parse(
    const ::std::string& name, StruDsServerConnectRq_ConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StruDsServerConnectRq_ConnectType>(
    StruDsServerConnectRq_ConnectType_descriptor(), name, value);
}
enum StruDsMSStreamRq_StreamType {
  StruDsMSStreamRq_StreamType_STREAM_TYPE_OPEN = 0,
  StruDsMSStreamRq_StreamType_STREAM_TYPE_CLOSE = 1
};
bool StruDsMSStreamRq_StreamType_IsValid(int value);
const StruDsMSStreamRq_StreamType StruDsMSStreamRq_StreamType_StreamType_MIN = StruDsMSStreamRq_StreamType_STREAM_TYPE_OPEN;
const StruDsMSStreamRq_StreamType StruDsMSStreamRq_StreamType_StreamType_MAX = StruDsMSStreamRq_StreamType_STREAM_TYPE_CLOSE;
const int StruDsMSStreamRq_StreamType_StreamType_ARRAYSIZE = StruDsMSStreamRq_StreamType_StreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StruDsMSStreamRq_StreamType_descriptor();
inline const ::std::string& StruDsMSStreamRq_StreamType_Name(StruDsMSStreamRq_StreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StruDsMSStreamRq_StreamType_descriptor(), value);
}
inline bool StruDsMSStreamRq_StreamType_Parse(
    const ::std::string& name, StruDsMSStreamRq_StreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StruDsMSStreamRq_StreamType>(
    StruDsMSStreamRq_StreamType_descriptor(), name, value);
}
enum StruDsServerInfo_ServerInfoType {
  StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_ADD = 0,
  StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_DEL = 1
};
bool StruDsServerInfo_ServerInfoType_IsValid(int value);
const StruDsServerInfo_ServerInfoType StruDsServerInfo_ServerInfoType_ServerInfoType_MIN = StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_ADD;
const StruDsServerInfo_ServerInfoType StruDsServerInfo_ServerInfoType_ServerInfoType_MAX = StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_DEL;
const int StruDsServerInfo_ServerInfoType_ServerInfoType_ARRAYSIZE = StruDsServerInfo_ServerInfoType_ServerInfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StruDsServerInfo_ServerInfoType_descriptor();
inline const ::std::string& StruDsServerInfo_ServerInfoType_Name(StruDsServerInfo_ServerInfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StruDsServerInfo_ServerInfoType_descriptor(), value);
}
inline bool StruDsServerInfo_ServerInfoType_Parse(
    const ::std::string& name, StruDsServerInfo_ServerInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StruDsServerInfo_ServerInfoType>(
    StruDsServerInfo_ServerInfoType_descriptor(), name, value);
}
enum CytPacketType {
  DEF_DS_SERVER_CONNECT_RQ = 1001,
  DEF_DS_SERVER_CONNECT_RS = 1002,
  DEF_DS_SERVER_REPORT_CURRENT_USER_COUNT = 1003,
  DEF_DS_SERVER_MSG = 1004,
  DEF_DS_GS_GET_ROOMINFO_RQ = 1005,
  DEF_DS_GS_GET_ROOMINFO_RS = 1006,
  DEF_DS_MS_STREAM_RQ = 1007,
  DEF_DS_MS_STREAM_RS = 1008,
  DEF_DS_MS_QUERY_STREAM_RQ = 1009,
  DEF_DS_MS_QUERY_STREAM_RS = 10010,
  DEF_DS_RS_GET_CS_RQ = 10011,
  DEF_DS_RS_GET_CS_RS = 10012,
  DEF_DS_SERVER_INFO = 10013,
  DEF_DS_SERVER_DETCT = 10014,
  DEF_DS_SERVER_DETCT_RESULT = 10015
};
bool CytPacketType_IsValid(int value);
const CytPacketType CytPacketType_MIN = DEF_DS_SERVER_CONNECT_RQ;
const CytPacketType CytPacketType_MAX = DEF_DS_SERVER_DETCT_RESULT;
const int CytPacketType_ARRAYSIZE = CytPacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CytPacketType_descriptor();
inline const ::std::string& CytPacketType_Name(CytPacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CytPacketType_descriptor(), value);
}
inline bool CytPacketType_Parse(
    const ::std::string& name, CytPacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CytPacketType>(
    CytPacketType_descriptor(), name, value);
}
enum ServerType {
  SERVER_TYPE_DS = 0,
  SERVER_TYPE_GS = 1,
  SERVER_TYPE_RS = 2,
  SERVER_TYPE_CS = 3,
  SERVER_TYPE_MS = 4
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = SERVER_TYPE_DS;
const ServerType ServerType_MAX = SERVER_TYPE_MS;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class StruDsServerConnectRq : public ::google::protobuf::Message {
 public:
  StruDsServerConnectRq();
  virtual ~StruDsServerConnectRq();
  
  StruDsServerConnectRq(const StruDsServerConnectRq& from);
  
  inline StruDsServerConnectRq& operator=(const StruDsServerConnectRq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsServerConnectRq& default_instance();
  
  void Swap(StruDsServerConnectRq* other);
  
  // implements Message ----------------------------------------------
  
  StruDsServerConnectRq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsServerConnectRq& from);
  void MergeFrom(const StruDsServerConnectRq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StruDsServerConnectRq_ConnectType ConnectType;
  static const ConnectType CONNECT_TYPE_NEWCONNECT = StruDsServerConnectRq_ConnectType_CONNECT_TYPE_NEWCONNECT;
  static const ConnectType CONNECT_TYPE_RECONNECT = StruDsServerConnectRq_ConnectType_CONNECT_TYPE_RECONNECT;
  static inline bool ConnectType_IsValid(int value) {
    return StruDsServerConnectRq_ConnectType_IsValid(value);
  }
  static const ConnectType ConnectType_MIN =
    StruDsServerConnectRq_ConnectType_ConnectType_MIN;
  static const ConnectType ConnectType_MAX =
    StruDsServerConnectRq_ConnectType_ConnectType_MAX;
  static const int ConnectType_ARRAYSIZE =
    StruDsServerConnectRq_ConnectType_ConnectType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectType_descriptor() {
    return StruDsServerConnectRq_ConnectType_descriptor();
  }
  static inline const ::std::string& ConnectType_Name(ConnectType value) {
    return StruDsServerConnectRq_ConnectType_Name(value);
  }
  static inline bool ConnectType_Parse(const ::std::string& name,
      ConnectType* value) {
    return StruDsServerConnectRq_ConnectType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required string server_ip = 2;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 2;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // required int32 server_port = 3;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);
  
  // required .ServerType server_type = 4;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 4;
  inline ServerType server_type() const;
  inline void set_server_type(ServerType value);
  
  // required .StruDsServerConnectRq.ConnectType connect_type = 5;
  inline bool has_connect_type() const;
  inline void clear_connect_type();
  static const int kConnectTypeFieldNumber = 5;
  inline ::StruDsServerConnectRq_ConnectType connect_type() const;
  inline void set_connect_type(::StruDsServerConnectRq_ConnectType value);
  
  // optional int32 server_detect_port = 6;
  inline bool has_server_detect_port() const;
  inline void clear_server_detect_port();
  static const int kServerDetectPortFieldNumber = 6;
  inline ::google::protobuf::int32 server_detect_port() const;
  inline void set_server_detect_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsServerConnectRq)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_connect_type();
  inline void clear_has_connect_type();
  inline void set_has_server_detect_port();
  inline void clear_has_server_detect_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_ip_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_port_;
  int server_type_;
  int connect_type_;
  ::google::protobuf::int32 server_detect_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsServerConnectRq* default_instance_;
};
// -------------------------------------------------------------------

class StruDsServerConnectRs : public ::google::protobuf::Message {
 public:
  StruDsServerConnectRs();
  virtual ~StruDsServerConnectRs();
  
  StruDsServerConnectRs(const StruDsServerConnectRs& from);
  
  inline StruDsServerConnectRs& operator=(const StruDsServerConnectRs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsServerConnectRs& default_instance();
  
  void Swap(StruDsServerConnectRs* other);
  
  // implements Message ----------------------------------------------
  
  StruDsServerConnectRs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsServerConnectRs& from);
  void MergeFrom(const StruDsServerConnectRs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsServerConnectRs)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsServerConnectRs* default_instance_;
};
// -------------------------------------------------------------------

class StruDsServerReportCurrentUserCount : public ::google::protobuf::Message {
 public:
  StruDsServerReportCurrentUserCount();
  virtual ~StruDsServerReportCurrentUserCount();
  
  StruDsServerReportCurrentUserCount(const StruDsServerReportCurrentUserCount& from);
  
  inline StruDsServerReportCurrentUserCount& operator=(const StruDsServerReportCurrentUserCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsServerReportCurrentUserCount& default_instance();
  
  void Swap(StruDsServerReportCurrentUserCount* other);
  
  // implements Message ----------------------------------------------
  
  StruDsServerReportCurrentUserCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsServerReportCurrentUserCount& from);
  void MergeFrom(const StruDsServerReportCurrentUserCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 current_user_count = 2;
  inline bool has_current_user_count() const;
  inline void clear_current_user_count();
  static const int kCurrentUserCountFieldNumber = 2;
  inline ::google::protobuf::int32 current_user_count() const;
  inline void set_current_user_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsServerReportCurrentUserCount)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_current_user_count();
  inline void clear_has_current_user_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 current_user_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsServerReportCurrentUserCount* default_instance_;
};
// -------------------------------------------------------------------

class StruDsServerMsg : public ::google::protobuf::Message {
 public:
  StruDsServerMsg();
  virtual ~StruDsServerMsg();
  
  StruDsServerMsg(const StruDsServerMsg& from);
  
  inline StruDsServerMsg& operator=(const StruDsServerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsServerMsg& default_instance();
  
  void Swap(StruDsServerMsg* other);
  
  // implements Message ----------------------------------------------
  
  StruDsServerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsServerMsg& from);
  void MergeFrom(const StruDsServerMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 dst_server_id = 2;
  inline bool has_dst_server_id() const;
  inline void clear_dst_server_id();
  static const int kDstServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 dst_server_id() const;
  inline void set_dst_server_id(::google::protobuf::int32 value);
  
  // required .ServerType dst_server_type = 3;
  inline bool has_dst_server_type() const;
  inline void clear_dst_server_type();
  static const int kDstServerTypeFieldNumber = 3;
  inline ServerType dst_server_type() const;
  inline void set_dst_server_type(ServerType value);
  
  // required bytes msg_data = 4;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 4;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  
  // @@protoc_insertion_point(class_scope:StruDsServerMsg)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_dst_server_id();
  inline void clear_has_dst_server_id();
  inline void set_has_dst_server_type();
  inline void clear_has_dst_server_type();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 dst_server_id_;
  ::std::string* msg_data_;
  int dst_server_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsServerMsg* default_instance_;
};
// -------------------------------------------------------------------

class StruDsGSGetRoomInfoRq : public ::google::protobuf::Message {
 public:
  StruDsGSGetRoomInfoRq();
  virtual ~StruDsGSGetRoomInfoRq();
  
  StruDsGSGetRoomInfoRq(const StruDsGSGetRoomInfoRq& from);
  
  inline StruDsGSGetRoomInfoRq& operator=(const StruDsGSGetRoomInfoRq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsGSGetRoomInfoRq& default_instance();
  
  void Swap(StruDsGSGetRoomInfoRq* other);
  
  // implements Message ----------------------------------------------
  
  StruDsGSGetRoomInfoRq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsGSGetRoomInfoRq& from);
  void MergeFrom(const StruDsGSGetRoomInfoRq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsGSGetRoomInfoRq)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsGSGetRoomInfoRq* default_instance_;
};
// -------------------------------------------------------------------

class StruDsGSGetRoomInfoRs : public ::google::protobuf::Message {
 public:
  StruDsGSGetRoomInfoRs();
  virtual ~StruDsGSGetRoomInfoRs();
  
  StruDsGSGetRoomInfoRs(const StruDsGSGetRoomInfoRs& from);
  
  inline StruDsGSGetRoomInfoRs& operator=(const StruDsGSGetRoomInfoRs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsGSGetRoomInfoRs& default_instance();
  
  void Swap(StruDsGSGetRoomInfoRs* other);
  
  // implements Message ----------------------------------------------
  
  StruDsGSGetRoomInfoRs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsGSGetRoomInfoRs& from);
  void MergeFrom(const StruDsGSGetRoomInfoRs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 rs_server_id = 3;
  inline bool has_rs_server_id() const;
  inline void clear_rs_server_id();
  static const int kRsServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 rs_server_id() const;
  inline void set_rs_server_id(::google::protobuf::int32 value);
  
  // required string server_ip = 4;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // required int32 server_port = 5;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 5;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsGSGetRoomInfoRs)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_rs_server_id();
  inline void clear_has_rs_server_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* server_ip_;
  ::google::protobuf::int32 rs_server_id_;
  ::google::protobuf::int32 server_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsGSGetRoomInfoRs* default_instance_;
};
// -------------------------------------------------------------------

class StruDsRSGetCsInfoRq : public ::google::protobuf::Message {
 public:
  StruDsRSGetCsInfoRq();
  virtual ~StruDsRSGetCsInfoRq();
  
  StruDsRSGetCsInfoRq(const StruDsRSGetCsInfoRq& from);
  
  inline StruDsRSGetCsInfoRq& operator=(const StruDsRSGetCsInfoRq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsRSGetCsInfoRq& default_instance();
  
  void Swap(StruDsRSGetCsInfoRq* other);
  
  // implements Message ----------------------------------------------
  
  StruDsRSGetCsInfoRq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsRSGetCsInfoRq& from);
  void MergeFrom(const StruDsRSGetCsInfoRq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsRSGetCsInfoRq)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsRSGetCsInfoRq* default_instance_;
};
// -------------------------------------------------------------------

class SStruDsRSGetCsInfoRs : public ::google::protobuf::Message {
 public:
  SStruDsRSGetCsInfoRs();
  virtual ~SStruDsRSGetCsInfoRs();
  
  SStruDsRSGetCsInfoRs(const SStruDsRSGetCsInfoRs& from);
  
  inline SStruDsRSGetCsInfoRs& operator=(const SStruDsRSGetCsInfoRs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SStruDsRSGetCsInfoRs& default_instance();
  
  void Swap(SStruDsRSGetCsInfoRs* other);
  
  // implements Message ----------------------------------------------
  
  SStruDsRSGetCsInfoRs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SStruDsRSGetCsInfoRs& from);
  void MergeFrom(const SStruDsRSGetCsInfoRs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 cs_server_id = 2;
  inline bool has_cs_server_id() const;
  inline void clear_cs_server_id();
  static const int kCsServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 cs_server_id() const;
  inline void set_cs_server_id(::google::protobuf::int32 value);
  
  // required string server_ip = 3;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // required int32 server_port = 4;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SStruDsRSGetCsInfoRs)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_cs_server_id();
  inline void clear_has_cs_server_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 cs_server_id_;
  ::std::string* server_ip_;
  ::google::protobuf::int32 server_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static SStruDsRSGetCsInfoRs* default_instance_;
};
// -------------------------------------------------------------------

class StruDsMSStreamRq : public ::google::protobuf::Message {
 public:
  StruDsMSStreamRq();
  virtual ~StruDsMSStreamRq();
  
  StruDsMSStreamRq(const StruDsMSStreamRq& from);
  
  inline StruDsMSStreamRq& operator=(const StruDsMSStreamRq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsMSStreamRq& default_instance();
  
  void Swap(StruDsMSStreamRq* other);
  
  // implements Message ----------------------------------------------
  
  StruDsMSStreamRq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsMSStreamRq& from);
  void MergeFrom(const StruDsMSStreamRq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StruDsMSStreamRq_StreamType StreamType;
  static const StreamType STREAM_TYPE_OPEN = StruDsMSStreamRq_StreamType_STREAM_TYPE_OPEN;
  static const StreamType STREAM_TYPE_CLOSE = StruDsMSStreamRq_StreamType_STREAM_TYPE_CLOSE;
  static inline bool StreamType_IsValid(int value) {
    return StruDsMSStreamRq_StreamType_IsValid(value);
  }
  static const StreamType StreamType_MIN =
    StruDsMSStreamRq_StreamType_StreamType_MIN;
  static const StreamType StreamType_MAX =
    StruDsMSStreamRq_StreamType_StreamType_MAX;
  static const int StreamType_ARRAYSIZE =
    StruDsMSStreamRq_StreamType_StreamType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StreamType_descriptor() {
    return StruDsMSStreamRq_StreamType_descriptor();
  }
  static inline const ::std::string& StreamType_Name(StreamType value) {
    return StruDsMSStreamRq_StreamType_Name(value);
  }
  static inline bool StreamType_Parse(const ::std::string& name,
      StreamType* value) {
    return StruDsMSStreamRq_StreamType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required string stream_id = 2;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  inline const ::std::string& stream_id() const;
  inline void set_stream_id(const ::std::string& value);
  inline void set_stream_id(const char* value);
  inline void set_stream_id(const char* value, size_t size);
  inline ::std::string* mutable_stream_id();
  inline ::std::string* release_stream_id();
  
  // required .StruDsMSStreamRq.StreamType stream_type = 3;
  inline bool has_stream_type() const;
  inline void clear_stream_type();
  static const int kStreamTypeFieldNumber = 3;
  inline ::StruDsMSStreamRq_StreamType stream_type() const;
  inline void set_stream_type(::StruDsMSStreamRq_StreamType value);
  
  // @@protoc_insertion_point(class_scope:StruDsMSStreamRq)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_stream_type();
  inline void clear_has_stream_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stream_id_;
  ::google::protobuf::int32 server_id_;
  int stream_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsMSStreamRq* default_instance_;
};
// -------------------------------------------------------------------

class StruDsMSStreamRs : public ::google::protobuf::Message {
 public:
  StruDsMSStreamRs();
  virtual ~StruDsMSStreamRs();
  
  StruDsMSStreamRs(const StruDsMSStreamRs& from);
  
  inline StruDsMSStreamRs& operator=(const StruDsMSStreamRs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsMSStreamRs& default_instance();
  
  void Swap(StruDsMSStreamRs* other);
  
  // implements Message ----------------------------------------------
  
  StruDsMSStreamRs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsMSStreamRs& from);
  void MergeFrom(const StruDsMSStreamRs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required string stream_id = 2;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  inline const ::std::string& stream_id() const;
  inline void set_stream_id(const ::std::string& value);
  inline void set_stream_id(const char* value);
  inline void set_stream_id(const char* value, size_t size);
  inline ::std::string* mutable_stream_id();
  inline ::std::string* release_stream_id();
  
  // required int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsMSStreamRs)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stream_id_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsMSStreamRs* default_instance_;
};
// -------------------------------------------------------------------

class StruDsMSQueryStreamRq : public ::google::protobuf::Message {
 public:
  StruDsMSQueryStreamRq();
  virtual ~StruDsMSQueryStreamRq();
  
  StruDsMSQueryStreamRq(const StruDsMSQueryStreamRq& from);
  
  inline StruDsMSQueryStreamRq& operator=(const StruDsMSQueryStreamRq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsMSQueryStreamRq& default_instance();
  
  void Swap(StruDsMSQueryStreamRq* other);
  
  // implements Message ----------------------------------------------
  
  StruDsMSQueryStreamRq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsMSQueryStreamRq& from);
  void MergeFrom(const StruDsMSQueryStreamRq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required string stream_id = 2;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  inline const ::std::string& stream_id() const;
  inline void set_stream_id(const ::std::string& value);
  inline void set_stream_id(const char* value);
  inline void set_stream_id(const char* value, size_t size);
  inline ::std::string* mutable_stream_id();
  inline ::std::string* release_stream_id();
  
  // @@protoc_insertion_point(class_scope:StruDsMSQueryStreamRq)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stream_id_;
  ::google::protobuf::int32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsMSQueryStreamRq* default_instance_;
};
// -------------------------------------------------------------------

class StruDsMSQueryStreamRs : public ::google::protobuf::Message {
 public:
  StruDsMSQueryStreamRs();
  virtual ~StruDsMSQueryStreamRs();
  
  StruDsMSQueryStreamRs(const StruDsMSQueryStreamRs& from);
  
  inline StruDsMSQueryStreamRs& operator=(const StruDsMSQueryStreamRs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsMSQueryStreamRs& default_instance();
  
  void Swap(StruDsMSQueryStreamRs* other);
  
  // implements Message ----------------------------------------------
  
  StruDsMSQueryStreamRs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsMSQueryStreamRs& from);
  void MergeFrom(const StruDsMSQueryStreamRs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required string stream_id = 3;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 3;
  inline const ::std::string& stream_id() const;
  inline void set_stream_id(const ::std::string& value);
  inline void set_stream_id(const char* value);
  inline void set_stream_id(const char* value, size_t size);
  inline ::std::string* mutable_stream_id();
  inline ::std::string* release_stream_id();
  
  // required string src_stream_url = 4;
  inline bool has_src_stream_url() const;
  inline void clear_src_stream_url();
  static const int kSrcStreamUrlFieldNumber = 4;
  inline const ::std::string& src_stream_url() const;
  inline void set_src_stream_url(const ::std::string& value);
  inline void set_src_stream_url(const char* value);
  inline void set_src_stream_url(const char* value, size_t size);
  inline ::std::string* mutable_src_stream_url();
  inline ::std::string* release_src_stream_url();
  
  // required int32 stream_server_id = 5;
  inline bool has_stream_server_id() const;
  inline void clear_stream_server_id();
  static const int kStreamServerIdFieldNumber = 5;
  inline ::google::protobuf::int32 stream_server_id() const;
  inline void set_stream_server_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsMSQueryStreamRs)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_src_stream_url();
  inline void clear_has_src_stream_url();
  inline void set_has_stream_server_id();
  inline void clear_has_stream_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 result_;
  ::std::string* stream_id_;
  ::std::string* src_stream_url_;
  ::google::protobuf::int32 stream_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsMSQueryStreamRs* default_instance_;
};
// -------------------------------------------------------------------

class StruDsServerInfo : public ::google::protobuf::Message {
 public:
  StruDsServerInfo();
  virtual ~StruDsServerInfo();
  
  StruDsServerInfo(const StruDsServerInfo& from);
  
  inline StruDsServerInfo& operator=(const StruDsServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruDsServerInfo& default_instance();
  
  void Swap(StruDsServerInfo* other);
  
  // implements Message ----------------------------------------------
  
  StruDsServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruDsServerInfo& from);
  void MergeFrom(const StruDsServerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StruDsServerInfo_ServerInfoType ServerInfoType;
  static const ServerInfoType SERVER_INFO_TYPE_ADD = StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_ADD;
  static const ServerInfoType SERVER_INFO_TYPE_DEL = StruDsServerInfo_ServerInfoType_SERVER_INFO_TYPE_DEL;
  static inline bool ServerInfoType_IsValid(int value) {
    return StruDsServerInfo_ServerInfoType_IsValid(value);
  }
  static const ServerInfoType ServerInfoType_MIN =
    StruDsServerInfo_ServerInfoType_ServerInfoType_MIN;
  static const ServerInfoType ServerInfoType_MAX =
    StruDsServerInfo_ServerInfoType_ServerInfoType_MAX;
  static const int ServerInfoType_ARRAYSIZE =
    StruDsServerInfo_ServerInfoType_ServerInfoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerInfoType_descriptor() {
    return StruDsServerInfo_ServerInfoType_descriptor();
  }
  static inline const ::std::string& ServerInfoType_Name(ServerInfoType value) {
    return StruDsServerInfo_ServerInfoType_Name(value);
  }
  static inline bool ServerInfoType_Parse(const ::std::string& name,
      ServerInfoType* value) {
    return StruDsServerInfo_ServerInfoType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required .StruDsServerInfo.ServerInfoType server_info_type = 2;
  inline bool has_server_info_type() const;
  inline void clear_server_info_type();
  static const int kServerInfoTypeFieldNumber = 2;
  inline ::StruDsServerInfo_ServerInfoType server_info_type() const;
  inline void set_server_info_type(::StruDsServerInfo_ServerInfoType value);
  
  // required string server_ip = 3;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // required int32 server_detect_port = 4;
  inline bool has_server_detect_port() const;
  inline void clear_server_detect_port();
  static const int kServerDetectPortFieldNumber = 4;
  inline ::google::protobuf::int32 server_detect_port() const;
  inline void set_server_detect_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruDsServerInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_info_type();
  inline void clear_has_server_info_type();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_detect_port();
  inline void clear_has_server_detect_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 server_id_;
  int server_info_type_;
  ::std::string* server_ip_;
  ::google::protobuf::int32 server_detect_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruDsServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class StruServerDetctInfo : public ::google::protobuf::Message {
 public:
  StruServerDetctInfo();
  virtual ~StruServerDetctInfo();
  
  StruServerDetctInfo(const StruServerDetctInfo& from);
  
  inline StruServerDetctInfo& operator=(const StruServerDetctInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruServerDetctInfo& default_instance();
  
  void Swap(StruServerDetctInfo* other);
  
  // implements Message ----------------------------------------------
  
  StruServerDetctInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruServerDetctInfo& from);
  void MergeFrom(const StruServerDetctInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 src_server_id = 1;
  inline bool has_src_server_id() const;
  inline void clear_src_server_id();
  static const int kSrcServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 src_server_id() const;
  inline void set_src_server_id(::google::protobuf::int32 value);
  
  // required int32 dst_server_id = 2;
  inline bool has_dst_server_id() const;
  inline void clear_dst_server_id();
  static const int kDstServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 dst_server_id() const;
  inline void set_dst_server_id(::google::protobuf::int32 value);
  
  // required int32 pkt_index = 3;
  inline bool has_pkt_index() const;
  inline void clear_pkt_index();
  static const int kPktIndexFieldNumber = 3;
  inline ::google::protobuf::int32 pkt_index() const;
  inline void set_pkt_index(::google::protobuf::int32 value);
  
  // required int32 pkt_sendtime = 4;
  inline bool has_pkt_sendtime() const;
  inline void clear_pkt_sendtime();
  static const int kPktSendtimeFieldNumber = 4;
  inline ::google::protobuf::int32 pkt_sendtime() const;
  inline void set_pkt_sendtime(::google::protobuf::int32 value);
  
  // required bytes pkt_data = 5;
  inline bool has_pkt_data() const;
  inline void clear_pkt_data();
  static const int kPktDataFieldNumber = 5;
  inline const ::std::string& pkt_data() const;
  inline void set_pkt_data(const ::std::string& value);
  inline void set_pkt_data(const char* value);
  inline void set_pkt_data(const void* value, size_t size);
  inline ::std::string* mutable_pkt_data();
  inline ::std::string* release_pkt_data();
  
  // @@protoc_insertion_point(class_scope:StruServerDetctInfo)
 private:
  inline void set_has_src_server_id();
  inline void clear_has_src_server_id();
  inline void set_has_dst_server_id();
  inline void clear_has_dst_server_id();
  inline void set_has_pkt_index();
  inline void clear_has_pkt_index();
  inline void set_has_pkt_sendtime();
  inline void clear_has_pkt_sendtime();
  inline void set_has_pkt_data();
  inline void clear_has_pkt_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 src_server_id_;
  ::google::protobuf::int32 dst_server_id_;
  ::google::protobuf::int32 pkt_index_;
  ::google::protobuf::int32 pkt_sendtime_;
  ::std::string* pkt_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruServerDetctInfo* default_instance_;
};
// -------------------------------------------------------------------

class StruServerDetctResult : public ::google::protobuf::Message {
 public:
  StruServerDetctResult();
  virtual ~StruServerDetctResult();
  
  StruServerDetctResult(const StruServerDetctResult& from);
  
  inline StruServerDetctResult& operator=(const StruServerDetctResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruServerDetctResult& default_instance();
  
  void Swap(StruServerDetctResult* other);
  
  // implements Message ----------------------------------------------
  
  StruServerDetctResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruServerDetctResult& from);
  void MergeFrom(const StruServerDetctResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 src_server_id = 1;
  inline bool has_src_server_id() const;
  inline void clear_src_server_id();
  static const int kSrcServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 src_server_id() const;
  inline void set_src_server_id(::google::protobuf::int32 value);
  
  // required int32 dst_server_id = 2;
  inline bool has_dst_server_id() const;
  inline void clear_dst_server_id();
  static const int kDstServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 dst_server_id() const;
  inline void set_dst_server_id(::google::protobuf::int32 value);
  
  // required int32 lost = 3;
  inline bool has_lost() const;
  inline void clear_lost();
  static const int kLostFieldNumber = 3;
  inline ::google::protobuf::int32 lost() const;
  inline void set_lost(::google::protobuf::int32 value);
  
  // required int32 delay = 4;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 4;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruServerDetctResult)
 private:
  inline void set_has_src_server_id();
  inline void clear_has_src_server_id();
  inline void set_has_dst_server_id();
  inline void clear_has_dst_server_id();
  inline void set_has_lost();
  inline void clear_has_lost();
  inline void set_has_delay();
  inline void clear_has_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 src_server_id_;
  ::google::protobuf::int32 dst_server_id_;
  ::google::protobuf::int32 lost_;
  ::google::protobuf::int32 delay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_5fserver_2eproto();
  friend void protobuf_AssignDesc_ds_5fserver_2eproto();
  friend void protobuf_ShutdownFile_ds_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StruServerDetctResult* default_instance_;
};
// ===================================================================


// ===================================================================

// StruDsServerConnectRq

// required int32 server_id = 1;
inline bool StruDsServerConnectRq::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsServerConnectRq::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsServerConnectRq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsServerConnectRq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsServerConnectRq::server_id() const {
  return server_id_;
}
inline void StruDsServerConnectRq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string server_ip = 2;
inline bool StruDsServerConnectRq::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsServerConnectRq::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsServerConnectRq::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsServerConnectRq::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& StruDsServerConnectRq::server_ip() const {
  return *server_ip_;
}
inline void StruDsServerConnectRq::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsServerConnectRq::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsServerConnectRq::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsServerConnectRq::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* StruDsServerConnectRq::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 server_port = 3;
inline bool StruDsServerConnectRq::has_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsServerConnectRq::set_has_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsServerConnectRq::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsServerConnectRq::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 StruDsServerConnectRq::server_port() const {
  return server_port_;
}
inline void StruDsServerConnectRq::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
}

// required .ServerType server_type = 4;
inline bool StruDsServerConnectRq::has_server_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruDsServerConnectRq::set_has_server_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruDsServerConnectRq::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruDsServerConnectRq::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ServerType StruDsServerConnectRq::server_type() const {
  return static_cast< ServerType >(server_type_);
}
inline void StruDsServerConnectRq::set_server_type(ServerType value) {
  GOOGLE_DCHECK(ServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// required .StruDsServerConnectRq.ConnectType connect_type = 5;
inline bool StruDsServerConnectRq::has_connect_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruDsServerConnectRq::set_has_connect_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruDsServerConnectRq::clear_has_connect_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruDsServerConnectRq::clear_connect_type() {
  connect_type_ = 0;
  clear_has_connect_type();
}
inline ::StruDsServerConnectRq_ConnectType StruDsServerConnectRq::connect_type() const {
  return static_cast< ::StruDsServerConnectRq_ConnectType >(connect_type_);
}
inline void StruDsServerConnectRq::set_connect_type(::StruDsServerConnectRq_ConnectType value) {
  GOOGLE_DCHECK(::StruDsServerConnectRq_ConnectType_IsValid(value));
  set_has_connect_type();
  connect_type_ = value;
}

// optional int32 server_detect_port = 6;
inline bool StruDsServerConnectRq::has_server_detect_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruDsServerConnectRq::set_has_server_detect_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruDsServerConnectRq::clear_has_server_detect_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruDsServerConnectRq::clear_server_detect_port() {
  server_detect_port_ = 0;
  clear_has_server_detect_port();
}
inline ::google::protobuf::int32 StruDsServerConnectRq::server_detect_port() const {
  return server_detect_port_;
}
inline void StruDsServerConnectRq::set_server_detect_port(::google::protobuf::int32 value) {
  set_has_server_detect_port();
  server_detect_port_ = value;
}

// -------------------------------------------------------------------

// StruDsServerConnectRs

// required int32 server_id = 1;
inline bool StruDsServerConnectRs::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsServerConnectRs::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsServerConnectRs::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsServerConnectRs::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsServerConnectRs::server_id() const {
  return server_id_;
}
inline void StruDsServerConnectRs::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 result = 2;
inline bool StruDsServerConnectRs::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsServerConnectRs::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsServerConnectRs::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsServerConnectRs::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruDsServerConnectRs::result() const {
  return result_;
}
inline void StruDsServerConnectRs::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruDsServerReportCurrentUserCount

// required int32 server_id = 1;
inline bool StruDsServerReportCurrentUserCount::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsServerReportCurrentUserCount::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsServerReportCurrentUserCount::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsServerReportCurrentUserCount::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsServerReportCurrentUserCount::server_id() const {
  return server_id_;
}
inline void StruDsServerReportCurrentUserCount::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 current_user_count = 2;
inline bool StruDsServerReportCurrentUserCount::has_current_user_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsServerReportCurrentUserCount::set_has_current_user_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsServerReportCurrentUserCount::clear_has_current_user_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsServerReportCurrentUserCount::clear_current_user_count() {
  current_user_count_ = 0;
  clear_has_current_user_count();
}
inline ::google::protobuf::int32 StruDsServerReportCurrentUserCount::current_user_count() const {
  return current_user_count_;
}
inline void StruDsServerReportCurrentUserCount::set_current_user_count(::google::protobuf::int32 value) {
  set_has_current_user_count();
  current_user_count_ = value;
}

// -------------------------------------------------------------------

// StruDsServerMsg

// required int32 server_id = 1;
inline bool StruDsServerMsg::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsServerMsg::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsServerMsg::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsServerMsg::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsServerMsg::server_id() const {
  return server_id_;
}
inline void StruDsServerMsg::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 dst_server_id = 2;
inline bool StruDsServerMsg::has_dst_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsServerMsg::set_has_dst_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsServerMsg::clear_has_dst_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsServerMsg::clear_dst_server_id() {
  dst_server_id_ = 0;
  clear_has_dst_server_id();
}
inline ::google::protobuf::int32 StruDsServerMsg::dst_server_id() const {
  return dst_server_id_;
}
inline void StruDsServerMsg::set_dst_server_id(::google::protobuf::int32 value) {
  set_has_dst_server_id();
  dst_server_id_ = value;
}

// required .ServerType dst_server_type = 3;
inline bool StruDsServerMsg::has_dst_server_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsServerMsg::set_has_dst_server_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsServerMsg::clear_has_dst_server_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsServerMsg::clear_dst_server_type() {
  dst_server_type_ = 0;
  clear_has_dst_server_type();
}
inline ServerType StruDsServerMsg::dst_server_type() const {
  return static_cast< ServerType >(dst_server_type_);
}
inline void StruDsServerMsg::set_dst_server_type(ServerType value) {
  GOOGLE_DCHECK(ServerType_IsValid(value));
  set_has_dst_server_type();
  dst_server_type_ = value;
}

// required bytes msg_data = 4;
inline bool StruDsServerMsg::has_msg_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruDsServerMsg::set_has_msg_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruDsServerMsg::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruDsServerMsg::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& StruDsServerMsg::msg_data() const {
  return *msg_data_;
}
inline void StruDsServerMsg::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void StruDsServerMsg::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void StruDsServerMsg::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsServerMsg::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* StruDsServerMsg::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruDsGSGetRoomInfoRq

// required int32 server_id = 1;
inline bool StruDsGSGetRoomInfoRq::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsGSGetRoomInfoRq::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsGSGetRoomInfoRq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsGSGetRoomInfoRq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRq::server_id() const {
  return server_id_;
}
inline void StruDsGSGetRoomInfoRq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 room_id = 2;
inline bool StruDsGSGetRoomInfoRq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsGSGetRoomInfoRq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsGSGetRoomInfoRq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsGSGetRoomInfoRq::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRq::room_id() const {
  return room_id_;
}
inline void StruDsGSGetRoomInfoRq::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// StruDsGSGetRoomInfoRs

// required int32 server_id = 1;
inline bool StruDsGSGetRoomInfoRs::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsGSGetRoomInfoRs::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsGSGetRoomInfoRs::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsGSGetRoomInfoRs::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRs::server_id() const {
  return server_id_;
}
inline void StruDsGSGetRoomInfoRs::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 room_id = 2;
inline bool StruDsGSGetRoomInfoRs::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsGSGetRoomInfoRs::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsGSGetRoomInfoRs::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsGSGetRoomInfoRs::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRs::room_id() const {
  return room_id_;
}
inline void StruDsGSGetRoomInfoRs::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 rs_server_id = 3;
inline bool StruDsGSGetRoomInfoRs::has_rs_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsGSGetRoomInfoRs::set_has_rs_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsGSGetRoomInfoRs::clear_has_rs_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsGSGetRoomInfoRs::clear_rs_server_id() {
  rs_server_id_ = 0;
  clear_has_rs_server_id();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRs::rs_server_id() const {
  return rs_server_id_;
}
inline void StruDsGSGetRoomInfoRs::set_rs_server_id(::google::protobuf::int32 value) {
  set_has_rs_server_id();
  rs_server_id_ = value;
}

// required string server_ip = 4;
inline bool StruDsGSGetRoomInfoRs::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruDsGSGetRoomInfoRs::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruDsGSGetRoomInfoRs::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruDsGSGetRoomInfoRs::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& StruDsGSGetRoomInfoRs::server_ip() const {
  return *server_ip_;
}
inline void StruDsGSGetRoomInfoRs::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsGSGetRoomInfoRs::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsGSGetRoomInfoRs::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsGSGetRoomInfoRs::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* StruDsGSGetRoomInfoRs::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 server_port = 5;
inline bool StruDsGSGetRoomInfoRs::has_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruDsGSGetRoomInfoRs::set_has_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruDsGSGetRoomInfoRs::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruDsGSGetRoomInfoRs::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 StruDsGSGetRoomInfoRs::server_port() const {
  return server_port_;
}
inline void StruDsGSGetRoomInfoRs::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
}

// -------------------------------------------------------------------

// StruDsRSGetCsInfoRq

// required int32 server_id = 1;
inline bool StruDsRSGetCsInfoRq::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsRSGetCsInfoRq::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsRSGetCsInfoRq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsRSGetCsInfoRq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsRSGetCsInfoRq::server_id() const {
  return server_id_;
}
inline void StruDsRSGetCsInfoRq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// SStruDsRSGetCsInfoRs

// required int32 server_id = 1;
inline bool SStruDsRSGetCsInfoRs::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SStruDsRSGetCsInfoRs::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SStruDsRSGetCsInfoRs::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SStruDsRSGetCsInfoRs::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SStruDsRSGetCsInfoRs::server_id() const {
  return server_id_;
}
inline void SStruDsRSGetCsInfoRs::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 cs_server_id = 2;
inline bool SStruDsRSGetCsInfoRs::has_cs_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SStruDsRSGetCsInfoRs::set_has_cs_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SStruDsRSGetCsInfoRs::clear_has_cs_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SStruDsRSGetCsInfoRs::clear_cs_server_id() {
  cs_server_id_ = 0;
  clear_has_cs_server_id();
}
inline ::google::protobuf::int32 SStruDsRSGetCsInfoRs::cs_server_id() const {
  return cs_server_id_;
}
inline void SStruDsRSGetCsInfoRs::set_cs_server_id(::google::protobuf::int32 value) {
  set_has_cs_server_id();
  cs_server_id_ = value;
}

// required string server_ip = 3;
inline bool SStruDsRSGetCsInfoRs::has_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SStruDsRSGetCsInfoRs::set_has_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SStruDsRSGetCsInfoRs::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SStruDsRSGetCsInfoRs::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& SStruDsRSGetCsInfoRs::server_ip() const {
  return *server_ip_;
}
inline void SStruDsRSGetCsInfoRs::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SStruDsRSGetCsInfoRs::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SStruDsRSGetCsInfoRs::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SStruDsRSGetCsInfoRs::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* SStruDsRSGetCsInfoRs::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 server_port = 4;
inline bool SStruDsRSGetCsInfoRs::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SStruDsRSGetCsInfoRs::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SStruDsRSGetCsInfoRs::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SStruDsRSGetCsInfoRs::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 SStruDsRSGetCsInfoRs::server_port() const {
  return server_port_;
}
inline void SStruDsRSGetCsInfoRs::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
}

// -------------------------------------------------------------------

// StruDsMSStreamRq

// required int32 server_id = 1;
inline bool StruDsMSStreamRq::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsMSStreamRq::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsMSStreamRq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsMSStreamRq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsMSStreamRq::server_id() const {
  return server_id_;
}
inline void StruDsMSStreamRq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string stream_id = 2;
inline bool StruDsMSStreamRq::has_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsMSStreamRq::set_has_stream_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsMSStreamRq::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsMSStreamRq::clear_stream_id() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    stream_id_->clear();
  }
  clear_has_stream_id();
}
inline const ::std::string& StruDsMSStreamRq::stream_id() const {
  return *stream_id_;
}
inline void StruDsMSStreamRq::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSStreamRq::set_stream_id(const char* value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSStreamRq::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsMSStreamRq::mutable_stream_id() {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  return stream_id_;
}
inline ::std::string* StruDsMSStreamRq::release_stream_id() {
  clear_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_id_;
    stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .StruDsMSStreamRq.StreamType stream_type = 3;
inline bool StruDsMSStreamRq::has_stream_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsMSStreamRq::set_has_stream_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsMSStreamRq::clear_has_stream_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsMSStreamRq::clear_stream_type() {
  stream_type_ = 0;
  clear_has_stream_type();
}
inline ::StruDsMSStreamRq_StreamType StruDsMSStreamRq::stream_type() const {
  return static_cast< ::StruDsMSStreamRq_StreamType >(stream_type_);
}
inline void StruDsMSStreamRq::set_stream_type(::StruDsMSStreamRq_StreamType value) {
  GOOGLE_DCHECK(::StruDsMSStreamRq_StreamType_IsValid(value));
  set_has_stream_type();
  stream_type_ = value;
}

// -------------------------------------------------------------------

// StruDsMSStreamRs

// required int32 server_id = 1;
inline bool StruDsMSStreamRs::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsMSStreamRs::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsMSStreamRs::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsMSStreamRs::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsMSStreamRs::server_id() const {
  return server_id_;
}
inline void StruDsMSStreamRs::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string stream_id = 2;
inline bool StruDsMSStreamRs::has_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsMSStreamRs::set_has_stream_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsMSStreamRs::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsMSStreamRs::clear_stream_id() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    stream_id_->clear();
  }
  clear_has_stream_id();
}
inline const ::std::string& StruDsMSStreamRs::stream_id() const {
  return *stream_id_;
}
inline void StruDsMSStreamRs::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSStreamRs::set_stream_id(const char* value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSStreamRs::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsMSStreamRs::mutable_stream_id() {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  return stream_id_;
}
inline ::std::string* StruDsMSStreamRs::release_stream_id() {
  clear_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_id_;
    stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 result = 3;
inline bool StruDsMSStreamRs::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsMSStreamRs::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsMSStreamRs::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsMSStreamRs::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruDsMSStreamRs::result() const {
  return result_;
}
inline void StruDsMSStreamRs::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruDsMSQueryStreamRq

// required int32 server_id = 1;
inline bool StruDsMSQueryStreamRq::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsMSQueryStreamRq::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsMSQueryStreamRq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsMSQueryStreamRq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsMSQueryStreamRq::server_id() const {
  return server_id_;
}
inline void StruDsMSQueryStreamRq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string stream_id = 2;
inline bool StruDsMSQueryStreamRq::has_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsMSQueryStreamRq::set_has_stream_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsMSQueryStreamRq::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsMSQueryStreamRq::clear_stream_id() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    stream_id_->clear();
  }
  clear_has_stream_id();
}
inline const ::std::string& StruDsMSQueryStreamRq::stream_id() const {
  return *stream_id_;
}
inline void StruDsMSQueryStreamRq::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSQueryStreamRq::set_stream_id(const char* value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSQueryStreamRq::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsMSQueryStreamRq::mutable_stream_id() {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  return stream_id_;
}
inline ::std::string* StruDsMSQueryStreamRq::release_stream_id() {
  clear_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_id_;
    stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruDsMSQueryStreamRs

// required int32 server_id = 1;
inline bool StruDsMSQueryStreamRs::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsMSQueryStreamRs::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsMSQueryStreamRs::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsMSQueryStreamRs::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsMSQueryStreamRs::server_id() const {
  return server_id_;
}
inline void StruDsMSQueryStreamRs::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 result = 2;
inline bool StruDsMSQueryStreamRs::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsMSQueryStreamRs::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsMSQueryStreamRs::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsMSQueryStreamRs::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruDsMSQueryStreamRs::result() const {
  return result_;
}
inline void StruDsMSQueryStreamRs::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string stream_id = 3;
inline bool StruDsMSQueryStreamRs::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsMSQueryStreamRs::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsMSQueryStreamRs::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsMSQueryStreamRs::clear_stream_id() {
  if (stream_id_ != &::google::protobuf::internal::kEmptyString) {
    stream_id_->clear();
  }
  clear_has_stream_id();
}
inline const ::std::string& StruDsMSQueryStreamRs::stream_id() const {
  return *stream_id_;
}
inline void StruDsMSQueryStreamRs::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSQueryStreamRs::set_stream_id(const char* value) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(value);
}
inline void StruDsMSQueryStreamRs::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  stream_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsMSQueryStreamRs::mutable_stream_id() {
  set_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    stream_id_ = new ::std::string;
  }
  return stream_id_;
}
inline ::std::string* StruDsMSQueryStreamRs::release_stream_id() {
  clear_has_stream_id();
  if (stream_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_id_;
    stream_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string src_stream_url = 4;
inline bool StruDsMSQueryStreamRs::has_src_stream_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruDsMSQueryStreamRs::set_has_src_stream_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruDsMSQueryStreamRs::clear_has_src_stream_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruDsMSQueryStreamRs::clear_src_stream_url() {
  if (src_stream_url_ != &::google::protobuf::internal::kEmptyString) {
    src_stream_url_->clear();
  }
  clear_has_src_stream_url();
}
inline const ::std::string& StruDsMSQueryStreamRs::src_stream_url() const {
  return *src_stream_url_;
}
inline void StruDsMSQueryStreamRs::set_src_stream_url(const ::std::string& value) {
  set_has_src_stream_url();
  if (src_stream_url_ == &::google::protobuf::internal::kEmptyString) {
    src_stream_url_ = new ::std::string;
  }
  src_stream_url_->assign(value);
}
inline void StruDsMSQueryStreamRs::set_src_stream_url(const char* value) {
  set_has_src_stream_url();
  if (src_stream_url_ == &::google::protobuf::internal::kEmptyString) {
    src_stream_url_ = new ::std::string;
  }
  src_stream_url_->assign(value);
}
inline void StruDsMSQueryStreamRs::set_src_stream_url(const char* value, size_t size) {
  set_has_src_stream_url();
  if (src_stream_url_ == &::google::protobuf::internal::kEmptyString) {
    src_stream_url_ = new ::std::string;
  }
  src_stream_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsMSQueryStreamRs::mutable_src_stream_url() {
  set_has_src_stream_url();
  if (src_stream_url_ == &::google::protobuf::internal::kEmptyString) {
    src_stream_url_ = new ::std::string;
  }
  return src_stream_url_;
}
inline ::std::string* StruDsMSQueryStreamRs::release_src_stream_url() {
  clear_has_src_stream_url();
  if (src_stream_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_stream_url_;
    src_stream_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 stream_server_id = 5;
inline bool StruDsMSQueryStreamRs::has_stream_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruDsMSQueryStreamRs::set_has_stream_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruDsMSQueryStreamRs::clear_has_stream_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruDsMSQueryStreamRs::clear_stream_server_id() {
  stream_server_id_ = 0;
  clear_has_stream_server_id();
}
inline ::google::protobuf::int32 StruDsMSQueryStreamRs::stream_server_id() const {
  return stream_server_id_;
}
inline void StruDsMSQueryStreamRs::set_stream_server_id(::google::protobuf::int32 value) {
  set_has_stream_server_id();
  stream_server_id_ = value;
}

// -------------------------------------------------------------------

// StruDsServerInfo

// required int32 server_id = 1;
inline bool StruDsServerInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruDsServerInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruDsServerInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruDsServerInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 StruDsServerInfo::server_id() const {
  return server_id_;
}
inline void StruDsServerInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required .StruDsServerInfo.ServerInfoType server_info_type = 2;
inline bool StruDsServerInfo::has_server_info_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruDsServerInfo::set_has_server_info_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruDsServerInfo::clear_has_server_info_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruDsServerInfo::clear_server_info_type() {
  server_info_type_ = 0;
  clear_has_server_info_type();
}
inline ::StruDsServerInfo_ServerInfoType StruDsServerInfo::server_info_type() const {
  return static_cast< ::StruDsServerInfo_ServerInfoType >(server_info_type_);
}
inline void StruDsServerInfo::set_server_info_type(::StruDsServerInfo_ServerInfoType value) {
  GOOGLE_DCHECK(::StruDsServerInfo_ServerInfoType_IsValid(value));
  set_has_server_info_type();
  server_info_type_ = value;
}

// required string server_ip = 3;
inline bool StruDsServerInfo::has_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruDsServerInfo::set_has_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruDsServerInfo::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruDsServerInfo::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& StruDsServerInfo::server_ip() const {
  return *server_ip_;
}
inline void StruDsServerInfo::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsServerInfo::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void StruDsServerInfo::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruDsServerInfo::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* StruDsServerInfo::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 server_detect_port = 4;
inline bool StruDsServerInfo::has_server_detect_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruDsServerInfo::set_has_server_detect_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruDsServerInfo::clear_has_server_detect_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruDsServerInfo::clear_server_detect_port() {
  server_detect_port_ = 0;
  clear_has_server_detect_port();
}
inline ::google::protobuf::int32 StruDsServerInfo::server_detect_port() const {
  return server_detect_port_;
}
inline void StruDsServerInfo::set_server_detect_port(::google::protobuf::int32 value) {
  set_has_server_detect_port();
  server_detect_port_ = value;
}

// -------------------------------------------------------------------

// StruServerDetctInfo

// required int32 src_server_id = 1;
inline bool StruServerDetctInfo::has_src_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruServerDetctInfo::set_has_src_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruServerDetctInfo::clear_has_src_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruServerDetctInfo::clear_src_server_id() {
  src_server_id_ = 0;
  clear_has_src_server_id();
}
inline ::google::protobuf::int32 StruServerDetctInfo::src_server_id() const {
  return src_server_id_;
}
inline void StruServerDetctInfo::set_src_server_id(::google::protobuf::int32 value) {
  set_has_src_server_id();
  src_server_id_ = value;
}

// required int32 dst_server_id = 2;
inline bool StruServerDetctInfo::has_dst_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruServerDetctInfo::set_has_dst_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruServerDetctInfo::clear_has_dst_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruServerDetctInfo::clear_dst_server_id() {
  dst_server_id_ = 0;
  clear_has_dst_server_id();
}
inline ::google::protobuf::int32 StruServerDetctInfo::dst_server_id() const {
  return dst_server_id_;
}
inline void StruServerDetctInfo::set_dst_server_id(::google::protobuf::int32 value) {
  set_has_dst_server_id();
  dst_server_id_ = value;
}

// required int32 pkt_index = 3;
inline bool StruServerDetctInfo::has_pkt_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruServerDetctInfo::set_has_pkt_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruServerDetctInfo::clear_has_pkt_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruServerDetctInfo::clear_pkt_index() {
  pkt_index_ = 0;
  clear_has_pkt_index();
}
inline ::google::protobuf::int32 StruServerDetctInfo::pkt_index() const {
  return pkt_index_;
}
inline void StruServerDetctInfo::set_pkt_index(::google::protobuf::int32 value) {
  set_has_pkt_index();
  pkt_index_ = value;
}

// required int32 pkt_sendtime = 4;
inline bool StruServerDetctInfo::has_pkt_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruServerDetctInfo::set_has_pkt_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruServerDetctInfo::clear_has_pkt_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruServerDetctInfo::clear_pkt_sendtime() {
  pkt_sendtime_ = 0;
  clear_has_pkt_sendtime();
}
inline ::google::protobuf::int32 StruServerDetctInfo::pkt_sendtime() const {
  return pkt_sendtime_;
}
inline void StruServerDetctInfo::set_pkt_sendtime(::google::protobuf::int32 value) {
  set_has_pkt_sendtime();
  pkt_sendtime_ = value;
}

// required bytes pkt_data = 5;
inline bool StruServerDetctInfo::has_pkt_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruServerDetctInfo::set_has_pkt_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruServerDetctInfo::clear_has_pkt_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruServerDetctInfo::clear_pkt_data() {
  if (pkt_data_ != &::google::protobuf::internal::kEmptyString) {
    pkt_data_->clear();
  }
  clear_has_pkt_data();
}
inline const ::std::string& StruServerDetctInfo::pkt_data() const {
  return *pkt_data_;
}
inline void StruServerDetctInfo::set_pkt_data(const ::std::string& value) {
  set_has_pkt_data();
  if (pkt_data_ == &::google::protobuf::internal::kEmptyString) {
    pkt_data_ = new ::std::string;
  }
  pkt_data_->assign(value);
}
inline void StruServerDetctInfo::set_pkt_data(const char* value) {
  set_has_pkt_data();
  if (pkt_data_ == &::google::protobuf::internal::kEmptyString) {
    pkt_data_ = new ::std::string;
  }
  pkt_data_->assign(value);
}
inline void StruServerDetctInfo::set_pkt_data(const void* value, size_t size) {
  set_has_pkt_data();
  if (pkt_data_ == &::google::protobuf::internal::kEmptyString) {
    pkt_data_ = new ::std::string;
  }
  pkt_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruServerDetctInfo::mutable_pkt_data() {
  set_has_pkt_data();
  if (pkt_data_ == &::google::protobuf::internal::kEmptyString) {
    pkt_data_ = new ::std::string;
  }
  return pkt_data_;
}
inline ::std::string* StruServerDetctInfo::release_pkt_data() {
  clear_has_pkt_data();
  if (pkt_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pkt_data_;
    pkt_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruServerDetctResult

// required int32 src_server_id = 1;
inline bool StruServerDetctResult::has_src_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruServerDetctResult::set_has_src_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruServerDetctResult::clear_has_src_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruServerDetctResult::clear_src_server_id() {
  src_server_id_ = 0;
  clear_has_src_server_id();
}
inline ::google::protobuf::int32 StruServerDetctResult::src_server_id() const {
  return src_server_id_;
}
inline void StruServerDetctResult::set_src_server_id(::google::protobuf::int32 value) {
  set_has_src_server_id();
  src_server_id_ = value;
}

// required int32 dst_server_id = 2;
inline bool StruServerDetctResult::has_dst_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruServerDetctResult::set_has_dst_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruServerDetctResult::clear_has_dst_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruServerDetctResult::clear_dst_server_id() {
  dst_server_id_ = 0;
  clear_has_dst_server_id();
}
inline ::google::protobuf::int32 StruServerDetctResult::dst_server_id() const {
  return dst_server_id_;
}
inline void StruServerDetctResult::set_dst_server_id(::google::protobuf::int32 value) {
  set_has_dst_server_id();
  dst_server_id_ = value;
}

// required int32 lost = 3;
inline bool StruServerDetctResult::has_lost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruServerDetctResult::set_has_lost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruServerDetctResult::clear_has_lost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruServerDetctResult::clear_lost() {
  lost_ = 0;
  clear_has_lost();
}
inline ::google::protobuf::int32 StruServerDetctResult::lost() const {
  return lost_;
}
inline void StruServerDetctResult::set_lost(::google::protobuf::int32 value) {
  set_has_lost();
  lost_ = value;
}

// required int32 delay = 4;
inline bool StruServerDetctResult::has_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruServerDetctResult::set_has_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruServerDetctResult::clear_has_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruServerDetctResult::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 StruServerDetctResult::delay() const {
  return delay_;
}
inline void StruServerDetctResult::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StruDsServerConnectRq_ConnectType>() {
  return ::StruDsServerConnectRq_ConnectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StruDsMSStreamRq_StreamType>() {
  return ::StruDsMSStreamRq_StreamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StruDsServerInfo_ServerInfoType>() {
  return ::StruDsServerInfo_ServerInfoType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< CytPacketType>() {
  return CytPacketType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ServerType>() {
  return ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ds_5fserver_2eproto__INCLUDED
