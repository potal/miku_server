!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AcceptAction	gate_server.cpp	/^void GateServer::AcceptAction(int sock,short event_flag,void *action_class)$/;"	f	class:GateServer	signature:(int sock,short event_flag,void *action_class)
AcceptAction	gate_server.h	/^	static void AcceptAction(int sock,short event_flag,void *action_class);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *action_class)
AddRoom	room_manager.cpp	/^bool RoomManager::AddRoom(long room_id,ChatRoom *chat_room)$/;"	f	class:RoomManager	signature:(long room_id,ChatRoom *chat_room)
AddRoom	room_manager.h	/^	bool AddRoom(long room_id,ChatRoom * chat_room);$/;"	p	class:RoomManager	access:public	signature:(long room_id,ChatRoom * chat_room)
AddUserInfo	user_list.cpp	/^bool UserInfoList::AddUserInfo(int user_id,UserInfo & user)$/;"	f	class:UserInfoList	signature:(int user_id,UserInfo & user)
AddUserInfo	user_list.h	/^	bool AddUserInfo(int user_id,UserInfo & user);$/;"	p	class:UserInfoList	access:public	signature:(int user_id,UserInfo & user)
CHAT_ROOM_H_	chat_room.h	2;"	d
CONNECTOR_H_	connector.h	2;"	d
ChatRoom	chat_room.cpp	/^ChatRoom::ChatRoom():m_sock(0),m_room_id(0),m_is_start(false)$/;"	f	class:ChatRoom	signature:()
ChatRoom	chat_room.h	/^	ChatRoom();$/;"	p	class:ChatRoom	access:public	signature:()
ChatRoom	chat_room.h	/^class ChatRoom$/;"	c
ChatRoom::ChatRoom	chat_room.cpp	/^ChatRoom::ChatRoom():m_sock(0),m_room_id(0),m_is_start(false)$/;"	f	class:ChatRoom	signature:()
ChatRoom::ChatRoom	chat_room.h	/^	ChatRoom();$/;"	p	class:ChatRoom	access:public	signature:()
ChatRoom::SetRoom	chat_room.cpp	/^bool ChatRoom::SetRoom(ChatRoom* chat_room)$/;"	f	class:ChatRoom	signature:(ChatRoom* chat_room)
ChatRoom::SetRoom	chat_room.h	/^	bool SetRoom(ChatRoom *chat_room);$/;"	p	class:ChatRoom	access:public	signature:(ChatRoom *chat_room)
ChatRoom::Start	chat_room.cpp	/^bool ChatRoom::Start()$/;"	f	class:ChatRoom	signature:()
ChatRoom::Start	chat_room.h	/^	bool Start();$/;"	p	class:ChatRoom	access:public	signature:()
ChatRoom::Stop	chat_room.cpp	/^void ChatRoom::Stop()$/;"	f	class:ChatRoom	signature:()
ChatRoom::Stop	chat_room.h	/^	void Stop();$/;"	p	class:ChatRoom	access:public	signature:()
ChatRoom::m_is_start	chat_room.h	/^	bool m_is_start;$/;"	m	class:ChatRoom	access:private
ChatRoom::m_room_event	chat_room.h	/^	struct event m_room_event;$/;"	m	class:ChatRoom	typeref:struct:ChatRoom::event	access:private
ChatRoom::m_room_id	chat_room.h	/^	long m_room_id;$/;"	m	class:ChatRoom	access:private
ChatRoom::m_sock	chat_room.h	/^	int m_sock;$/;"	m	class:ChatRoom	access:private
ChatRoom::~ChatRoom	chat_room.cpp	/^ChatRoom::~ChatRoom()$/;"	f	class:ChatRoom	signature:()
ChatRoom::~ChatRoom	chat_room.h	/^	~ChatRoom();$/;"	p	class:ChatRoom	access:public	signature:()
ConnectServer	connector.cpp	/^bool Connector::ConnectServer()$/;"	f	class:Connector	signature:()
ConnectServer	connector.h	/^	bool ConnectServer();$/;"	p	class:Connector	access:public	signature:()
Connector	connector.cpp	/^Connector::Connector()$/;"	f	class:Connector	signature:()
Connector	connector.h	/^	Connector();$/;"	p	class:Connector	access:public	signature:()
Connector	connector.h	/^class Connector$/;"	c
Connector::ConnectServer	connector.cpp	/^bool Connector::ConnectServer()$/;"	f	class:Connector	signature:()
Connector::ConnectServer	connector.h	/^	bool ConnectServer();$/;"	p	class:Connector	access:public	signature:()
Connector::Connector	connector.cpp	/^Connector::Connector()$/;"	f	class:Connector	signature:()
Connector::Connector	connector.h	/^	Connector();$/;"	p	class:Connector	access:public	signature:()
Connector::Disconnect	connector.h	/^	void Disconnect();$/;"	p	class:Connector	access:public	signature:()
Connector::InitConnectionInfo	connector.cpp	/^void Connector::InitConnectionInfo(const char *server_ip,const short server_port)$/;"	f	class:Connector	signature:(const char *server_ip,const short server_port)
Connector::InitConnectionInfo	connector.h	/^	void InitConnectionInfo(const char *server_ip,const short server_port);$/;"	p	class:Connector	access:public	signature:(const char *server_ip,const short server_port)
Connector::server_ip_	connector.h	/^	std::string server_ip_;$/;"	m	class:Connector	access:private
Connector::server_port_	connector.h	/^	short server_port_;$/;"	m	class:Connector	access:private
Connector::~Connector	connector.h	/^	virtual ~Connector() = 0;$/;"	p	class:Connector	access:public	signature:()
Connnector::Disconnect	connector.cpp	/^void Connnector::Disconnect()$/;"	f	class:Connnector	signature:()
DS_CONNECTOR_H_	ds_connector.h	2;"	d
DealWithReadData	gate_server.cpp	/^void GateServer::DealWithReadData(struct bufferevent *buffev,void *arg)$/;"	f	class:GateServer	signature:(struct bufferevent *buffev,void *arg)
DealWithReadData	gate_server.h	/^	static void DealWithReadData(struct bufferevent *buffev,void *arg);$/;"	p	class:GateServer	access:public	signature:(struct bufferevent *buffev,void *arg)
DelRoom	room_manager.cpp	/^bool RoomManager::DelRoom(long room_id)$/;"	f	class:RoomManager	signature:(long room_id)
DelRoom	room_manager.h	/^	bool DelRoom(long room_id);$/;"	p	class:RoomManager	access:public	signature:(long room_id)
DelUserInfo	user_list.cpp	/^bool UserInfoList::DelUserInfo(int user_id)$/;"	f	class:UserInfoList	signature:(int user_id)
DelUserInfo	user_list.h	/^	bool DelUserInfo(int user_id);$/;"	p	class:UserInfoList	access:public	signature:(int user_id)
DeleteAllUser	user_list.cpp	/^void UserInfoList::DeleteAllUser()$/;"	f	class:UserInfoList	signature:()
DeleteAllUser	user_list.h	/^	void DeleteAllUser();$/;"	p	class:UserInfoList	access:public	signature:()
DirectorServerConnector	ds_connector.cpp	/^DirectorServerConnector::DirectorServerConnector()$/;"	f	class:DirectorServerConnector	signature:()
DirectorServerConnector	ds_connector.h	/^	DirectorServerConnector();$/;"	p	class:DirectorServerConnector	access:public	signature:()
DirectorServerConnector	ds_connector.h	/^class DirectorServerConnector : public Connector$/;"	c	inherits:Connector
DirectorServerConnector::DirectorServerConnector	ds_connector.cpp	/^DirectorServerConnector::DirectorServerConnector()$/;"	f	class:DirectorServerConnector	signature:()
DirectorServerConnector::DirectorServerConnector	ds_connector.h	/^	DirectorServerConnector();$/;"	p	class:DirectorServerConnector	access:public	signature:()
DirectorServerConnector::~DirectorServerConnector	ds_connector.cpp	/^DirectorServerConnector::~DirectorServerConnector()$/;"	f	class:DirectorServerConnector	signature:()
DirectorServerConnector::~DirectorServerConnector	ds_connector.h	/^	~DirectorServerConnector();$/;"	p	class:DirectorServerConnector	access:public	signature:()
Disconnect	connector.cpp	/^void Connnector::Disconnect()$/;"	f	class:Connnector	signature:()
Disconnect	connector.h	/^	void Disconnect();$/;"	p	class:Connector	access:public	signature:()
ErrorRead	gate_server.cpp	/^void GateServer::ErrorRead(struct bufferevent * buffev,short event_flag,void *arg)$/;"	f	class:GateServer	signature:(struct bufferevent * buffev,short event_flag,void *arg)
ErrorRead	gate_server.h	/^	static void ErrorRead(struct bufferevent *buffev,short event_flag,void *arg);$/;"	p	class:GateServer	access:public	signature:(struct bufferevent *buffev,short event_flag,void *arg)
GATE_SERVER_H_	gate_server.h	2;"	d
GateServer	gate_server.cpp	/^GateServer::GateServer():server_port_(0),base_hash_key_(0)$/;"	f	class:GateServer	signature:()
GateServer	gate_server.h	/^	GateServer();$/;"	p	class:GateServer	access:public	signature:()
GateServer	gate_server.h	/^class GateServer$/;"	c
GateServer::AcceptAction	gate_server.cpp	/^void GateServer::AcceptAction(int sock,short event_flag,void *action_class)$/;"	f	class:GateServer	signature:(int sock,short event_flag,void *action_class)
GateServer::AcceptAction	gate_server.h	/^	static void AcceptAction(int sock,short event_flag,void *action_class);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *action_class)
GateServer::DealWithReadData	gate_server.cpp	/^void GateServer::DealWithReadData(struct bufferevent *buffev,void *arg)$/;"	f	class:GateServer	signature:(struct bufferevent *buffev,void *arg)
GateServer::DealWithReadData	gate_server.h	/^	static void DealWithReadData(struct bufferevent *buffev,void *arg);$/;"	p	class:GateServer	access:public	signature:(struct bufferevent *buffev,void *arg)
GateServer::ErrorRead	gate_server.cpp	/^void GateServer::ErrorRead(struct bufferevent * buffev,short event_flag,void *arg)$/;"	f	class:GateServer	signature:(struct bufferevent * buffev,short event_flag,void *arg)
GateServer::ErrorRead	gate_server.h	/^	static void ErrorRead(struct bufferevent *buffev,short event_flag,void *arg);$/;"	p	class:GateServer	access:public	signature:(struct bufferevent *buffev,short event_flag,void *arg)
GateServer::GateServer	gate_server.cpp	/^GateServer::GateServer():server_port_(0),base_hash_key_(0)$/;"	f	class:GateServer	signature:()
GateServer::GateServer	gate_server.h	/^	GateServer();$/;"	p	class:GateServer	access:public	signature:()
GateServer::GetUserInfoList	gate_server.h	/^	UserInfoList *GetUserInfoList(){return &user_info_list_;}$/;"	f	class:GateServer	access:public	signature:()
GateServer::InitServer	gate_server.cpp	/^bool GateServer::InitServer()$/;"	f	class:GateServer	signature:()
GateServer::InitServer	gate_server.h	/^	bool InitServer();$/;"	p	class:GateServer	access:public	signature:()
GateServer::InitWorker	gate_server.cpp	/^bool GateServer::InitWorker()$/;"	f	class:GateServer	signature:()
GateServer::InitWorker	gate_server.h	/^	bool InitWorker();$/;"	p	class:GateServer	access:public	signature:()
GateServer::OpenServerSocket	gate_server.cpp	/^bool GateServer::OpenServerSocket()$/;"	f	class:GateServer	signature:()
GateServer::OpenServerSocket	gate_server.h	/^	bool OpenServerSocket();$/;"	p	class:GateServer	access:public	signature:()
GateServer::ReadAction	gate_server.cpp	/^void GateServer::ReadAction(int sock,short event_flag,void *action_class)$/;"	f	class:GateServer	signature:(int sock,short event_flag,void *action_class)
GateServer::ReadAction	gate_server.h	/^	static void ReadAction(int sock,short event_flag,void *action_class);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *action_class)
GateServer::SafeCloseSocket	gate_server.cpp	/^void GateServer::SafeCloseSocket(int sock)$/;"	f	class:GateServer	signature:(int sock)
GateServer::SafeCloseSocket	gate_server.h	/^	void SafeCloseSocket(int sock);$/;"	p	class:GateServer	access:public	signature:(int sock)
GateServer::SetNonblock	gate_server.cpp	/^void GateServer::SetNonblock()$/;"	f	class:GateServer	signature:()
GateServer::SetNonblock	gate_server.h	/^	void SetNonblock();$/;"	p	class:GateServer	access:public	signature:()
GateServer::StartServer	gate_server.cpp	/^bool GateServer::StartServer()$/;"	f	class:GateServer	signature:()
GateServer::StartServer	gate_server.h	/^	bool StartServer();$/;"	p	class:GateServer	access:public	signature:()
GateServer::StartWorker	gate_server.cpp	/^bool GateServer::StartWorker()$/;"	f	class:GateServer	signature:()
GateServer::StartWorker	gate_server.h	/^	bool StartWorker();$/;"	p	class:GateServer	access:public	signature:()
GateServer::StopServer	gate_server.cpp	/^void GateServer::StopServer()$/;"	f	class:GateServer	signature:()
GateServer::StopServer	gate_server.h	/^	void StopServer();$/;"	p	class:GateServer	access:public	signature:()
GateServer::TestTime	gate_server.h	/^	void TestTime();$/;"	p	class:GateServer	access:public	signature:()
GateServer::TimeCallback	gate_server.h	/^	static void TimeCallback(int sock,short event_flag,void *argc);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *argc)
GateServer::WorkerThread	gate_server.cpp	/^void *GateServer::WorkerThread(void *arg)$/;"	f	class:GateServer	signature:(void *arg)
GateServer::WorkerThread	gate_server.h	/^	static void *WorkerThread(void *arg);$/;"	p	class:GateServer	access:public	signature:(void *arg)
GateServer::base_	gate_server.h	/^	struct event_base *base_;$/;"	m	class:GateServer	typeref:struct:GateServer::event_base	access:private
GateServer::base_hash_key_	gate_server.h	/^	long base_hash_key_;$/;"	m	class:GateServer	access:private
GateServer::conn_num_	gate_server.h	/^	int conn_num_;$/;"	m	class:GateServer	access:private
GateServer::count_user_	gate_server.h	/^	int count_user_;$/;"	m	class:GateServer	access:private
GateServer::count_worker_thread_	gate_server.h	/^	int count_worker_thread_;$/;"	m	class:GateServer	access:private
GateServer::file_num_	gate_server.h	/^	int file_num_;$/;"	m	class:GateServer	access:private
GateServer::listen_event_	gate_server.h	/^	struct event listen_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
GateServer::pipe_read_fd_	gate_server.h	/^	int pipe_read_fd_;$/;"	m	class:GateServer	access:private
GateServer::pipe_write_fd_	gate_server.h	/^	int pipe_write_fd_;$/;"	m	class:GateServer	access:private
GateServer::read_event_	gate_server.h	/^	struct event read_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
GateServer::room_manager_	gate_server.h	/^	RoomManager room_manager_;$/;"	m	class:GateServer	access:private
GateServer::server_ip_	gate_server.h	/^	std::string server_ip_;$/;"	m	class:GateServer	access:private
GateServer::server_listen_sock_	gate_server.h	/^	int server_listen_sock_;$/;"	m	class:GateServer	access:private
GateServer::server_port_	gate_server.h	/^	int server_port_;$/;"	m	class:GateServer	access:private
GateServer::test_time_ev_	gate_server.h	/^	struct event test_time_ev_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
GateServer::test_time_val_	gate_server.h	/^	struct timeval test_time_val_;$/;"	m	class:GateServer	typeref:struct:GateServer::timeval	access:private
GateServer::timeout_	gate_server.h	/^	int timeout_;$/;"	m	class:GateServer	access:private
GateServer::user_info_list_	gate_server.h	/^	UserInfoList user_info_list_;$/;"	m	class:GateServer	access:private
GateServer::worker_base_	gate_server.h	/^	struct event_base *worker_base_;$/;"	m	class:GateServer	typeref:struct:GateServer::event_base	access:private
GateServer::worker_event_	gate_server.h	/^	struct event worker_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
GateServer::write_event_	gate_server.h	/^	struct event write_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
GateServer::~GateServer	gate_server.cpp	/^GateServer::~GateServer()$/;"	f	class:GateServer	signature:()
GateServer::~GateServer	gate_server.h	/^	~GateServer();$/;"	p	class:GateServer	access:public	signature:()
GetUserInfo	user_list.cpp	/^UserInfo *UserInfoList::GetUserInfo(int user_id)$/;"	f	class:UserInfoList	signature:(int user_id)
GetUserInfo	user_list.h	/^	UserInfo *GetUserInfo(int user_id);$/;"	p	class:UserInfoList	access:public	signature:(int user_id)
GetUserInfoList	gate_server.h	/^	UserInfoList *GetUserInfoList(){return &user_info_list_;}$/;"	f	class:GateServer	access:public	signature:()
GetUserList	user_list.h	/^	inline USERLISTMAP * GetUserList()$/;"	f	class:UserInfoList	access:public	signature:()
Init	user_list.cpp	/^int UserInfoList::Init(int num,struct event_base * base)$/;"	f	class:UserInfoList	signature:(int num,struct event_base * base)
Init	user_list.h	/^	int Init(int num,struct event_base * base);$/;"	p	class:UserInfoList	access:public	signature:(int num,struct event_base * base)
InitConnectionInfo	connector.cpp	/^void Connector::InitConnectionInfo(const char *server_ip,const short server_port)$/;"	f	class:Connector	signature:(const char *server_ip,const short server_port)
InitConnectionInfo	connector.h	/^	void InitConnectionInfo(const char *server_ip,const short server_port);$/;"	p	class:Connector	access:public	signature:(const char *server_ip,const short server_port)
InitServer	gate_server.cpp	/^bool GateServer::InitServer()$/;"	f	class:GateServer	signature:()
InitServer	gate_server.h	/^	bool InitServer();$/;"	p	class:GateServer	access:public	signature:()
InitWorker	gate_server.cpp	/^bool GateServer::InitWorker()$/;"	f	class:GateServer	signature:()
InitWorker	gate_server.h	/^	bool InitWorker();$/;"	p	class:GateServer	access:public	signature:()
OpenServerSocket	gate_server.cpp	/^bool GateServer::OpenServerSocket()$/;"	f	class:GateServer	signature:()
OpenServerSocket	gate_server.h	/^	bool OpenServerSocket();$/;"	p	class:GateServer	access:public	signature:()
ROOM_MANAGER_H_	room_manager.h	2;"	d
RS_CONNECTOR_H_	rs_connector.h	2;"	d
ReadAction	gate_server.cpp	/^void GateServer::ReadAction(int sock,short event_flag,void *action_class)$/;"	f	class:GateServer	signature:(int sock,short event_flag,void *action_class)
ReadAction	gate_server.h	/^	static void ReadAction(int sock,short event_flag,void *action_class);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *action_class)
RoomManager	room_manager.cpp	/^RoomManager::RoomManager()$/;"	f	class:RoomManager	signature:()
RoomManager	room_manager.h	/^	RoomManager();$/;"	p	class:RoomManager	access:public	signature:()
RoomManager	room_manager.h	/^class RoomManager$/;"	c
RoomManager::AddRoom	room_manager.cpp	/^bool RoomManager::AddRoom(long room_id,ChatRoom *chat_room)$/;"	f	class:RoomManager	signature:(long room_id,ChatRoom *chat_room)
RoomManager::AddRoom	room_manager.h	/^	bool AddRoom(long room_id,ChatRoom * chat_room);$/;"	p	class:RoomManager	access:public	signature:(long room_id,ChatRoom * chat_room)
RoomManager::DelRoom	room_manager.cpp	/^bool RoomManager::DelRoom(long room_id)$/;"	f	class:RoomManager	signature:(long room_id)
RoomManager::DelRoom	room_manager.h	/^	bool DelRoom(long room_id);$/;"	p	class:RoomManager	access:public	signature:(long room_id)
RoomManager::RoomManager	room_manager.cpp	/^RoomManager::RoomManager()$/;"	f	class:RoomManager	signature:()
RoomManager::RoomManager	room_manager.h	/^	RoomManager();$/;"	p	class:RoomManager	access:public	signature:()
RoomManager::list_cond_	room_manager.h	/^	pthread_cond_t list_cond_;$/;"	m	class:RoomManager	access:private
RoomManager::list_mutex_	room_manager.h	/^	pthread_mutex_t list_mutex_;$/;"	m	class:RoomManager	access:private
RoomManager::room_list_	room_manager.h	/^	std::map<long,ChatRoom*> room_list_;$/;"	m	class:RoomManager	access:private
RoomManager::~RoomManager	room_manager.cpp	/^RoomManager::~RoomManager()$/;"	f	class:RoomManager	signature:()
RoomManager::~RoomManager	room_manager.h	/^	~RoomManager();$/;"	p	class:RoomManager	access:public	signature:()
RoomServerConnector	rs_connector.cpp	/^RoomServerConnector::RoomServerConnector()$/;"	f	class:RoomServerConnector	signature:()
RoomServerConnector	rs_connector.h	/^	RoomServerConnector();$/;"	p	class:RoomServerConnector	access:public	signature:()
RoomServerConnector	rs_connector.h	/^class RoomServerConnector : public Connector$/;"	c	inherits:Connector
RoomServerConnector::RoomServerConnector	rs_connector.cpp	/^RoomServerConnector::RoomServerConnector()$/;"	f	class:RoomServerConnector	signature:()
RoomServerConnector::RoomServerConnector	rs_connector.h	/^	RoomServerConnector();$/;"	p	class:RoomServerConnector	access:public	signature:()
RoomServerConnector::~RoomServerConnector	rs_connector.cpp	/^RoomServerConnector::~RoomServerConnector()$/;"	f	class:RoomServerConnector	signature:()
RoomServerConnector::~RoomServerConnector	rs_connector.h	/^	~RoomServerConnector();$/;"	p	class:RoomServerConnector	access:public	signature:()
SERVER_TYPES_H_	server_types.h	2;"	d
SafeCloseSocket	gate_server.cpp	/^void GateServer::SafeCloseSocket(int sock)$/;"	f	class:GateServer	signature:(int sock)
SafeCloseSocket	gate_server.h	/^	void SafeCloseSocket(int sock);$/;"	p	class:GateServer	access:public	signature:(int sock)
SetNonblock	gate_server.cpp	/^void GateServer::SetNonblock()$/;"	f	class:GateServer	signature:()
SetNonblock	gate_server.h	/^	void SetNonblock();$/;"	p	class:GateServer	access:public	signature:()
SetRoom	chat_room.cpp	/^bool ChatRoom::SetRoom(ChatRoom* chat_room)$/;"	f	class:ChatRoom	signature:(ChatRoom* chat_room)
SetRoom	chat_room.h	/^	bool SetRoom(ChatRoom *chat_room);$/;"	p	class:ChatRoom	access:public	signature:(ChatRoom *chat_room)
Start	chat_room.cpp	/^bool ChatRoom::Start()$/;"	f	class:ChatRoom	signature:()
Start	chat_room.h	/^	bool Start();$/;"	p	class:ChatRoom	access:public	signature:()
StartServer	gate_server.cpp	/^bool GateServer::StartServer()$/;"	f	class:GateServer	signature:()
StartServer	gate_server.h	/^	bool StartServer();$/;"	p	class:GateServer	access:public	signature:()
StartWorker	gate_server.cpp	/^bool GateServer::StartWorker()$/;"	f	class:GateServer	signature:()
StartWorker	gate_server.h	/^	bool StartWorker();$/;"	p	class:GateServer	access:public	signature:()
Stop	chat_room.cpp	/^void ChatRoom::Stop()$/;"	f	class:ChatRoom	signature:()
Stop	chat_room.h	/^	void Stop();$/;"	p	class:ChatRoom	access:public	signature:()
StopServer	gate_server.cpp	/^void GateServer::StopServer()$/;"	f	class:GateServer	signature:()
StopServer	gate_server.h	/^	void StopServer();$/;"	p	class:GateServer	access:public	signature:()
TestTime	gate_server.h	/^	void TestTime();$/;"	p	class:GateServer	access:public	signature:()
TimeCallback	gate_server.h	/^	static void TimeCallback(int sock,short event_flag,void *argc);$/;"	p	class:GateServer	access:public	signature:(int sock,short event_flag,void *argc)
USERLISTMAP	user_list.h	/^typedef std::map<int,UserInfo*> USERLISTMAP;$/;"	t
USER_LIST_H_	user_list.h	2;"	d
UserInfo	user_list.h	/^struct UserInfo$/;"	s
UserInfo::buffev	user_list.h	/^	struct bufferevent * buffev;$/;"	m	struct:UserInfo	typeref:struct:UserInfo::bufferevent	access:public
UserInfo::hash_key	user_list.h	/^	long hash_key;$/;"	m	struct:UserInfo	access:public
UserInfo::server_ptr	user_list.h	/^	void *server_ptr;$/;"	m	struct:UserInfo	access:public
UserInfo::user_id	user_list.h	/^	int user_id;$/;"	m	struct:UserInfo	access:public
UserInfo::user_sock	user_list.h	/^	int user_sock;$/;"	m	struct:UserInfo	access:public
UserInfoList	user_list.cpp	/^UserInfoList::UserInfoList()$/;"	f	class:UserInfoList	signature:()
UserInfoList	user_list.h	/^	UserInfoList();$/;"	p	class:UserInfoList	access:public	signature:()
UserInfoList	user_list.h	/^class UserInfoList$/;"	c
UserInfoList::AddUserInfo	user_list.cpp	/^bool UserInfoList::AddUserInfo(int user_id,UserInfo & user)$/;"	f	class:UserInfoList	signature:(int user_id,UserInfo & user)
UserInfoList::AddUserInfo	user_list.h	/^	bool AddUserInfo(int user_id,UserInfo & user);$/;"	p	class:UserInfoList	access:public	signature:(int user_id,UserInfo & user)
UserInfoList::DelUserInfo	user_list.cpp	/^bool UserInfoList::DelUserInfo(int user_id)$/;"	f	class:UserInfoList	signature:(int user_id)
UserInfoList::DelUserInfo	user_list.h	/^	bool DelUserInfo(int user_id);$/;"	p	class:UserInfoList	access:public	signature:(int user_id)
UserInfoList::DeleteAllUser	user_list.cpp	/^void UserInfoList::DeleteAllUser()$/;"	f	class:UserInfoList	signature:()
UserInfoList::DeleteAllUser	user_list.h	/^	void DeleteAllUser();$/;"	p	class:UserInfoList	access:public	signature:()
UserInfoList::GetUserInfo	user_list.cpp	/^UserInfo *UserInfoList::GetUserInfo(int user_id)$/;"	f	class:UserInfoList	signature:(int user_id)
UserInfoList::GetUserInfo	user_list.h	/^	UserInfo *GetUserInfo(int user_id);$/;"	p	class:UserInfoList	access:public	signature:(int user_id)
UserInfoList::GetUserList	user_list.h	/^	inline USERLISTMAP * GetUserList()$/;"	f	class:UserInfoList	access:public	signature:()
UserInfoList::Init	user_list.cpp	/^int UserInfoList::Init(int num,struct event_base * base)$/;"	f	class:UserInfoList	signature:(int num,struct event_base * base)
UserInfoList::Init	user_list.h	/^	int Init(int num,struct event_base * base);$/;"	p	class:UserInfoList	access:public	signature:(int num,struct event_base * base)
UserInfoList::UserInfoList	user_list.cpp	/^UserInfoList::UserInfoList()$/;"	f	class:UserInfoList	signature:()
UserInfoList::UserInfoList	user_list.h	/^	UserInfoList();$/;"	p	class:UserInfoList	access:public	signature:()
UserInfoList::list_cond_	user_list.h	/^	pthread_cond_t list_cond_;$/;"	m	class:UserInfoList	access:private
UserInfoList::list_lock_	user_list.h	/^	pthread_mutex_t list_lock_;$/;"	m	class:UserInfoList	access:private
UserInfoList::unused_user_list_	user_list.h	/^	std::list<UserInfo*> unused_user_list_;$/;"	m	class:UserInfoList	access:private
UserInfoList::user_list_	user_list.h	/^	USERLISTMAP user_list_;$/;"	m	class:UserInfoList	access:private
UserInfoList::~UserInfoList	user_list.cpp	/^UserInfoList::~UserInfoList()$/;"	f	class:UserInfoList	signature:()
UserInfoList::~UserInfoList	user_list.h	/^	~UserInfoList();$/;"	p	class:UserInfoList	access:public	signature:()
WorkerThread	gate_server.cpp	/^void *GateServer::WorkerThread(void *arg)$/;"	f	class:GateServer	signature:(void *arg)
WorkerThread	gate_server.h	/^	static void *WorkerThread(void *arg);$/;"	p	class:GateServer	access:public	signature:(void *arg)
__int64	server_types.h	/^typedef long long __int64;$/;"	t
__uint64	server_types.h	/^typedef unsigned long long __uint64;$/;"	t
base_	gate_server.h	/^	struct event_base *base_;$/;"	m	class:GateServer	typeref:struct:GateServer::event_base	access:private
base_hash_key_	gate_server.h	/^	long base_hash_key_;$/;"	m	class:GateServer	access:private
buffev	user_list.h	/^	struct bufferevent * buffev;$/;"	m	struct:UserInfo	typeref:struct:UserInfo::bufferevent	access:public
conn_num_	gate_server.h	/^	int conn_num_;$/;"	m	class:GateServer	access:private
count_user_	gate_server.h	/^	int count_user_;$/;"	m	class:GateServer	access:private
count_worker_thread_	gate_server.h	/^	int count_worker_thread_;$/;"	m	class:GateServer	access:private
file_num_	gate_server.h	/^	int file_num_;$/;"	m	class:GateServer	access:private
hash_key	user_list.h	/^	long hash_key;$/;"	m	struct:UserInfo	access:public
list_cond_	room_manager.h	/^	pthread_cond_t list_cond_;$/;"	m	class:RoomManager	access:private
list_cond_	user_list.h	/^	pthread_cond_t list_cond_;$/;"	m	class:UserInfoList	access:private
list_lock_	user_list.h	/^	pthread_mutex_t list_lock_;$/;"	m	class:UserInfoList	access:private
list_mutex_	room_manager.h	/^	pthread_mutex_t list_mutex_;$/;"	m	class:RoomManager	access:private
listen_event_	gate_server.h	/^	struct event listen_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
m_is_start	chat_room.h	/^	bool m_is_start;$/;"	m	class:ChatRoom	access:private
m_room_event	chat_room.h	/^	struct event m_room_event;$/;"	m	class:ChatRoom	typeref:struct:ChatRoom::event	access:private
m_room_id	chat_room.h	/^	long m_room_id;$/;"	m	class:ChatRoom	access:private
m_sock	chat_room.h	/^	int m_sock;$/;"	m	class:ChatRoom	access:private
main	server_main.cpp	/^int main()$/;"	f	signature:()
pipe_read_fd_	gate_server.h	/^	int pipe_read_fd_;$/;"	m	class:GateServer	access:private
pipe_write_fd_	gate_server.h	/^	int pipe_write_fd_;$/;"	m	class:GateServer	access:private
read_event_	gate_server.h	/^	struct event read_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
room_list_	room_manager.h	/^	std::map<long,ChatRoom*> room_list_;$/;"	m	class:RoomManager	access:private
room_manager_	gate_server.h	/^	RoomManager room_manager_;$/;"	m	class:GateServer	access:private
server_ip_	connector.h	/^	std::string server_ip_;$/;"	m	class:Connector	access:private
server_ip_	gate_server.h	/^	std::string server_ip_;$/;"	m	class:GateServer	access:private
server_listen_sock_	gate_server.h	/^	int server_listen_sock_;$/;"	m	class:GateServer	access:private
server_port_	connector.h	/^	short server_port_;$/;"	m	class:Connector	access:private
server_port_	gate_server.h	/^	int server_port_;$/;"	m	class:GateServer	access:private
server_ptr	user_list.h	/^	void *server_ptr;$/;"	m	struct:UserInfo	access:public
test_time_ev_	gate_server.h	/^	struct event test_time_ev_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
test_time_val_	gate_server.h	/^	struct timeval test_time_val_;$/;"	m	class:GateServer	typeref:struct:GateServer::timeval	access:private
timeout_	gate_server.h	/^	int timeout_;$/;"	m	class:GateServer	access:private
unused_user_list_	user_list.h	/^	std::list<UserInfo*> unused_user_list_;$/;"	m	class:UserInfoList	access:private
user_id	user_list.h	/^	int user_id;$/;"	m	struct:UserInfo	access:public
user_info_list_	gate_server.h	/^	UserInfoList user_info_list_;$/;"	m	class:GateServer	access:private
user_list_	user_list.h	/^	USERLISTMAP user_list_;$/;"	m	class:UserInfoList	access:private
user_sock	user_list.h	/^	int user_sock;$/;"	m	struct:UserInfo	access:public
worker_base_	gate_server.h	/^	struct event_base *worker_base_;$/;"	m	class:GateServer	typeref:struct:GateServer::event_base	access:private
worker_event_	gate_server.h	/^	struct event worker_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
write_event_	gate_server.h	/^	struct event write_event_;$/;"	m	class:GateServer	typeref:struct:GateServer::event	access:private
~ChatRoom	chat_room.cpp	/^ChatRoom::~ChatRoom()$/;"	f	class:ChatRoom	signature:()
~ChatRoom	chat_room.h	/^	~ChatRoom();$/;"	p	class:ChatRoom	access:public	signature:()
~Connector	connector.h	/^	virtual ~Connector() = 0;$/;"	p	class:Connector	access:public	signature:()
~DirectorServerConnector	ds_connector.cpp	/^DirectorServerConnector::~DirectorServerConnector()$/;"	f	class:DirectorServerConnector	signature:()
~DirectorServerConnector	ds_connector.h	/^	~DirectorServerConnector();$/;"	p	class:DirectorServerConnector	access:public	signature:()
~GateServer	gate_server.cpp	/^GateServer::~GateServer()$/;"	f	class:GateServer	signature:()
~GateServer	gate_server.h	/^	~GateServer();$/;"	p	class:GateServer	access:public	signature:()
~RoomManager	room_manager.cpp	/^RoomManager::~RoomManager()$/;"	f	class:RoomManager	signature:()
~RoomManager	room_manager.h	/^	~RoomManager();$/;"	p	class:RoomManager	access:public	signature:()
~RoomServerConnector	rs_connector.cpp	/^RoomServerConnector::~RoomServerConnector()$/;"	f	class:RoomServerConnector	signature:()
~RoomServerConnector	rs_connector.h	/^	~RoomServerConnector();$/;"	p	class:RoomServerConnector	access:public	signature:()
~UserInfoList	user_list.cpp	/^UserInfoList::~UserInfoList()$/;"	f	class:UserInfoList	signature:()
~UserInfoList	user_list.h	/^	~UserInfoList();$/;"	p	class:UserInfoList	access:public	signature:()
