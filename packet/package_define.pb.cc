// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "package_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GateRoomServerPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRoomServerPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserLoginRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserLoginRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserLoginRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserLoginRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserRoleInfoID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserRoleInfoID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruRoomInfoID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruRoomInfoID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruMicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruMicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruRoomMicInfoID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruRoomMicInfoID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserInfoListID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserInfoListID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserMsgRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserMsgRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserMsgRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserMsgRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserMsgTextID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserMsgTextID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserGiveGiftRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserGiveGiftRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserGiveGiftRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserGiveGiftRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserApplyMicRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserApplyMicRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserApplyMicRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserApplyMicRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserOnMicID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserOnMicID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserOffMicRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserOffMicRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserOffMicRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserOffMicRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserOffMicID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserOffMicID_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruPutUserOnMicRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruPutUserOnMicRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruPutUserOnMicRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruPutUserOnMicRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruCancleUserMicRQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruCancleUserMicRQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruCancleUserMicRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruCancleUserMicRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StruUserExitRoomID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StruUserExitRoomID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_package_5fdefine_2eproto() {
  protobuf_AddDesc_package_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "package_define.proto");
  GOOGLE_CHECK(file != NULL);
  GateRoomServerPack_descriptor_ = file->message_type(0);
  static const int GateRoomServerPack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, str_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, user_hashkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, gs_hashkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, data_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, str_tail_),
  };
  GateRoomServerPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRoomServerPack_descriptor_,
      GateRoomServerPack::default_instance_,
      GateRoomServerPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRoomServerPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRoomServerPack));
  StruUserLoginRQ_descriptor_ = file->message_type(1);
  static const int StruUserLoginRQ_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, user_psw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, user_account_name_),
  };
  StruUserLoginRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserLoginRQ_descriptor_,
      StruUserLoginRQ::default_instance_,
      StruUserLoginRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserLoginRQ));
  StruUserLoginRS_descriptor_ = file->message_type(2);
  static const int StruUserLoginRS_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, user_red_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, user_blue_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, buyer_riches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, buyer_grow_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, buyer_honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, buyer_estimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, seller_income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, seller_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, seller_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, seller_estimate_),
  };
  StruUserLoginRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserLoginRS_descriptor_,
      StruUserLoginRS::default_instance_,
      StruUserLoginRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserLoginRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserLoginRS));
  StruUserRoleInfoID_descriptor_ = file->message_type(3);
  static const int StruUserRoleInfoID_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, user_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, user_role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, other_data_),
  };
  StruUserRoleInfoID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserRoleInfoID_descriptor_,
      StruUserRoleInfoID::default_instance_,
      StruUserRoleInfoID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserRoleInfoID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserRoleInfoID));
  StruRoomInfoID_descriptor_ = file->message_type(4);
  static const int StruRoomInfoID_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, room_advert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, room_announce_),
  };
  StruRoomInfoID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruRoomInfoID_descriptor_,
      StruRoomInfoID::default_instance_,
      StruRoomInfoID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomInfoID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruRoomInfoID));
  StruMicInfo_descriptor_ = file->message_type(5);
  static const int StruMicInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, user_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, mic_channel_str_),
  };
  StruMicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruMicInfo_descriptor_,
      StruMicInfo::default_instance_,
      StruMicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruMicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruMicInfo));
  StruRoomMicInfoID_descriptor_ = file->message_type(6);
  static const int StruRoomMicInfoID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, mic_list_),
  };
  StruRoomMicInfoID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruRoomMicInfoID_descriptor_,
      StruRoomMicInfoID::default_instance_,
      StruRoomMicInfoID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruRoomMicInfoID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruRoomMicInfoID));
  StruUserInfo_descriptor_ = file->message_type(7);
  static const int StruUserInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, user_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, user_role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, buyer_riches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, buyer_grow_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, buyer_honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, buyer_estimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, seller_income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, seller_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, seller_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, seller_estimate_),
  };
  StruUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserInfo_descriptor_,
      StruUserInfo::default_instance_,
      StruUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserInfo));
  StruUserInfoListID_descriptor_ = file->message_type(8);
  static const int StruUserInfoListID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, user_info_list_),
  };
  StruUserInfoListID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserInfoListID_descriptor_,
      StruUserInfoListID::default_instance_,
      StruUserInfoListID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserInfoListID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserInfoListID));
  StruUserMsgRQ_descriptor_ = file->message_type(9);
  static const int StruUserMsgRQ_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, msg_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, is_private_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, dst_user_id_),
  };
  StruUserMsgRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserMsgRQ_descriptor_,
      StruUserMsgRQ::default_instance_,
      StruUserMsgRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserMsgRQ));
  StruUserMsgRS_descriptor_ = file->message_type(10);
  static const int StruUserMsgRS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, result_),
  };
  StruUserMsgRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserMsgRS_descriptor_,
      StruUserMsgRS::default_instance_,
      StruUserMsgRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserMsgRS));
  StruUserMsgTextID_descriptor_ = file->message_type(11);
  static const int StruUserMsgTextID_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, msg_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, is_private_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, dst_user_id_),
  };
  StruUserMsgTextID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserMsgTextID_descriptor_,
      StruUserMsgTextID::default_instance_,
      StruUserMsgTextID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserMsgTextID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserMsgTextID));
  StruUserGiveGiftRQ_descriptor_ = file->message_type(12);
  static const int StruUserGiveGiftRQ_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, gift_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, dst_user_id_),
  };
  StruUserGiveGiftRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserGiveGiftRQ_descriptor_,
      StruUserGiveGiftRQ::default_instance_,
      StruUserGiveGiftRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserGiveGiftRQ));
  StruUserGiveGiftRS_descriptor_ = file->message_type(13);
  static const int StruUserGiveGiftRS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, gift_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, dst_user_id_),
  };
  StruUserGiveGiftRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserGiveGiftRS_descriptor_,
      StruUserGiveGiftRS::default_instance_,
      StruUserGiveGiftRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserGiveGiftRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserGiveGiftRS));
  StruUserApplyMicRQ_descriptor_ = file->message_type(14);
  static const int StruUserApplyMicRQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRQ, room_id_),
  };
  StruUserApplyMicRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserApplyMicRQ_descriptor_,
      StruUserApplyMicRQ::default_instance_,
      StruUserApplyMicRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserApplyMicRQ));
  StruUserApplyMicRS_descriptor_ = file->message_type(15);
  static const int StruUserApplyMicRS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, mic_channel_str_),
  };
  StruUserApplyMicRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserApplyMicRS_descriptor_,
      StruUserApplyMicRS::default_instance_,
      StruUserApplyMicRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserApplyMicRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserApplyMicRS));
  StruUserOnMicID_descriptor_ = file->message_type(16);
  static const int StruUserOnMicID_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, mic_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, mic_room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, mic_user_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, mic_channel_str_),
  };
  StruUserOnMicID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserOnMicID_descriptor_,
      StruUserOnMicID::default_instance_,
      StruUserOnMicID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOnMicID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserOnMicID));
  StruUserOffMicRQ_descriptor_ = file->message_type(17);
  static const int StruUserOffMicRQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRQ, room_id_),
  };
  StruUserOffMicRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserOffMicRQ_descriptor_,
      StruUserOffMicRQ::default_instance_,
      StruUserOffMicRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserOffMicRQ));
  StruUserOffMicRS_descriptor_ = file->message_type(18);
  static const int StruUserOffMicRS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, result_),
  };
  StruUserOffMicRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserOffMicRS_descriptor_,
      StruUserOffMicRS::default_instance_,
      StruUserOffMicRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserOffMicRS));
  StruUserOffMicID_descriptor_ = file->message_type(19);
  static const int StruUserOffMicID_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, mic_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, mic_room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, mic_user_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, mic_channel_str_),
  };
  StruUserOffMicID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserOffMicID_descriptor_,
      StruUserOffMicID::default_instance_,
      StruUserOffMicID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserOffMicID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserOffMicID));
  StruPutUserOnMicRQ_descriptor_ = file->message_type(20);
  static const int StruPutUserOnMicRQ_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, dst_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, mic_type_),
  };
  StruPutUserOnMicRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruPutUserOnMicRQ_descriptor_,
      StruPutUserOnMicRQ::default_instance_,
      StruPutUserOnMicRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruPutUserOnMicRQ));
  StruPutUserOnMicRS_descriptor_ = file->message_type(21);
  static const int StruPutUserOnMicRS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, dst_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, mic_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, mic_channel_str_),
  };
  StruPutUserOnMicRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruPutUserOnMicRS_descriptor_,
      StruPutUserOnMicRS::default_instance_,
      StruPutUserOnMicRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruPutUserOnMicRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruPutUserOnMicRS));
  StruCancleUserMicRQ_descriptor_ = file->message_type(22);
  static const int StruCancleUserMicRQ_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, dst_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, mic_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, mic_channel_str_),
  };
  StruCancleUserMicRQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruCancleUserMicRQ_descriptor_,
      StruCancleUserMicRQ::default_instance_,
      StruCancleUserMicRQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruCancleUserMicRQ));
  StruCancleUserMicRS_descriptor_ = file->message_type(23);
  static const int StruCancleUserMicRS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, result_),
  };
  StruCancleUserMicRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruCancleUserMicRS_descriptor_,
      StruCancleUserMicRS::default_instance_,
      StruCancleUserMicRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruCancleUserMicRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruCancleUserMicRS));
  StruUserExitRoomID_descriptor_ = file->message_type(24);
  static const int StruUserExitRoomID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserExitRoomID, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserExitRoomID, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserExitRoomID, room_id_),
  };
  StruUserExitRoomID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StruUserExitRoomID_descriptor_,
      StruUserExitRoomID::default_instance_,
      StruUserExitRoomID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserExitRoomID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StruUserExitRoomID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StruUserExitRoomID));
  EnumMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_package_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRoomServerPack_descriptor_, &GateRoomServerPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserLoginRQ_descriptor_, &StruUserLoginRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserLoginRS_descriptor_, &StruUserLoginRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserRoleInfoID_descriptor_, &StruUserRoleInfoID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruRoomInfoID_descriptor_, &StruRoomInfoID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruMicInfo_descriptor_, &StruMicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruRoomMicInfoID_descriptor_, &StruRoomMicInfoID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserInfo_descriptor_, &StruUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserInfoListID_descriptor_, &StruUserInfoListID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserMsgRQ_descriptor_, &StruUserMsgRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserMsgRS_descriptor_, &StruUserMsgRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserMsgTextID_descriptor_, &StruUserMsgTextID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserGiveGiftRQ_descriptor_, &StruUserGiveGiftRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserGiveGiftRS_descriptor_, &StruUserGiveGiftRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserApplyMicRQ_descriptor_, &StruUserApplyMicRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserApplyMicRS_descriptor_, &StruUserApplyMicRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserOnMicID_descriptor_, &StruUserOnMicID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserOffMicRQ_descriptor_, &StruUserOffMicRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserOffMicRS_descriptor_, &StruUserOffMicRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserOffMicID_descriptor_, &StruUserOffMicID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruPutUserOnMicRQ_descriptor_, &StruPutUserOnMicRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruPutUserOnMicRS_descriptor_, &StruPutUserOnMicRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruCancleUserMicRQ_descriptor_, &StruCancleUserMicRQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruCancleUserMicRS_descriptor_, &StruCancleUserMicRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StruUserExitRoomID_descriptor_, &StruUserExitRoomID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_package_5fdefine_2eproto() {
  delete GateRoomServerPack::default_instance_;
  delete GateRoomServerPack_reflection_;
  delete StruUserLoginRQ::default_instance_;
  delete StruUserLoginRQ_reflection_;
  delete StruUserLoginRS::default_instance_;
  delete StruUserLoginRS_reflection_;
  delete StruUserRoleInfoID::default_instance_;
  delete StruUserRoleInfoID_reflection_;
  delete StruRoomInfoID::default_instance_;
  delete StruRoomInfoID_reflection_;
  delete StruMicInfo::default_instance_;
  delete StruMicInfo_reflection_;
  delete StruRoomMicInfoID::default_instance_;
  delete StruRoomMicInfoID_reflection_;
  delete StruUserInfo::default_instance_;
  delete StruUserInfo_reflection_;
  delete StruUserInfoListID::default_instance_;
  delete StruUserInfoListID_reflection_;
  delete StruUserMsgRQ::default_instance_;
  delete StruUserMsgRQ_reflection_;
  delete StruUserMsgRS::default_instance_;
  delete StruUserMsgRS_reflection_;
  delete StruUserMsgTextID::default_instance_;
  delete StruUserMsgTextID_reflection_;
  delete StruUserGiveGiftRQ::default_instance_;
  delete StruUserGiveGiftRQ_reflection_;
  delete StruUserGiveGiftRS::default_instance_;
  delete StruUserGiveGiftRS_reflection_;
  delete StruUserApplyMicRQ::default_instance_;
  delete StruUserApplyMicRQ_reflection_;
  delete StruUserApplyMicRS::default_instance_;
  delete StruUserApplyMicRS_reflection_;
  delete StruUserOnMicID::default_instance_;
  delete StruUserOnMicID_reflection_;
  delete StruUserOffMicRQ::default_instance_;
  delete StruUserOffMicRQ_reflection_;
  delete StruUserOffMicRS::default_instance_;
  delete StruUserOffMicRS_reflection_;
  delete StruUserOffMicID::default_instance_;
  delete StruUserOffMicID_reflection_;
  delete StruPutUserOnMicRQ::default_instance_;
  delete StruPutUserOnMicRQ_reflection_;
  delete StruPutUserOnMicRS::default_instance_;
  delete StruPutUserOnMicRS_reflection_;
  delete StruCancleUserMicRQ::default_instance_;
  delete StruCancleUserMicRQ_reflection_;
  delete StruCancleUserMicRS::default_instance_;
  delete StruCancleUserMicRS_reflection_;
  delete StruUserExitRoomID::default_instance_;
  delete StruUserExitRoomID_reflection_;
}

void protobuf_AddDesc_package_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024package_define.proto\"\206\001\n\022GateRoomServe"
    "rPack\022\020\n\010str_head\030\001 \002(\t\022\024\n\014user_hashkey\030"
    "\002 \002(\005\022\022\n\ngs_hashkey\030\003 \002(\005\022\020\n\010data_len\030\004 "
    "\002(\005\022\020\n\010data_msg\030\005 \002(\014\022\020\n\010str_tail\030\006 \002(\t\""
    "\215\001\n\017StruUserLoginRQ\022+\n\006msg_id\030\001 \002(\0162\n.En"
    "umMsgID:\017E_USER_LOGIN_RQ\022\017\n\007user_id\030\002 \002("
    "\005\022\017\n\007room_id\030\003 \002(\005\022\020\n\010user_psw\030\004 \002(\t\022\031\n\021"
    "user_account_name\030\005 \002(\t\"\340\002\n\017StruUserLogi"
    "nRS\022+\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\017E_USER_"
    "LOGIN_RS\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002"
    "(\005\022\016\n\006result\030\004 \002(\005\022\022\n\nuser_red_d\030\005 \002(\005\022\023"
    "\n\013user_blue_d\030\006 \002(\005\022\022\n\nuser_level\030\007 \002(\005\022"
    "\024\n\014buyer_riches\030\010 \002(\005\022\025\n\rbuyer_grow_up\030\t"
    " \002(\005\022\024\n\014buyer_honour\030\n \002(\005\022\026\n\016buyer_esti"
    "mate\030\013 \002(\005\022\025\n\rseller_income\030\014 \002(\005\022\022\n\nsel"
    "ler_exp\030\r \002(\005\022\022\n\nseller_pop\030\016 \002(\005\022\027\n\017sel"
    "ler_estimate\030\017 \002(\005\"\255\001\n\022StruUserRoleInfoI"
    "D\022/\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\023E_USER_RO"
    "LE_INFO_ID\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003"
    " \002(\005\022\031\n\021user_account_name\030\004 \002(\t\022\025\n\ruser_"
    "role_uid\030\005 \002(\t\022\022\n\nother_data\030\006 \001(\t\"\260\001\n\016S"
    "truRoomInfoID\022*\n\006msg_id\030\001 \002(\0162\n.EnumMsgI"
    "D:\016E_ROOM_INFO_ID\022\017\n\007user_id\030\002 \002(\005\022\017\n\007ro"
    "om_id\030\003 \002(\005\022\021\n\troom_type\030\004 \002(\005\022\021\n\troom_n"
    "ame\030\005 \002(\t\022\023\n\013room_advert\030\006 \002(\t\022\025\n\rroom_a"
    "nnounce\030\007 \002(\t\"z\n\013StruMicInfo\022&\n\006msg_id\030\001"
    " \002(\0162\n.EnumMsgID:\nE_MIC_INFO\022\017\n\007user_id\030"
    "\002 \002(\005\022\031\n\021user_account_name\030\003 \002(\t\022\027\n\017mic_"
    "channel_str\030\004 \002(\t\"\205\001\n\021StruRoomMicInfoID\022"
    ".\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\022E_ROOM_MIC_"
    "INFO_ID\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002("
    "\005\022\036\n\010mic_list\030\004 \003(\0132\014.StruMicInfo\"\301\002\n\014St"
    "ruUserInfo\022\'\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\013"
    "E_USER_INFO\022\017\n\007user_id\030\002 \002(\005\022\031\n\021user_acc"
    "ount_name\030\003 \002(\t\022\025\n\ruser_role_uid\030\004 \002(\t\022\022"
    "\n\nuser_level\030\005 \002(\005\022\024\n\014buyer_riches\030\006 \002(\005"
    "\022\025\n\rbuyer_grow_up\030\007 \002(\005\022\024\n\014buyer_honour\030"
    "\010 \002(\005\022\026\n\016buyer_estimate\030\t \002(\005\022\025\n\rseller_"
    "income\030\n \002(\005\022\022\n\nseller_exp\030\013 \002(\005\022\022\n\nsell"
    "er_pop\030\014 \002(\005\022\027\n\017seller_estimate\030\r \002(\005\"\216\001"
    "\n\022StruUserInfoListID\022/\n\006msg_id\030\001 \002(\0162\n.E"
    "numMsgID:\023E_USER_INFO_LIST_ID\022\017\n\007user_id"
    "\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022%\n\016user_info_lis"
    "t\030\004 \003(\0132\r.StruUserInfo\"\227\001\n\rStruUserMsgRQ"
    "\022)\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\rE_USER_MSG"
    "_RQ\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\020\n"
    "\010msg_text\030\004 \002(\t\022\022\n\nis_private\030\005 \002(\010\022\023\n\013d"
    "st_user_id\030\006 \002(\005\"l\n\rStruUserMsgRS\022)\n\006msg"
    "_id\030\001 \002(\0162\n.EnumMsgID:\rE_USER_MSG_RS\022\017\n\007"
    "user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\016\n\006result"
    "\030\004 \002(\005\"\240\001\n\021StruUserMsgTextID\022.\n\006msg_id\030\001"
    " \002(\0162\n.EnumMsgID:\022E_USER_MSG_TEXT_ID\022\017\n\007"
    "user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\020\n\010msg_te"
    "xt\030\004 \002(\t\022\022\n\nis_private\030\005 \002(\010\022\023\n\013dst_user"
    "_id\030\006 \002(\005\"\217\001\n\022StruUserGiveGiftRQ\022/\n\006msg_"
    "id\030\001 \002(\0162\n.EnumMsgID:\023E_USER_GIVE_GIFT_R"
    "Q\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\021\n\tg"
    "ift_code\030\004 \002(\t\022\023\n\013dst_user_id\030\005 \002(\005\"\237\001\n\022"
    "StruUserGiveGiftRS\022/\n\006msg_id\030\001 \002(\0162\n.Enu"
    "mMsgID:\023E_USER_GIVE_GIFT_RS\022\017\n\007user_id\030\002"
    " \002(\005\022\017\n\007room_id\030\003 \002(\005\022\016\n\006result\030\004 \002(\005\022\021\n"
    "\tgift_code\030\005 \002(\t\022\023\n\013dst_user_id\030\006 \002(\005\"g\n"
    "\022StruUserApplyMicRQ\022/\n\006msg_id\030\001 \002(\0162\n.En"
    "umMsgID:\023E_USER_APPLY_MIC_RQ\022\017\n\007user_id\030"
    "\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\"\220\001\n\022StruUserApply"
    "MicRS\022/\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\023E_USE"
    "R_APPLY_MIC_RS\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_"
    "id\030\003 \002(\005\022\016\n\006result\030\004 \002(\005\022\027\n\017mic_channel_"
    "str\030\005 \002(\t\"\241\001\n\017StruUserOnMicID\022,\n\006msg_id\030"
    "\001 \002(\0162\n.EnumMsgID:\020E_USER_ON_MIC_ID\022\023\n\013m"
    "ic_user_id\030\002 \002(\005\022\023\n\013mic_room_id\030\003 \002(\005\022\035\n"
    "\025mic_user_account_name\030\004 \002(\t\022\027\n\017mic_chan"
    "nel_str\030\005 \002(\t\"c\n\020StruUserOffMicRQ\022-\n\006msg"
    "_id\030\001 \002(\0162\n.EnumMsgID:\021E_USER_OFF_MIC_RQ"
    "\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\"s\n\020St"
    "ruUserOffMicRS\022-\n\006msg_id\030\001 \002(\0162\n.EnumMsg"
    "ID:\021E_USER_OFF_MIC_RS\022\017\n\007user_id\030\002 \002(\005\022\017"
    "\n\007room_id\030\003 \002(\005\022\016\n\006result\030\004 \002(\005\"\243\001\n\020Stru"
    "UserOffMicID\022-\n\006msg_id\030\001 \002(\0162\n.EnumMsgID"
    ":\021E_USER_OFF_MIC_ID\022\023\n\013mic_user_id\030\002 \002(\005"
    "\022\023\n\013mic_room_id\030\003 \002(\005\022\035\n\025mic_user_accoun"
    "t_name\030\004 \002(\t\022\027\n\017mic_channel_str\030\005 \002(\t\"\217\001"
    "\n\022StruPutUserOnMicRQ\0220\n\006msg_id\030\001 \002(\0162\n.E"
    "numMsgID:\024E_PUT_USER_ON_MIC_RQ\022\017\n\007user_i"
    "d\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\023\n\013dst_user_id\030"
    "\004 \002(\005\022\020\n\010mic_type\030\005 \002(\005\"\270\001\n\022StruPutUserO"
    "nMicRS\0220\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\024E_PU"
    "T_USER_ON_MIC_RS\022\017\n\007user_id\030\002 \002(\005\022\017\n\007roo"
    "m_id\030\003 \002(\005\022\023\n\013dst_user_id\030\004 \002(\005\022\020\n\010mic_t"
    "ype\030\005 \002(\005\022\016\n\006result\030\006 \002(\005\022\027\n\017mic_channel"
    "_str\030\007 \002(\t\"\251\001\n\023StruCancleUserMicRQ\0220\n\006ms"
    "g_id\030\001 \002(\0162\n.EnumMsgID:\024E_CANCLE_USER_MI"
    "C_RQ\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room_id\030\003 \002(\005\022\023"
    "\n\013dst_user_id\030\004 \002(\005\022\020\n\010mic_type\030\005 \002(\005\022\027\n"
    "\017mic_channel_str\030\006 \002(\t\"y\n\023StruCancleUser"
    "MicRS\0220\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\024E_CAN"
    "CLE_USER_MIC_RS\022\017\n\007user_id\030\002 \002(\005\022\017\n\007room"
    "_id\030\003 \002(\005\022\016\n\006result\030\004 \002(\005\"g\n\022StruUserExi"
    "tRoomID\022/\n\006msg_id\030\001 \002(\0162\n.EnumMsgID:\023E_U"
    "SER_EXIT_ROOM_ID\022\017\n\007user_id\030\002 \002(\005\022\017\n\007roo"
    "m_id\030\003 \002(\005*\336\004\n\tEnumMsgID\022\022\n\rE_MSG_ID_BAS"
    "E\020\360.\022\024\n\017E_USER_LOGIN_RQ\020\361.\022\024\n\017E_USER_LOG"
    "IN_RS\020\362.\022\030\n\023E_USER_ROLE_INFO_ID\020\363.\022\023\n\016E_"
    "ROOM_INFO_ID\020\364.\022\017\n\nE_MIC_INFO\020\365.\022\027\n\022E_RO"
    "OM_MIC_INFO_ID\020\366.\022\020\n\013E_USER_INFO\020\367.\022\030\n\023E"
    "_USER_INFO_LIST_ID\020\370.\022\022\n\rE_USER_MSG_RQ\020\371"
    ".\022\022\n\rE_USER_MSG_RS\020\372.\022\027\n\022E_USER_MSG_TEXT"
    "_ID\020\373.\022\030\n\023E_USER_GIVE_GIFT_RQ\020\374.\022\030\n\023E_US"
    "ER_GIVE_GIFT_RS\020\375.\022\030\n\023E_USER_APPLY_MIC_R"
    "Q\020\376.\022\030\n\023E_USER_APPLY_MIC_RS\020\377.\022\025\n\020E_USER"
    "_ON_MIC_ID\020\200/\022\026\n\021E_USER_OFF_MIC_RQ\020\201/\022\026\n"
    "\021E_USER_OFF_MIC_RS\020\202/\022\026\n\021E_USER_OFF_MIC_"
    "ID\020\203/\022\031\n\024E_PUT_USER_ON_MIC_RQ\020\204/\022\031\n\024E_PU"
    "T_USER_ON_MIC_RS\020\205/\022\031\n\024E_CANCLE_USER_MIC"
    "_RQ\020\206/\022\031\n\024E_CANCLE_USER_MIC_RS\020\207/\022\030\n\023E_U"
    "SER_EXIT_ROOM_ID\020\210/", 4619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "package_define.proto", &protobuf_RegisterTypes);
  GateRoomServerPack::default_instance_ = new GateRoomServerPack();
  StruUserLoginRQ::default_instance_ = new StruUserLoginRQ();
  StruUserLoginRS::default_instance_ = new StruUserLoginRS();
  StruUserRoleInfoID::default_instance_ = new StruUserRoleInfoID();
  StruRoomInfoID::default_instance_ = new StruRoomInfoID();
  StruMicInfo::default_instance_ = new StruMicInfo();
  StruRoomMicInfoID::default_instance_ = new StruRoomMicInfoID();
  StruUserInfo::default_instance_ = new StruUserInfo();
  StruUserInfoListID::default_instance_ = new StruUserInfoListID();
  StruUserMsgRQ::default_instance_ = new StruUserMsgRQ();
  StruUserMsgRS::default_instance_ = new StruUserMsgRS();
  StruUserMsgTextID::default_instance_ = new StruUserMsgTextID();
  StruUserGiveGiftRQ::default_instance_ = new StruUserGiveGiftRQ();
  StruUserGiveGiftRS::default_instance_ = new StruUserGiveGiftRS();
  StruUserApplyMicRQ::default_instance_ = new StruUserApplyMicRQ();
  StruUserApplyMicRS::default_instance_ = new StruUserApplyMicRS();
  StruUserOnMicID::default_instance_ = new StruUserOnMicID();
  StruUserOffMicRQ::default_instance_ = new StruUserOffMicRQ();
  StruUserOffMicRS::default_instance_ = new StruUserOffMicRS();
  StruUserOffMicID::default_instance_ = new StruUserOffMicID();
  StruPutUserOnMicRQ::default_instance_ = new StruPutUserOnMicRQ();
  StruPutUserOnMicRS::default_instance_ = new StruPutUserOnMicRS();
  StruCancleUserMicRQ::default_instance_ = new StruCancleUserMicRQ();
  StruCancleUserMicRS::default_instance_ = new StruCancleUserMicRS();
  StruUserExitRoomID::default_instance_ = new StruUserExitRoomID();
  GateRoomServerPack::default_instance_->InitAsDefaultInstance();
  StruUserLoginRQ::default_instance_->InitAsDefaultInstance();
  StruUserLoginRS::default_instance_->InitAsDefaultInstance();
  StruUserRoleInfoID::default_instance_->InitAsDefaultInstance();
  StruRoomInfoID::default_instance_->InitAsDefaultInstance();
  StruMicInfo::default_instance_->InitAsDefaultInstance();
  StruRoomMicInfoID::default_instance_->InitAsDefaultInstance();
  StruUserInfo::default_instance_->InitAsDefaultInstance();
  StruUserInfoListID::default_instance_->InitAsDefaultInstance();
  StruUserMsgRQ::default_instance_->InitAsDefaultInstance();
  StruUserMsgRS::default_instance_->InitAsDefaultInstance();
  StruUserMsgTextID::default_instance_->InitAsDefaultInstance();
  StruUserGiveGiftRQ::default_instance_->InitAsDefaultInstance();
  StruUserGiveGiftRS::default_instance_->InitAsDefaultInstance();
  StruUserApplyMicRQ::default_instance_->InitAsDefaultInstance();
  StruUserApplyMicRS::default_instance_->InitAsDefaultInstance();
  StruUserOnMicID::default_instance_->InitAsDefaultInstance();
  StruUserOffMicRQ::default_instance_->InitAsDefaultInstance();
  StruUserOffMicRS::default_instance_->InitAsDefaultInstance();
  StruUserOffMicID::default_instance_->InitAsDefaultInstance();
  StruPutUserOnMicRQ::default_instance_->InitAsDefaultInstance();
  StruPutUserOnMicRS::default_instance_->InitAsDefaultInstance();
  StruCancleUserMicRQ::default_instance_->InitAsDefaultInstance();
  StruCancleUserMicRS::default_instance_->InitAsDefaultInstance();
  StruUserExitRoomID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_package_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_package_5fdefine_2eproto {
  StaticDescriptorInitializer_package_5fdefine_2eproto() {
    protobuf_AddDesc_package_5fdefine_2eproto();
  }
} static_descriptor_initializer_package_5fdefine_2eproto_;

const ::google::protobuf::EnumDescriptor* EnumMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumMsgID_descriptor_;
}
bool EnumMsgID_IsValid(int value) {
  switch(value) {
    case 6000:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6005:
    case 6006:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6015:
    case 6016:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GateRoomServerPack::kStrHeadFieldNumber;
const int GateRoomServerPack::kUserHashkeyFieldNumber;
const int GateRoomServerPack::kGsHashkeyFieldNumber;
const int GateRoomServerPack::kDataLenFieldNumber;
const int GateRoomServerPack::kDataMsgFieldNumber;
const int GateRoomServerPack::kStrTailFieldNumber;
#endif  // !_MSC_VER

GateRoomServerPack::GateRoomServerPack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRoomServerPack::InitAsDefaultInstance() {
}

GateRoomServerPack::GateRoomServerPack(const GateRoomServerPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRoomServerPack::SharedCtor() {
  _cached_size_ = 0;
  str_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_hashkey_ = 0;
  gs_hashkey_ = 0;
  data_len_ = 0;
  data_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_tail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRoomServerPack::~GateRoomServerPack() {
  SharedDtor();
}

void GateRoomServerPack::SharedDtor() {
  if (str_head_ != &::google::protobuf::internal::kEmptyString) {
    delete str_head_;
  }
  if (data_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete data_msg_;
  }
  if (str_tail_ != &::google::protobuf::internal::kEmptyString) {
    delete str_tail_;
  }
  if (this != default_instance_) {
  }
}

void GateRoomServerPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRoomServerPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRoomServerPack_descriptor_;
}

const GateRoomServerPack& GateRoomServerPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

GateRoomServerPack* GateRoomServerPack::default_instance_ = NULL;

GateRoomServerPack* GateRoomServerPack::New() const {
  return new GateRoomServerPack;
}

void GateRoomServerPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_head()) {
      if (str_head_ != &::google::protobuf::internal::kEmptyString) {
        str_head_->clear();
      }
    }
    user_hashkey_ = 0;
    gs_hashkey_ = 0;
    data_len_ = 0;
    if (has_data_msg()) {
      if (data_msg_ != &::google::protobuf::internal::kEmptyString) {
        data_msg_->clear();
      }
    }
    if (has_str_tail()) {
      if (str_tail_ != &::google::protobuf::internal::kEmptyString) {
        str_tail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRoomServerPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str_head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_head().data(), this->str_head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_hashkey;
        break;
      }
      
      // required int32 user_hashkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_hashkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_hashkey_)));
          set_has_user_hashkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gs_hashkey;
        break;
      }
      
      // required int32 gs_hashkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_hashkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gs_hashkey_)));
          set_has_gs_hashkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_len;
        break;
      }
      
      // required int32 data_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_msg;
        break;
      }
      
      // required bytes data_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_str_tail;
        break;
      }
      
      // required string str_tail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_tail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_tail().data(), this->str_tail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRoomServerPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str_head = 1;
  if (has_str_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_head().data(), this->str_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_head(), output);
  }
  
  // required int32 user_hashkey = 2;
  if (has_user_hashkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_hashkey(), output);
  }
  
  // required int32 gs_hashkey = 3;
  if (has_gs_hashkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gs_hashkey(), output);
  }
  
  // required int32 data_len = 4;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_len(), output);
  }
  
  // required bytes data_msg = 5;
  if (has_data_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data_msg(), output);
  }
  
  // required string str_tail = 6;
  if (has_str_tail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_tail().data(), this->str_tail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->str_tail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRoomServerPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str_head = 1;
  if (has_str_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_head().data(), this->str_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_head(), target);
  }
  
  // required int32 user_hashkey = 2;
  if (has_user_hashkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_hashkey(), target);
  }
  
  // required int32 gs_hashkey = 3;
  if (has_gs_hashkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gs_hashkey(), target);
  }
  
  // required int32 data_len = 4;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_len(), target);
  }
  
  // required bytes data_msg = 5;
  if (has_data_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data_msg(), target);
  }
  
  // required string str_tail = 6;
  if (has_str_tail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_tail().data(), this->str_tail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->str_tail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRoomServerPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str_head = 1;
    if (has_str_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_head());
    }
    
    // required int32 user_hashkey = 2;
    if (has_user_hashkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_hashkey());
    }
    
    // required int32 gs_hashkey = 3;
    if (has_gs_hashkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gs_hashkey());
    }
    
    // required int32 data_len = 4;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_len());
    }
    
    // required bytes data_msg = 5;
    if (has_data_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_msg());
    }
    
    // required string str_tail = 6;
    if (has_str_tail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_tail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRoomServerPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRoomServerPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRoomServerPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRoomServerPack::MergeFrom(const GateRoomServerPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_head()) {
      set_str_head(from.str_head());
    }
    if (from.has_user_hashkey()) {
      set_user_hashkey(from.user_hashkey());
    }
    if (from.has_gs_hashkey()) {
      set_gs_hashkey(from.gs_hashkey());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_data_msg()) {
      set_data_msg(from.data_msg());
    }
    if (from.has_str_tail()) {
      set_str_tail(from.str_tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRoomServerPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRoomServerPack::CopyFrom(const GateRoomServerPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRoomServerPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void GateRoomServerPack::Swap(GateRoomServerPack* other) {
  if (other != this) {
    std::swap(str_head_, other->str_head_);
    std::swap(user_hashkey_, other->user_hashkey_);
    std::swap(gs_hashkey_, other->gs_hashkey_);
    std::swap(data_len_, other->data_len_);
    std::swap(data_msg_, other->data_msg_);
    std::swap(str_tail_, other->str_tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRoomServerPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRoomServerPack_descriptor_;
  metadata.reflection = GateRoomServerPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserLoginRQ::kMsgIdFieldNumber;
const int StruUserLoginRQ::kUserIdFieldNumber;
const int StruUserLoginRQ::kRoomIdFieldNumber;
const int StruUserLoginRQ::kUserPswFieldNumber;
const int StruUserLoginRQ::kUserAccountNameFieldNumber;
#endif  // !_MSC_VER

StruUserLoginRQ::StruUserLoginRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserLoginRQ::InitAsDefaultInstance() {
}

StruUserLoginRQ::StruUserLoginRQ(const StruUserLoginRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserLoginRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6001;
  user_id_ = 0;
  room_id_ = 0;
  user_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserLoginRQ::~StruUserLoginRQ() {
  SharedDtor();
}

void StruUserLoginRQ::SharedDtor() {
  if (user_psw_ != &::google::protobuf::internal::kEmptyString) {
    delete user_psw_;
  }
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_account_name_;
  }
  if (this != default_instance_) {
  }
}

void StruUserLoginRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserLoginRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserLoginRQ_descriptor_;
}

const StruUserLoginRQ& StruUserLoginRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserLoginRQ* StruUserLoginRQ::default_instance_ = NULL;

StruUserLoginRQ* StruUserLoginRQ::New() const {
  return new StruUserLoginRQ;
}

void StruUserLoginRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6001;
    user_id_ = 0;
    room_id_ = 0;
    if (has_user_psw()) {
      if (user_psw_ != &::google::protobuf::internal::kEmptyString) {
        user_psw_->clear();
      }
    }
    if (has_user_account_name()) {
      if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        user_account_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserLoginRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_psw;
        break;
      }
      
      // required string user_psw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_psw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_psw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_psw().data(), this->user_psw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_account_name;
        break;
      }
      
      // required string user_account_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_account_name().data(), this->user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserLoginRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required string user_psw = 4;
  if (has_user_psw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_psw().data(), this->user_psw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_psw(), output);
  }
  
  // required string user_account_name = 5;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_account_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserLoginRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required string user_psw = 4;
  if (has_user_psw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_psw().data(), this->user_psw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_psw(), target);
  }
  
  // required string user_account_name = 5;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_account_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserLoginRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string user_psw = 4;
    if (has_user_psw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_psw());
    }
    
    // required string user_account_name = 5;
    if (has_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_account_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserLoginRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserLoginRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserLoginRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserLoginRQ::MergeFrom(const StruUserLoginRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_user_psw()) {
      set_user_psw(from.user_psw());
    }
    if (from.has_user_account_name()) {
      set_user_account_name(from.user_account_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserLoginRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserLoginRQ::CopyFrom(const StruUserLoginRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserLoginRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserLoginRQ::Swap(StruUserLoginRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(user_psw_, other->user_psw_);
    std::swap(user_account_name_, other->user_account_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserLoginRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserLoginRQ_descriptor_;
  metadata.reflection = StruUserLoginRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserLoginRS::kMsgIdFieldNumber;
const int StruUserLoginRS::kUserIdFieldNumber;
const int StruUserLoginRS::kRoomIdFieldNumber;
const int StruUserLoginRS::kResultFieldNumber;
const int StruUserLoginRS::kUserRedDFieldNumber;
const int StruUserLoginRS::kUserBlueDFieldNumber;
const int StruUserLoginRS::kUserLevelFieldNumber;
const int StruUserLoginRS::kBuyerRichesFieldNumber;
const int StruUserLoginRS::kBuyerGrowUpFieldNumber;
const int StruUserLoginRS::kBuyerHonourFieldNumber;
const int StruUserLoginRS::kBuyerEstimateFieldNumber;
const int StruUserLoginRS::kSellerIncomeFieldNumber;
const int StruUserLoginRS::kSellerExpFieldNumber;
const int StruUserLoginRS::kSellerPopFieldNumber;
const int StruUserLoginRS::kSellerEstimateFieldNumber;
#endif  // !_MSC_VER

StruUserLoginRS::StruUserLoginRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserLoginRS::InitAsDefaultInstance() {
}

StruUserLoginRS::StruUserLoginRS(const StruUserLoginRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserLoginRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6002;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  user_red_d_ = 0;
  user_blue_d_ = 0;
  user_level_ = 0;
  buyer_riches_ = 0;
  buyer_grow_up_ = 0;
  buyer_honour_ = 0;
  buyer_estimate_ = 0;
  seller_income_ = 0;
  seller_exp_ = 0;
  seller_pop_ = 0;
  seller_estimate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserLoginRS::~StruUserLoginRS() {
  SharedDtor();
}

void StruUserLoginRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserLoginRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserLoginRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserLoginRS_descriptor_;
}

const StruUserLoginRS& StruUserLoginRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserLoginRS* StruUserLoginRS::default_instance_ = NULL;

StruUserLoginRS* StruUserLoginRS::New() const {
  return new StruUserLoginRS;
}

void StruUserLoginRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6002;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
    user_red_d_ = 0;
    user_blue_d_ = 0;
    user_level_ = 0;
    buyer_riches_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyer_grow_up_ = 0;
    buyer_honour_ = 0;
    buyer_estimate_ = 0;
    seller_income_ = 0;
    seller_exp_ = 0;
    seller_pop_ = 0;
    seller_estimate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserLoginRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_red_d;
        break;
      }
      
      // required int32 user_red_d = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_red_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_red_d_)));
          set_has_user_red_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_blue_d;
        break;
      }
      
      // required int32 user_blue_d = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_blue_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_blue_d_)));
          set_has_user_blue_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_level;
        break;
      }
      
      // required int32 user_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
          set_has_user_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buyer_riches;
        break;
      }
      
      // required int32 buyer_riches = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_riches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_riches_)));
          set_has_buyer_riches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buyer_grow_up;
        break;
      }
      
      // required int32 buyer_grow_up = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_grow_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_grow_up_)));
          set_has_buyer_grow_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buyer_honour;
        break;
      }
      
      // required int32 buyer_honour = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_honour_)));
          set_has_buyer_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_buyer_estimate;
        break;
      }
      
      // required int32 buyer_estimate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_estimate_)));
          set_has_buyer_estimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seller_income;
        break;
      }
      
      // required int32 seller_income = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_income_)));
          set_has_seller_income();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_seller_exp;
        break;
      }
      
      // required int32 seller_exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_exp_)));
          set_has_seller_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_seller_pop;
        break;
      }
      
      // required int32 seller_pop = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_pop_)));
          set_has_seller_pop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_seller_estimate;
        break;
      }
      
      // required int32 seller_estimate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_estimate_)));
          set_has_seller_estimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserLoginRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  // required int32 user_red_d = 5;
  if (has_user_red_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_red_d(), output);
  }
  
  // required int32 user_blue_d = 6;
  if (has_user_blue_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_blue_d(), output);
  }
  
  // required int32 user_level = 7;
  if (has_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_level(), output);
  }
  
  // required int32 buyer_riches = 8;
  if (has_buyer_riches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buyer_riches(), output);
  }
  
  // required int32 buyer_grow_up = 9;
  if (has_buyer_grow_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buyer_grow_up(), output);
  }
  
  // required int32 buyer_honour = 10;
  if (has_buyer_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buyer_honour(), output);
  }
  
  // required int32 buyer_estimate = 11;
  if (has_buyer_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->buyer_estimate(), output);
  }
  
  // required int32 seller_income = 12;
  if (has_seller_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->seller_income(), output);
  }
  
  // required int32 seller_exp = 13;
  if (has_seller_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->seller_exp(), output);
  }
  
  // required int32 seller_pop = 14;
  if (has_seller_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->seller_pop(), output);
  }
  
  // required int32 seller_estimate = 15;
  if (has_seller_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->seller_estimate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserLoginRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  // required int32 user_red_d = 5;
  if (has_user_red_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_red_d(), target);
  }
  
  // required int32 user_blue_d = 6;
  if (has_user_blue_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_blue_d(), target);
  }
  
  // required int32 user_level = 7;
  if (has_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->user_level(), target);
  }
  
  // required int32 buyer_riches = 8;
  if (has_buyer_riches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buyer_riches(), target);
  }
  
  // required int32 buyer_grow_up = 9;
  if (has_buyer_grow_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buyer_grow_up(), target);
  }
  
  // required int32 buyer_honour = 10;
  if (has_buyer_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buyer_honour(), target);
  }
  
  // required int32 buyer_estimate = 11;
  if (has_buyer_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->buyer_estimate(), target);
  }
  
  // required int32 seller_income = 12;
  if (has_seller_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->seller_income(), target);
  }
  
  // required int32 seller_exp = 13;
  if (has_seller_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->seller_exp(), target);
  }
  
  // required int32 seller_pop = 14;
  if (has_seller_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->seller_pop(), target);
  }
  
  // required int32 seller_estimate = 15;
  if (has_seller_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->seller_estimate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserLoginRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required int32 user_red_d = 5;
    if (has_user_red_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_red_d());
    }
    
    // required int32 user_blue_d = 6;
    if (has_user_blue_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_blue_d());
    }
    
    // required int32 user_level = 7;
    if (has_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_level());
    }
    
    // required int32 buyer_riches = 8;
    if (has_buyer_riches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_riches());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 buyer_grow_up = 9;
    if (has_buyer_grow_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_grow_up());
    }
    
    // required int32 buyer_honour = 10;
    if (has_buyer_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_honour());
    }
    
    // required int32 buyer_estimate = 11;
    if (has_buyer_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_estimate());
    }
    
    // required int32 seller_income = 12;
    if (has_seller_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_income());
    }
    
    // required int32 seller_exp = 13;
    if (has_seller_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_exp());
    }
    
    // required int32 seller_pop = 14;
    if (has_seller_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_pop());
    }
    
    // required int32 seller_estimate = 15;
    if (has_seller_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_estimate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserLoginRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserLoginRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserLoginRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserLoginRS::MergeFrom(const StruUserLoginRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_red_d()) {
      set_user_red_d(from.user_red_d());
    }
    if (from.has_user_blue_d()) {
      set_user_blue_d(from.user_blue_d());
    }
    if (from.has_user_level()) {
      set_user_level(from.user_level());
    }
    if (from.has_buyer_riches()) {
      set_buyer_riches(from.buyer_riches());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyer_grow_up()) {
      set_buyer_grow_up(from.buyer_grow_up());
    }
    if (from.has_buyer_honour()) {
      set_buyer_honour(from.buyer_honour());
    }
    if (from.has_buyer_estimate()) {
      set_buyer_estimate(from.buyer_estimate());
    }
    if (from.has_seller_income()) {
      set_seller_income(from.seller_income());
    }
    if (from.has_seller_exp()) {
      set_seller_exp(from.seller_exp());
    }
    if (from.has_seller_pop()) {
      set_seller_pop(from.seller_pop());
    }
    if (from.has_seller_estimate()) {
      set_seller_estimate(from.seller_estimate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserLoginRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserLoginRS::CopyFrom(const StruUserLoginRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserLoginRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void StruUserLoginRS::Swap(StruUserLoginRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(user_red_d_, other->user_red_d_);
    std::swap(user_blue_d_, other->user_blue_d_);
    std::swap(user_level_, other->user_level_);
    std::swap(buyer_riches_, other->buyer_riches_);
    std::swap(buyer_grow_up_, other->buyer_grow_up_);
    std::swap(buyer_honour_, other->buyer_honour_);
    std::swap(buyer_estimate_, other->buyer_estimate_);
    std::swap(seller_income_, other->seller_income_);
    std::swap(seller_exp_, other->seller_exp_);
    std::swap(seller_pop_, other->seller_pop_);
    std::swap(seller_estimate_, other->seller_estimate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserLoginRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserLoginRS_descriptor_;
  metadata.reflection = StruUserLoginRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserRoleInfoID::kMsgIdFieldNumber;
const int StruUserRoleInfoID::kUserIdFieldNumber;
const int StruUserRoleInfoID::kRoomIdFieldNumber;
const int StruUserRoleInfoID::kUserAccountNameFieldNumber;
const int StruUserRoleInfoID::kUserRoleUidFieldNumber;
const int StruUserRoleInfoID::kOtherDataFieldNumber;
#endif  // !_MSC_VER

StruUserRoleInfoID::StruUserRoleInfoID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserRoleInfoID::InitAsDefaultInstance() {
}

StruUserRoleInfoID::StruUserRoleInfoID(const StruUserRoleInfoID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserRoleInfoID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6003;
  user_id_ = 0;
  room_id_ = 0;
  user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserRoleInfoID::~StruUserRoleInfoID() {
  SharedDtor();
}

void StruUserRoleInfoID::SharedDtor() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_account_name_;
  }
  if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete user_role_uid_;
  }
  if (other_data_ != &::google::protobuf::internal::kEmptyString) {
    delete other_data_;
  }
  if (this != default_instance_) {
  }
}

void StruUserRoleInfoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserRoleInfoID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserRoleInfoID_descriptor_;
}

const StruUserRoleInfoID& StruUserRoleInfoID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserRoleInfoID* StruUserRoleInfoID::default_instance_ = NULL;

StruUserRoleInfoID* StruUserRoleInfoID::New() const {
  return new StruUserRoleInfoID;
}

void StruUserRoleInfoID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6003;
    user_id_ = 0;
    room_id_ = 0;
    if (has_user_account_name()) {
      if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        user_account_name_->clear();
      }
    }
    if (has_user_role_uid()) {
      if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
        user_role_uid_->clear();
      }
    }
    if (has_other_data()) {
      if (other_data_ != &::google::protobuf::internal::kEmptyString) {
        other_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserRoleInfoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_account_name;
        break;
      }
      
      // required string user_account_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_account_name().data(), this->user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_role_uid;
        break;
      }
      
      // required string user_role_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_role_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_role_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_role_uid().data(), this->user_role_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other_data;
        break;
      }
      
      // optional string other_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_data().data(), this->other_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserRoleInfoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required string user_account_name = 4;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_account_name(), output);
  }
  
  // required string user_role_uid = 5;
  if (has_user_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_role_uid().data(), this->user_role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_role_uid(), output);
  }
  
  // optional string other_data = 6;
  if (has_other_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_data().data(), this->other_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->other_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserRoleInfoID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required string user_account_name = 4;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_account_name(), target);
  }
  
  // required string user_role_uid = 5;
  if (has_user_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_role_uid().data(), this->user_role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_role_uid(), target);
  }
  
  // optional string other_data = 6;
  if (has_other_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_data().data(), this->other_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->other_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserRoleInfoID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string user_account_name = 4;
    if (has_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_account_name());
    }
    
    // required string user_role_uid = 5;
    if (has_user_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_role_uid());
    }
    
    // optional string other_data = 6;
    if (has_other_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserRoleInfoID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserRoleInfoID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserRoleInfoID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserRoleInfoID::MergeFrom(const StruUserRoleInfoID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_user_account_name()) {
      set_user_account_name(from.user_account_name());
    }
    if (from.has_user_role_uid()) {
      set_user_role_uid(from.user_role_uid());
    }
    if (from.has_other_data()) {
      set_other_data(from.other_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserRoleInfoID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserRoleInfoID::CopyFrom(const StruUserRoleInfoID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserRoleInfoID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserRoleInfoID::Swap(StruUserRoleInfoID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(user_account_name_, other->user_account_name_);
    std::swap(user_role_uid_, other->user_role_uid_);
    std::swap(other_data_, other->other_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserRoleInfoID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserRoleInfoID_descriptor_;
  metadata.reflection = StruUserRoleInfoID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruRoomInfoID::kMsgIdFieldNumber;
const int StruRoomInfoID::kUserIdFieldNumber;
const int StruRoomInfoID::kRoomIdFieldNumber;
const int StruRoomInfoID::kRoomTypeFieldNumber;
const int StruRoomInfoID::kRoomNameFieldNumber;
const int StruRoomInfoID::kRoomAdvertFieldNumber;
const int StruRoomInfoID::kRoomAnnounceFieldNumber;
#endif  // !_MSC_VER

StruRoomInfoID::StruRoomInfoID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruRoomInfoID::InitAsDefaultInstance() {
}

StruRoomInfoID::StruRoomInfoID(const StruRoomInfoID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruRoomInfoID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6004;
  user_id_ = 0;
  room_id_ = 0;
  room_type_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_advert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruRoomInfoID::~StruRoomInfoID() {
  SharedDtor();
}

void StruRoomInfoID::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_advert_ != &::google::protobuf::internal::kEmptyString) {
    delete room_advert_;
  }
  if (room_announce_ != &::google::protobuf::internal::kEmptyString) {
    delete room_announce_;
  }
  if (this != default_instance_) {
  }
}

void StruRoomInfoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruRoomInfoID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruRoomInfoID_descriptor_;
}

const StruRoomInfoID& StruRoomInfoID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruRoomInfoID* StruRoomInfoID::default_instance_ = NULL;

StruRoomInfoID* StruRoomInfoID::New() const {
  return new StruRoomInfoID;
}

void StruRoomInfoID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6004;
    user_id_ = 0;
    room_id_ = 0;
    room_type_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_room_advert()) {
      if (room_advert_ != &::google::protobuf::internal::kEmptyString) {
        room_advert_->clear();
      }
    }
    if (has_room_announce()) {
      if (room_announce_ != &::google::protobuf::internal::kEmptyString) {
        room_announce_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruRoomInfoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_type;
        break;
      }
      
      // required int32 room_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_room_advert;
        break;
      }
      
      // required string room_advert = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_advert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_advert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_advert().data(), this->room_advert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_room_announce;
        break;
      }
      
      // required string room_announce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_announce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_announce().data(), this->room_announce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruRoomInfoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 room_type = 4;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_type(), output);
  }
  
  // required string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->room_name(), output);
  }
  
  // required string room_advert = 6;
  if (has_room_advert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_advert().data(), this->room_advert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->room_advert(), output);
  }
  
  // required string room_announce = 7;
  if (has_room_announce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_announce().data(), this->room_announce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->room_announce(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruRoomInfoID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 room_type = 4;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_type(), target);
  }
  
  // required string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->room_name(), target);
  }
  
  // required string room_advert = 6;
  if (has_room_advert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_advert().data(), this->room_advert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->room_advert(), target);
  }
  
  // required string room_announce = 7;
  if (has_room_announce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_announce().data(), this->room_announce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->room_announce(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruRoomInfoID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 room_type = 4;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }
    
    // required string room_name = 5;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
    // required string room_advert = 6;
    if (has_room_advert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_advert());
    }
    
    // required string room_announce = 7;
    if (has_room_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_announce());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruRoomInfoID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruRoomInfoID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruRoomInfoID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruRoomInfoID::MergeFrom(const StruRoomInfoID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_room_advert()) {
      set_room_advert(from.room_advert());
    }
    if (from.has_room_announce()) {
      set_room_announce(from.room_announce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruRoomInfoID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruRoomInfoID::CopyFrom(const StruRoomInfoID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruRoomInfoID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void StruRoomInfoID::Swap(StruRoomInfoID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(room_name_, other->room_name_);
    std::swap(room_advert_, other->room_advert_);
    std::swap(room_announce_, other->room_announce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruRoomInfoID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruRoomInfoID_descriptor_;
  metadata.reflection = StruRoomInfoID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruMicInfo::kMsgIdFieldNumber;
const int StruMicInfo::kUserIdFieldNumber;
const int StruMicInfo::kUserAccountNameFieldNumber;
const int StruMicInfo::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruMicInfo::StruMicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruMicInfo::InitAsDefaultInstance() {
}

StruMicInfo::StruMicInfo(const StruMicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruMicInfo::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6005;
  user_id_ = 0;
  user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruMicInfo::~StruMicInfo() {
  SharedDtor();
}

void StruMicInfo::SharedDtor() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_account_name_;
  }
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruMicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruMicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruMicInfo_descriptor_;
}

const StruMicInfo& StruMicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruMicInfo* StruMicInfo::default_instance_ = NULL;

StruMicInfo* StruMicInfo::New() const {
  return new StruMicInfo;
}

void StruMicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6005;
    user_id_ = 0;
    if (has_user_account_name()) {
      if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        user_account_name_->clear();
      }
    }
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruMicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_account_name;
        break;
      }
      
      // required string user_account_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_account_name().data(), this->user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruMicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required string user_account_name = 3;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_account_name(), output);
  }
  
  // required string mic_channel_str = 4;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruMicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required string user_account_name = 3;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_account_name(), target);
  }
  
  // required string mic_channel_str = 4;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruMicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required string user_account_name = 3;
    if (has_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_account_name());
    }
    
    // required string mic_channel_str = 4;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruMicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruMicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruMicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruMicInfo::MergeFrom(const StruMicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_account_name()) {
      set_user_account_name(from.user_account_name());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruMicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruMicInfo::CopyFrom(const StruMicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruMicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruMicInfo::Swap(StruMicInfo* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_account_name_, other->user_account_name_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruMicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruMicInfo_descriptor_;
  metadata.reflection = StruMicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruRoomMicInfoID::kMsgIdFieldNumber;
const int StruRoomMicInfoID::kUserIdFieldNumber;
const int StruRoomMicInfoID::kRoomIdFieldNumber;
const int StruRoomMicInfoID::kMicListFieldNumber;
#endif  // !_MSC_VER

StruRoomMicInfoID::StruRoomMicInfoID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruRoomMicInfoID::InitAsDefaultInstance() {
}

StruRoomMicInfoID::StruRoomMicInfoID(const StruRoomMicInfoID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruRoomMicInfoID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6006;
  user_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruRoomMicInfoID::~StruRoomMicInfoID() {
  SharedDtor();
}

void StruRoomMicInfoID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruRoomMicInfoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruRoomMicInfoID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruRoomMicInfoID_descriptor_;
}

const StruRoomMicInfoID& StruRoomMicInfoID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruRoomMicInfoID* StruRoomMicInfoID::default_instance_ = NULL;

StruRoomMicInfoID* StruRoomMicInfoID::New() const {
  return new StruRoomMicInfoID;
}

void StruRoomMicInfoID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6006;
    user_id_ = 0;
    room_id_ = 0;
  }
  mic_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruRoomMicInfoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mic_list;
        break;
      }
      
      // repeated .StruMicInfo mic_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mic_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mic_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruRoomMicInfoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // repeated .StruMicInfo mic_list = 4;
  for (int i = 0; i < this->mic_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mic_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruRoomMicInfoID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // repeated .StruMicInfo mic_list = 4;
  for (int i = 0; i < this->mic_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mic_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruRoomMicInfoID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  // repeated .StruMicInfo mic_list = 4;
  total_size += 1 * this->mic_list_size();
  for (int i = 0; i < this->mic_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mic_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruRoomMicInfoID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruRoomMicInfoID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruRoomMicInfoID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruRoomMicInfoID::MergeFrom(const StruRoomMicInfoID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mic_list_.MergeFrom(from.mic_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruRoomMicInfoID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruRoomMicInfoID::CopyFrom(const StruRoomMicInfoID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruRoomMicInfoID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < mic_list_size(); i++) {
    if (!this->mic_list(i).IsInitialized()) return false;
  }
  return true;
}

void StruRoomMicInfoID::Swap(StruRoomMicInfoID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    mic_list_.Swap(&other->mic_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruRoomMicInfoID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruRoomMicInfoID_descriptor_;
  metadata.reflection = StruRoomMicInfoID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserInfo::kMsgIdFieldNumber;
const int StruUserInfo::kUserIdFieldNumber;
const int StruUserInfo::kUserAccountNameFieldNumber;
const int StruUserInfo::kUserRoleUidFieldNumber;
const int StruUserInfo::kUserLevelFieldNumber;
const int StruUserInfo::kBuyerRichesFieldNumber;
const int StruUserInfo::kBuyerGrowUpFieldNumber;
const int StruUserInfo::kBuyerHonourFieldNumber;
const int StruUserInfo::kBuyerEstimateFieldNumber;
const int StruUserInfo::kSellerIncomeFieldNumber;
const int StruUserInfo::kSellerExpFieldNumber;
const int StruUserInfo::kSellerPopFieldNumber;
const int StruUserInfo::kSellerEstimateFieldNumber;
#endif  // !_MSC_VER

StruUserInfo::StruUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserInfo::InitAsDefaultInstance() {
}

StruUserInfo::StruUserInfo(const StruUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserInfo::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6007;
  user_id_ = 0;
  user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_level_ = 0;
  buyer_riches_ = 0;
  buyer_grow_up_ = 0;
  buyer_honour_ = 0;
  buyer_estimate_ = 0;
  seller_income_ = 0;
  seller_exp_ = 0;
  seller_pop_ = 0;
  seller_estimate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserInfo::~StruUserInfo() {
  SharedDtor();
}

void StruUserInfo::SharedDtor() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_account_name_;
  }
  if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete user_role_uid_;
  }
  if (this != default_instance_) {
  }
}

void StruUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserInfo_descriptor_;
}

const StruUserInfo& StruUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserInfo* StruUserInfo::default_instance_ = NULL;

StruUserInfo* StruUserInfo::New() const {
  return new StruUserInfo;
}

void StruUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6007;
    user_id_ = 0;
    if (has_user_account_name()) {
      if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        user_account_name_->clear();
      }
    }
    if (has_user_role_uid()) {
      if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
        user_role_uid_->clear();
      }
    }
    user_level_ = 0;
    buyer_riches_ = 0;
    buyer_grow_up_ = 0;
    buyer_honour_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyer_estimate_ = 0;
    seller_income_ = 0;
    seller_exp_ = 0;
    seller_pop_ = 0;
    seller_estimate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_account_name;
        break;
      }
      
      // required string user_account_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_account_name().data(), this->user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_role_uid;
        break;
      }
      
      // required string user_role_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_role_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_role_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_role_uid().data(), this->user_role_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_level;
        break;
      }
      
      // required int32 user_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
          set_has_user_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buyer_riches;
        break;
      }
      
      // required int32 buyer_riches = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_riches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_riches_)));
          set_has_buyer_riches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyer_grow_up;
        break;
      }
      
      // required int32 buyer_grow_up = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_grow_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_grow_up_)));
          set_has_buyer_grow_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buyer_honour;
        break;
      }
      
      // required int32 buyer_honour = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_honour_)));
          set_has_buyer_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buyer_estimate;
        break;
      }
      
      // required int32 buyer_estimate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyer_estimate_)));
          set_has_buyer_estimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seller_income;
        break;
      }
      
      // required int32 seller_income = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_income_)));
          set_has_seller_income();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_seller_exp;
        break;
      }
      
      // required int32 seller_exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_exp_)));
          set_has_seller_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seller_pop;
        break;
      }
      
      // required int32 seller_pop = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_pop_)));
          set_has_seller_pop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_seller_estimate;
        break;
      }
      
      // required int32 seller_estimate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seller_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_estimate_)));
          set_has_seller_estimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required string user_account_name = 3;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_account_name(), output);
  }
  
  // required string user_role_uid = 4;
  if (has_user_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_role_uid().data(), this->user_role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_role_uid(), output);
  }
  
  // required int32 user_level = 5;
  if (has_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_level(), output);
  }
  
  // required int32 buyer_riches = 6;
  if (has_buyer_riches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buyer_riches(), output);
  }
  
  // required int32 buyer_grow_up = 7;
  if (has_buyer_grow_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyer_grow_up(), output);
  }
  
  // required int32 buyer_honour = 8;
  if (has_buyer_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buyer_honour(), output);
  }
  
  // required int32 buyer_estimate = 9;
  if (has_buyer_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buyer_estimate(), output);
  }
  
  // required int32 seller_income = 10;
  if (has_seller_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->seller_income(), output);
  }
  
  // required int32 seller_exp = 11;
  if (has_seller_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->seller_exp(), output);
  }
  
  // required int32 seller_pop = 12;
  if (has_seller_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->seller_pop(), output);
  }
  
  // required int32 seller_estimate = 13;
  if (has_seller_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->seller_estimate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required string user_account_name = 3;
  if (has_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_account_name().data(), this->user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_account_name(), target);
  }
  
  // required string user_role_uid = 4;
  if (has_user_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_role_uid().data(), this->user_role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_role_uid(), target);
  }
  
  // required int32 user_level = 5;
  if (has_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_level(), target);
  }
  
  // required int32 buyer_riches = 6;
  if (has_buyer_riches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buyer_riches(), target);
  }
  
  // required int32 buyer_grow_up = 7;
  if (has_buyer_grow_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyer_grow_up(), target);
  }
  
  // required int32 buyer_honour = 8;
  if (has_buyer_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buyer_honour(), target);
  }
  
  // required int32 buyer_estimate = 9;
  if (has_buyer_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buyer_estimate(), target);
  }
  
  // required int32 seller_income = 10;
  if (has_seller_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->seller_income(), target);
  }
  
  // required int32 seller_exp = 11;
  if (has_seller_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->seller_exp(), target);
  }
  
  // required int32 seller_pop = 12;
  if (has_seller_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->seller_pop(), target);
  }
  
  // required int32 seller_estimate = 13;
  if (has_seller_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->seller_estimate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required string user_account_name = 3;
    if (has_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_account_name());
    }
    
    // required string user_role_uid = 4;
    if (has_user_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_role_uid());
    }
    
    // required int32 user_level = 5;
    if (has_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_level());
    }
    
    // required int32 buyer_riches = 6;
    if (has_buyer_riches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_riches());
    }
    
    // required int32 buyer_grow_up = 7;
    if (has_buyer_grow_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_grow_up());
    }
    
    // required int32 buyer_honour = 8;
    if (has_buyer_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_honour());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 buyer_estimate = 9;
    if (has_buyer_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyer_estimate());
    }
    
    // required int32 seller_income = 10;
    if (has_seller_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_income());
    }
    
    // required int32 seller_exp = 11;
    if (has_seller_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_exp());
    }
    
    // required int32 seller_pop = 12;
    if (has_seller_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_pop());
    }
    
    // required int32 seller_estimate = 13;
    if (has_seller_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_estimate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserInfo::MergeFrom(const StruUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_account_name()) {
      set_user_account_name(from.user_account_name());
    }
    if (from.has_user_role_uid()) {
      set_user_role_uid(from.user_role_uid());
    }
    if (from.has_user_level()) {
      set_user_level(from.user_level());
    }
    if (from.has_buyer_riches()) {
      set_buyer_riches(from.buyer_riches());
    }
    if (from.has_buyer_grow_up()) {
      set_buyer_grow_up(from.buyer_grow_up());
    }
    if (from.has_buyer_honour()) {
      set_buyer_honour(from.buyer_honour());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyer_estimate()) {
      set_buyer_estimate(from.buyer_estimate());
    }
    if (from.has_seller_income()) {
      set_seller_income(from.seller_income());
    }
    if (from.has_seller_exp()) {
      set_seller_exp(from.seller_exp());
    }
    if (from.has_seller_pop()) {
      set_seller_pop(from.seller_pop());
    }
    if (from.has_seller_estimate()) {
      set_seller_estimate(from.seller_estimate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserInfo::CopyFrom(const StruUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void StruUserInfo::Swap(StruUserInfo* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_account_name_, other->user_account_name_);
    std::swap(user_role_uid_, other->user_role_uid_);
    std::swap(user_level_, other->user_level_);
    std::swap(buyer_riches_, other->buyer_riches_);
    std::swap(buyer_grow_up_, other->buyer_grow_up_);
    std::swap(buyer_honour_, other->buyer_honour_);
    std::swap(buyer_estimate_, other->buyer_estimate_);
    std::swap(seller_income_, other->seller_income_);
    std::swap(seller_exp_, other->seller_exp_);
    std::swap(seller_pop_, other->seller_pop_);
    std::swap(seller_estimate_, other->seller_estimate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserInfo_descriptor_;
  metadata.reflection = StruUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserInfoListID::kMsgIdFieldNumber;
const int StruUserInfoListID::kUserIdFieldNumber;
const int StruUserInfoListID::kRoomIdFieldNumber;
const int StruUserInfoListID::kUserInfoListFieldNumber;
#endif  // !_MSC_VER

StruUserInfoListID::StruUserInfoListID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserInfoListID::InitAsDefaultInstance() {
}

StruUserInfoListID::StruUserInfoListID(const StruUserInfoListID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserInfoListID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6008;
  user_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserInfoListID::~StruUserInfoListID() {
  SharedDtor();
}

void StruUserInfoListID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserInfoListID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserInfoListID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserInfoListID_descriptor_;
}

const StruUserInfoListID& StruUserInfoListID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserInfoListID* StruUserInfoListID::default_instance_ = NULL;

StruUserInfoListID* StruUserInfoListID::New() const {
  return new StruUserInfoListID;
}

void StruUserInfoListID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6008;
    user_id_ = 0;
    room_id_ = 0;
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserInfoListID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_info_list;
        break;
      }
      
      // repeated .StruUserInfo user_info_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserInfoListID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // repeated .StruUserInfo user_info_list = 4;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_info_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserInfoListID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // repeated .StruUserInfo user_info_list = 4;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_info_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserInfoListID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  // repeated .StruUserInfo user_info_list = 4;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserInfoListID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserInfoListID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserInfoListID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserInfoListID::MergeFrom(const StruUserInfoListID& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserInfoListID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserInfoListID::CopyFrom(const StruUserInfoListID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserInfoListID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < user_info_list_size(); i++) {
    if (!this->user_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void StruUserInfoListID::Swap(StruUserInfoListID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserInfoListID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserInfoListID_descriptor_;
  metadata.reflection = StruUserInfoListID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserMsgRQ::kMsgIdFieldNumber;
const int StruUserMsgRQ::kUserIdFieldNumber;
const int StruUserMsgRQ::kRoomIdFieldNumber;
const int StruUserMsgRQ::kMsgTextFieldNumber;
const int StruUserMsgRQ::kIsPrivateFieldNumber;
const int StruUserMsgRQ::kDstUserIdFieldNumber;
#endif  // !_MSC_VER

StruUserMsgRQ::StruUserMsgRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserMsgRQ::InitAsDefaultInstance() {
}

StruUserMsgRQ::StruUserMsgRQ(const StruUserMsgRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserMsgRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6009;
  user_id_ = 0;
  room_id_ = 0;
  msg_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_private_ = false;
  dst_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserMsgRQ::~StruUserMsgRQ() {
  SharedDtor();
}

void StruUserMsgRQ::SharedDtor() {
  if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_text_;
  }
  if (this != default_instance_) {
  }
}

void StruUserMsgRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserMsgRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserMsgRQ_descriptor_;
}

const StruUserMsgRQ& StruUserMsgRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserMsgRQ* StruUserMsgRQ::default_instance_ = NULL;

StruUserMsgRQ* StruUserMsgRQ::New() const {
  return new StruUserMsgRQ;
}

void StruUserMsgRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6009;
    user_id_ = 0;
    room_id_ = 0;
    if (has_msg_text()) {
      if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
        msg_text_->clear();
      }
    }
    is_private_ = false;
    dst_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserMsgRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_text;
        break;
      }
      
      // required string msg_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_text().data(), this->msg_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_private;
        break;
      }
      
      // required bool is_private = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_private:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_private_)));
          set_has_is_private();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserMsgRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required string msg_text = 4;
  if (has_msg_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_text().data(), this->msg_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg_text(), output);
  }
  
  // required bool is_private = 5;
  if (has_is_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_private(), output);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dst_user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserMsgRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required string msg_text = 4;
  if (has_msg_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_text().data(), this->msg_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_text(), target);
  }
  
  // required bool is_private = 5;
  if (has_is_private()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_private(), target);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dst_user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserMsgRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string msg_text = 4;
    if (has_msg_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_text());
    }
    
    // required bool is_private = 5;
    if (has_is_private()) {
      total_size += 1 + 1;
    }
    
    // required int32 dst_user_id = 6;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserMsgRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserMsgRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserMsgRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserMsgRQ::MergeFrom(const StruUserMsgRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_msg_text()) {
      set_msg_text(from.msg_text());
    }
    if (from.has_is_private()) {
      set_is_private(from.is_private());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserMsgRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserMsgRQ::CopyFrom(const StruUserMsgRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserMsgRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StruUserMsgRQ::Swap(StruUserMsgRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(msg_text_, other->msg_text_);
    std::swap(is_private_, other->is_private_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserMsgRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserMsgRQ_descriptor_;
  metadata.reflection = StruUserMsgRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserMsgRS::kMsgIdFieldNumber;
const int StruUserMsgRS::kUserIdFieldNumber;
const int StruUserMsgRS::kRoomIdFieldNumber;
const int StruUserMsgRS::kResultFieldNumber;
#endif  // !_MSC_VER

StruUserMsgRS::StruUserMsgRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserMsgRS::InitAsDefaultInstance() {
}

StruUserMsgRS::StruUserMsgRS(const StruUserMsgRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserMsgRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6010;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserMsgRS::~StruUserMsgRS() {
  SharedDtor();
}

void StruUserMsgRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserMsgRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserMsgRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserMsgRS_descriptor_;
}

const StruUserMsgRS& StruUserMsgRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserMsgRS* StruUserMsgRS::default_instance_ = NULL;

StruUserMsgRS* StruUserMsgRS::New() const {
  return new StruUserMsgRS;
}

void StruUserMsgRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6010;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserMsgRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserMsgRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserMsgRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserMsgRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserMsgRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserMsgRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserMsgRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserMsgRS::MergeFrom(const StruUserMsgRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserMsgRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserMsgRS::CopyFrom(const StruUserMsgRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserMsgRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruUserMsgRS::Swap(StruUserMsgRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserMsgRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserMsgRS_descriptor_;
  metadata.reflection = StruUserMsgRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserMsgTextID::kMsgIdFieldNumber;
const int StruUserMsgTextID::kUserIdFieldNumber;
const int StruUserMsgTextID::kRoomIdFieldNumber;
const int StruUserMsgTextID::kMsgTextFieldNumber;
const int StruUserMsgTextID::kIsPrivateFieldNumber;
const int StruUserMsgTextID::kDstUserIdFieldNumber;
#endif  // !_MSC_VER

StruUserMsgTextID::StruUserMsgTextID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserMsgTextID::InitAsDefaultInstance() {
}

StruUserMsgTextID::StruUserMsgTextID(const StruUserMsgTextID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserMsgTextID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6011;
  user_id_ = 0;
  room_id_ = 0;
  msg_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_private_ = false;
  dst_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserMsgTextID::~StruUserMsgTextID() {
  SharedDtor();
}

void StruUserMsgTextID::SharedDtor() {
  if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_text_;
  }
  if (this != default_instance_) {
  }
}

void StruUserMsgTextID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserMsgTextID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserMsgTextID_descriptor_;
}

const StruUserMsgTextID& StruUserMsgTextID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserMsgTextID* StruUserMsgTextID::default_instance_ = NULL;

StruUserMsgTextID* StruUserMsgTextID::New() const {
  return new StruUserMsgTextID;
}

void StruUserMsgTextID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6011;
    user_id_ = 0;
    room_id_ = 0;
    if (has_msg_text()) {
      if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
        msg_text_->clear();
      }
    }
    is_private_ = false;
    dst_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserMsgTextID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_text;
        break;
      }
      
      // required string msg_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_text().data(), this->msg_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_private;
        break;
      }
      
      // required bool is_private = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_private:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_private_)));
          set_has_is_private();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserMsgTextID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required string msg_text = 4;
  if (has_msg_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_text().data(), this->msg_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg_text(), output);
  }
  
  // required bool is_private = 5;
  if (has_is_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_private(), output);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dst_user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserMsgTextID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required string msg_text = 4;
  if (has_msg_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_text().data(), this->msg_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_text(), target);
  }
  
  // required bool is_private = 5;
  if (has_is_private()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_private(), target);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dst_user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserMsgTextID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string msg_text = 4;
    if (has_msg_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_text());
    }
    
    // required bool is_private = 5;
    if (has_is_private()) {
      total_size += 1 + 1;
    }
    
    // required int32 dst_user_id = 6;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserMsgTextID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserMsgTextID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserMsgTextID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserMsgTextID::MergeFrom(const StruUserMsgTextID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_msg_text()) {
      set_msg_text(from.msg_text());
    }
    if (from.has_is_private()) {
      set_is_private(from.is_private());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserMsgTextID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserMsgTextID::CopyFrom(const StruUserMsgTextID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserMsgTextID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StruUserMsgTextID::Swap(StruUserMsgTextID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(msg_text_, other->msg_text_);
    std::swap(is_private_, other->is_private_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserMsgTextID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserMsgTextID_descriptor_;
  metadata.reflection = StruUserMsgTextID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserGiveGiftRQ::kMsgIdFieldNumber;
const int StruUserGiveGiftRQ::kUserIdFieldNumber;
const int StruUserGiveGiftRQ::kRoomIdFieldNumber;
const int StruUserGiveGiftRQ::kGiftCodeFieldNumber;
const int StruUserGiveGiftRQ::kDstUserIdFieldNumber;
#endif  // !_MSC_VER

StruUserGiveGiftRQ::StruUserGiveGiftRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserGiveGiftRQ::InitAsDefaultInstance() {
}

StruUserGiveGiftRQ::StruUserGiveGiftRQ(const StruUserGiveGiftRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserGiveGiftRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6012;
  user_id_ = 0;
  room_id_ = 0;
  gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserGiveGiftRQ::~StruUserGiveGiftRQ() {
  SharedDtor();
}

void StruUserGiveGiftRQ::SharedDtor() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_code_;
  }
  if (this != default_instance_) {
  }
}

void StruUserGiveGiftRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserGiveGiftRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserGiveGiftRQ_descriptor_;
}

const StruUserGiveGiftRQ& StruUserGiveGiftRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserGiveGiftRQ* StruUserGiveGiftRQ::default_instance_ = NULL;

StruUserGiveGiftRQ* StruUserGiveGiftRQ::New() const {
  return new StruUserGiveGiftRQ;
}

void StruUserGiveGiftRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6012;
    user_id_ = 0;
    room_id_ = 0;
    if (has_gift_code()) {
      if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
        gift_code_->clear();
      }
    }
    dst_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserGiveGiftRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gift_code;
        break;
      }
      
      // required string gift_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_code().data(), this->gift_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserGiveGiftRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required string gift_code = 4;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gift_code(), output);
  }
  
  // required int32 dst_user_id = 5;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dst_user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserGiveGiftRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required string gift_code = 4;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gift_code(), target);
  }
  
  // required int32 dst_user_id = 5;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dst_user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserGiveGiftRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string gift_code = 4;
    if (has_gift_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_code());
    }
    
    // required int32 dst_user_id = 5;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserGiveGiftRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserGiveGiftRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserGiveGiftRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserGiveGiftRQ::MergeFrom(const StruUserGiveGiftRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_gift_code()) {
      set_gift_code(from.gift_code());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserGiveGiftRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserGiveGiftRQ::CopyFrom(const StruUserGiveGiftRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserGiveGiftRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserGiveGiftRQ::Swap(StruUserGiveGiftRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(gift_code_, other->gift_code_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserGiveGiftRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserGiveGiftRQ_descriptor_;
  metadata.reflection = StruUserGiveGiftRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserGiveGiftRS::kMsgIdFieldNumber;
const int StruUserGiveGiftRS::kUserIdFieldNumber;
const int StruUserGiveGiftRS::kRoomIdFieldNumber;
const int StruUserGiveGiftRS::kResultFieldNumber;
const int StruUserGiveGiftRS::kGiftCodeFieldNumber;
const int StruUserGiveGiftRS::kDstUserIdFieldNumber;
#endif  // !_MSC_VER

StruUserGiveGiftRS::StruUserGiveGiftRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserGiveGiftRS::InitAsDefaultInstance() {
}

StruUserGiveGiftRS::StruUserGiveGiftRS(const StruUserGiveGiftRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserGiveGiftRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6013;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserGiveGiftRS::~StruUserGiveGiftRS() {
  SharedDtor();
}

void StruUserGiveGiftRS::SharedDtor() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_code_;
  }
  if (this != default_instance_) {
  }
}

void StruUserGiveGiftRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserGiveGiftRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserGiveGiftRS_descriptor_;
}

const StruUserGiveGiftRS& StruUserGiveGiftRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserGiveGiftRS* StruUserGiveGiftRS::default_instance_ = NULL;

StruUserGiveGiftRS* StruUserGiveGiftRS::New() const {
  return new StruUserGiveGiftRS;
}

void StruUserGiveGiftRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6013;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
    if (has_gift_code()) {
      if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
        gift_code_->clear();
      }
    }
    dst_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserGiveGiftRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gift_code;
        break;
      }
      
      // required string gift_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_code().data(), this->gift_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserGiveGiftRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  // required string gift_code = 5;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gift_code(), output);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dst_user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserGiveGiftRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  // required string gift_code = 5;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gift_code(), target);
  }
  
  // required int32 dst_user_id = 6;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dst_user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserGiveGiftRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string gift_code = 5;
    if (has_gift_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_code());
    }
    
    // required int32 dst_user_id = 6;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserGiveGiftRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserGiveGiftRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserGiveGiftRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserGiveGiftRS::MergeFrom(const StruUserGiveGiftRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gift_code()) {
      set_gift_code(from.gift_code());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserGiveGiftRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserGiveGiftRS::CopyFrom(const StruUserGiveGiftRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserGiveGiftRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StruUserGiveGiftRS::Swap(StruUserGiveGiftRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(gift_code_, other->gift_code_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserGiveGiftRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserGiveGiftRS_descriptor_;
  metadata.reflection = StruUserGiveGiftRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserApplyMicRQ::kMsgIdFieldNumber;
const int StruUserApplyMicRQ::kUserIdFieldNumber;
const int StruUserApplyMicRQ::kRoomIdFieldNumber;
#endif  // !_MSC_VER

StruUserApplyMicRQ::StruUserApplyMicRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserApplyMicRQ::InitAsDefaultInstance() {
}

StruUserApplyMicRQ::StruUserApplyMicRQ(const StruUserApplyMicRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserApplyMicRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6014;
  user_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserApplyMicRQ::~StruUserApplyMicRQ() {
  SharedDtor();
}

void StruUserApplyMicRQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserApplyMicRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserApplyMicRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserApplyMicRQ_descriptor_;
}

const StruUserApplyMicRQ& StruUserApplyMicRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserApplyMicRQ* StruUserApplyMicRQ::default_instance_ = NULL;

StruUserApplyMicRQ* StruUserApplyMicRQ::New() const {
  return new StruUserApplyMicRQ;
}

void StruUserApplyMicRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6014;
    user_id_ = 0;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserApplyMicRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserApplyMicRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserApplyMicRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserApplyMicRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserApplyMicRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserApplyMicRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserApplyMicRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserApplyMicRQ::MergeFrom(const StruUserApplyMicRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserApplyMicRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserApplyMicRQ::CopyFrom(const StruUserApplyMicRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserApplyMicRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StruUserApplyMicRQ::Swap(StruUserApplyMicRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserApplyMicRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserApplyMicRQ_descriptor_;
  metadata.reflection = StruUserApplyMicRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserApplyMicRS::kMsgIdFieldNumber;
const int StruUserApplyMicRS::kUserIdFieldNumber;
const int StruUserApplyMicRS::kRoomIdFieldNumber;
const int StruUserApplyMicRS::kResultFieldNumber;
const int StruUserApplyMicRS::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruUserApplyMicRS::StruUserApplyMicRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserApplyMicRS::InitAsDefaultInstance() {
}

StruUserApplyMicRS::StruUserApplyMicRS(const StruUserApplyMicRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserApplyMicRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6015;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserApplyMicRS::~StruUserApplyMicRS() {
  SharedDtor();
}

void StruUserApplyMicRS::SharedDtor() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruUserApplyMicRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserApplyMicRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserApplyMicRS_descriptor_;
}

const StruUserApplyMicRS& StruUserApplyMicRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserApplyMicRS* StruUserApplyMicRS::default_instance_ = NULL;

StruUserApplyMicRS* StruUserApplyMicRS::New() const {
  return new StruUserApplyMicRS;
}

void StruUserApplyMicRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6015;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserApplyMicRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserApplyMicRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserApplyMicRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserApplyMicRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string mic_channel_str = 5;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserApplyMicRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserApplyMicRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserApplyMicRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserApplyMicRS::MergeFrom(const StruUserApplyMicRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserApplyMicRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserApplyMicRS::CopyFrom(const StruUserApplyMicRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserApplyMicRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserApplyMicRS::Swap(StruUserApplyMicRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserApplyMicRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserApplyMicRS_descriptor_;
  metadata.reflection = StruUserApplyMicRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserOnMicID::kMsgIdFieldNumber;
const int StruUserOnMicID::kMicUserIdFieldNumber;
const int StruUserOnMicID::kMicRoomIdFieldNumber;
const int StruUserOnMicID::kMicUserAccountNameFieldNumber;
const int StruUserOnMicID::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruUserOnMicID::StruUserOnMicID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserOnMicID::InitAsDefaultInstance() {
}

StruUserOnMicID::StruUserOnMicID(const StruUserOnMicID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserOnMicID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6016;
  mic_user_id_ = 0;
  mic_room_id_ = 0;
  mic_user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserOnMicID::~StruUserOnMicID() {
  SharedDtor();
}

void StruUserOnMicID::SharedDtor() {
  if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_user_account_name_;
  }
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruUserOnMicID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserOnMicID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserOnMicID_descriptor_;
}

const StruUserOnMicID& StruUserOnMicID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserOnMicID* StruUserOnMicID::default_instance_ = NULL;

StruUserOnMicID* StruUserOnMicID::New() const {
  return new StruUserOnMicID;
}

void StruUserOnMicID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6016;
    mic_user_id_ = 0;
    mic_room_id_ = 0;
    if (has_mic_user_account_name()) {
      if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        mic_user_account_name_->clear();
      }
    }
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserOnMicID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mic_user_id;
        break;
      }
      
      // required int32 mic_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_user_id_)));
          set_has_mic_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mic_room_id;
        break;
      }
      
      // required int32 mic_room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_room_id_)));
          set_has_mic_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mic_user_account_name;
        break;
      }
      
      // required string mic_user_account_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_user_account_name().data(), this->mic_user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserOnMicID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 mic_user_id = 2;
  if (has_mic_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mic_user_id(), output);
  }
  
  // required int32 mic_room_id = 3;
  if (has_mic_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mic_room_id(), output);
  }
  
  // required string mic_user_account_name = 4;
  if (has_mic_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_user_account_name().data(), this->mic_user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mic_user_account_name(), output);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserOnMicID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 mic_user_id = 2;
  if (has_mic_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mic_user_id(), target);
  }
  
  // required int32 mic_room_id = 3;
  if (has_mic_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mic_room_id(), target);
  }
  
  // required string mic_user_account_name = 4;
  if (has_mic_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_user_account_name().data(), this->mic_user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mic_user_account_name(), target);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserOnMicID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 mic_user_id = 2;
    if (has_mic_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_user_id());
    }
    
    // required int32 mic_room_id = 3;
    if (has_mic_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_room_id());
    }
    
    // required string mic_user_account_name = 4;
    if (has_mic_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_user_account_name());
    }
    
    // required string mic_channel_str = 5;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserOnMicID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserOnMicID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserOnMicID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserOnMicID::MergeFrom(const StruUserOnMicID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_mic_user_id()) {
      set_mic_user_id(from.mic_user_id());
    }
    if (from.has_mic_room_id()) {
      set_mic_room_id(from.mic_room_id());
    }
    if (from.has_mic_user_account_name()) {
      set_mic_user_account_name(from.mic_user_account_name());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserOnMicID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserOnMicID::CopyFrom(const StruUserOnMicID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserOnMicID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserOnMicID::Swap(StruUserOnMicID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(mic_user_id_, other->mic_user_id_);
    std::swap(mic_room_id_, other->mic_room_id_);
    std::swap(mic_user_account_name_, other->mic_user_account_name_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserOnMicID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserOnMicID_descriptor_;
  metadata.reflection = StruUserOnMicID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserOffMicRQ::kMsgIdFieldNumber;
const int StruUserOffMicRQ::kUserIdFieldNumber;
const int StruUserOffMicRQ::kRoomIdFieldNumber;
#endif  // !_MSC_VER

StruUserOffMicRQ::StruUserOffMicRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserOffMicRQ::InitAsDefaultInstance() {
}

StruUserOffMicRQ::StruUserOffMicRQ(const StruUserOffMicRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserOffMicRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6017;
  user_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserOffMicRQ::~StruUserOffMicRQ() {
  SharedDtor();
}

void StruUserOffMicRQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserOffMicRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserOffMicRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserOffMicRQ_descriptor_;
}

const StruUserOffMicRQ& StruUserOffMicRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserOffMicRQ* StruUserOffMicRQ::default_instance_ = NULL;

StruUserOffMicRQ* StruUserOffMicRQ::New() const {
  return new StruUserOffMicRQ;
}

void StruUserOffMicRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6017;
    user_id_ = 0;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserOffMicRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserOffMicRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserOffMicRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserOffMicRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserOffMicRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserOffMicRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserOffMicRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserOffMicRQ::MergeFrom(const StruUserOffMicRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserOffMicRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserOffMicRQ::CopyFrom(const StruUserOffMicRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserOffMicRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StruUserOffMicRQ::Swap(StruUserOffMicRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserOffMicRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserOffMicRQ_descriptor_;
  metadata.reflection = StruUserOffMicRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserOffMicRS::kMsgIdFieldNumber;
const int StruUserOffMicRS::kUserIdFieldNumber;
const int StruUserOffMicRS::kRoomIdFieldNumber;
const int StruUserOffMicRS::kResultFieldNumber;
#endif  // !_MSC_VER

StruUserOffMicRS::StruUserOffMicRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserOffMicRS::InitAsDefaultInstance() {
}

StruUserOffMicRS::StruUserOffMicRS(const StruUserOffMicRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserOffMicRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6018;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserOffMicRS::~StruUserOffMicRS() {
  SharedDtor();
}

void StruUserOffMicRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserOffMicRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserOffMicRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserOffMicRS_descriptor_;
}

const StruUserOffMicRS& StruUserOffMicRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserOffMicRS* StruUserOffMicRS::default_instance_ = NULL;

StruUserOffMicRS* StruUserOffMicRS::New() const {
  return new StruUserOffMicRS;
}

void StruUserOffMicRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6018;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserOffMicRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserOffMicRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserOffMicRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserOffMicRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserOffMicRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserOffMicRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserOffMicRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserOffMicRS::MergeFrom(const StruUserOffMicRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserOffMicRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserOffMicRS::CopyFrom(const StruUserOffMicRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserOffMicRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruUserOffMicRS::Swap(StruUserOffMicRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserOffMicRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserOffMicRS_descriptor_;
  metadata.reflection = StruUserOffMicRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserOffMicID::kMsgIdFieldNumber;
const int StruUserOffMicID::kMicUserIdFieldNumber;
const int StruUserOffMicID::kMicRoomIdFieldNumber;
const int StruUserOffMicID::kMicUserAccountNameFieldNumber;
const int StruUserOffMicID::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruUserOffMicID::StruUserOffMicID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserOffMicID::InitAsDefaultInstance() {
}

StruUserOffMicID::StruUserOffMicID(const StruUserOffMicID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserOffMicID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6019;
  mic_user_id_ = 0;
  mic_room_id_ = 0;
  mic_user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserOffMicID::~StruUserOffMicID() {
  SharedDtor();
}

void StruUserOffMicID::SharedDtor() {
  if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_user_account_name_;
  }
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruUserOffMicID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserOffMicID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserOffMicID_descriptor_;
}

const StruUserOffMicID& StruUserOffMicID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserOffMicID* StruUserOffMicID::default_instance_ = NULL;

StruUserOffMicID* StruUserOffMicID::New() const {
  return new StruUserOffMicID;
}

void StruUserOffMicID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6019;
    mic_user_id_ = 0;
    mic_room_id_ = 0;
    if (has_mic_user_account_name()) {
      if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
        mic_user_account_name_->clear();
      }
    }
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserOffMicID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mic_user_id;
        break;
      }
      
      // required int32 mic_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_user_id_)));
          set_has_mic_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mic_room_id;
        break;
      }
      
      // required int32 mic_room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_room_id_)));
          set_has_mic_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mic_user_account_name;
        break;
      }
      
      // required string mic_user_account_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_user_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_user_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_user_account_name().data(), this->mic_user_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserOffMicID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 mic_user_id = 2;
  if (has_mic_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mic_user_id(), output);
  }
  
  // required int32 mic_room_id = 3;
  if (has_mic_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mic_room_id(), output);
  }
  
  // required string mic_user_account_name = 4;
  if (has_mic_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_user_account_name().data(), this->mic_user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mic_user_account_name(), output);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserOffMicID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 mic_user_id = 2;
  if (has_mic_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mic_user_id(), target);
  }
  
  // required int32 mic_room_id = 3;
  if (has_mic_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mic_room_id(), target);
  }
  
  // required string mic_user_account_name = 4;
  if (has_mic_user_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_user_account_name().data(), this->mic_user_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mic_user_account_name(), target);
  }
  
  // required string mic_channel_str = 5;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserOffMicID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 mic_user_id = 2;
    if (has_mic_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_user_id());
    }
    
    // required int32 mic_room_id = 3;
    if (has_mic_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_room_id());
    }
    
    // required string mic_user_account_name = 4;
    if (has_mic_user_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_user_account_name());
    }
    
    // required string mic_channel_str = 5;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserOffMicID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserOffMicID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserOffMicID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserOffMicID::MergeFrom(const StruUserOffMicID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_mic_user_id()) {
      set_mic_user_id(from.mic_user_id());
    }
    if (from.has_mic_room_id()) {
      set_mic_room_id(from.mic_room_id());
    }
    if (from.has_mic_user_account_name()) {
      set_mic_user_account_name(from.mic_user_account_name());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserOffMicID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserOffMicID::CopyFrom(const StruUserOffMicID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserOffMicID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruUserOffMicID::Swap(StruUserOffMicID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(mic_user_id_, other->mic_user_id_);
    std::swap(mic_room_id_, other->mic_room_id_);
    std::swap(mic_user_account_name_, other->mic_user_account_name_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserOffMicID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserOffMicID_descriptor_;
  metadata.reflection = StruUserOffMicID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruPutUserOnMicRQ::kMsgIdFieldNumber;
const int StruPutUserOnMicRQ::kUserIdFieldNumber;
const int StruPutUserOnMicRQ::kRoomIdFieldNumber;
const int StruPutUserOnMicRQ::kDstUserIdFieldNumber;
const int StruPutUserOnMicRQ::kMicTypeFieldNumber;
#endif  // !_MSC_VER

StruPutUserOnMicRQ::StruPutUserOnMicRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruPutUserOnMicRQ::InitAsDefaultInstance() {
}

StruPutUserOnMicRQ::StruPutUserOnMicRQ(const StruPutUserOnMicRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruPutUserOnMicRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6020;
  user_id_ = 0;
  room_id_ = 0;
  dst_user_id_ = 0;
  mic_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruPutUserOnMicRQ::~StruPutUserOnMicRQ() {
  SharedDtor();
}

void StruPutUserOnMicRQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruPutUserOnMicRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruPutUserOnMicRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruPutUserOnMicRQ_descriptor_;
}

const StruPutUserOnMicRQ& StruPutUserOnMicRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruPutUserOnMicRQ* StruPutUserOnMicRQ::default_instance_ = NULL;

StruPutUserOnMicRQ* StruPutUserOnMicRQ::New() const {
  return new StruPutUserOnMicRQ;
}

void StruPutUserOnMicRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6020;
    user_id_ = 0;
    room_id_ = 0;
    dst_user_id_ = 0;
    mic_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruPutUserOnMicRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mic_type;
        break;
      }
      
      // required int32 mic_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_type_)));
          set_has_mic_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruPutUserOnMicRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_user_id(), output);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mic_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruPutUserOnMicRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_user_id(), target);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mic_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruPutUserOnMicRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 dst_user_id = 4;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
    // required int32 mic_type = 5;
    if (has_mic_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruPutUserOnMicRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruPutUserOnMicRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruPutUserOnMicRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruPutUserOnMicRQ::MergeFrom(const StruPutUserOnMicRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
    if (from.has_mic_type()) {
      set_mic_type(from.mic_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruPutUserOnMicRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruPutUserOnMicRQ::CopyFrom(const StruPutUserOnMicRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruPutUserOnMicRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StruPutUserOnMicRQ::Swap(StruPutUserOnMicRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(mic_type_, other->mic_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruPutUserOnMicRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruPutUserOnMicRQ_descriptor_;
  metadata.reflection = StruPutUserOnMicRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruPutUserOnMicRS::kMsgIdFieldNumber;
const int StruPutUserOnMicRS::kUserIdFieldNumber;
const int StruPutUserOnMicRS::kRoomIdFieldNumber;
const int StruPutUserOnMicRS::kDstUserIdFieldNumber;
const int StruPutUserOnMicRS::kMicTypeFieldNumber;
const int StruPutUserOnMicRS::kResultFieldNumber;
const int StruPutUserOnMicRS::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruPutUserOnMicRS::StruPutUserOnMicRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruPutUserOnMicRS::InitAsDefaultInstance() {
}

StruPutUserOnMicRS::StruPutUserOnMicRS(const StruPutUserOnMicRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruPutUserOnMicRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6021;
  user_id_ = 0;
  room_id_ = 0;
  dst_user_id_ = 0;
  mic_type_ = 0;
  result_ = 0;
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruPutUserOnMicRS::~StruPutUserOnMicRS() {
  SharedDtor();
}

void StruPutUserOnMicRS::SharedDtor() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruPutUserOnMicRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruPutUserOnMicRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruPutUserOnMicRS_descriptor_;
}

const StruPutUserOnMicRS& StruPutUserOnMicRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruPutUserOnMicRS* StruPutUserOnMicRS::default_instance_ = NULL;

StruPutUserOnMicRS* StruPutUserOnMicRS::New() const {
  return new StruPutUserOnMicRS;
}

void StruPutUserOnMicRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6021;
    user_id_ = 0;
    room_id_ = 0;
    dst_user_id_ = 0;
    mic_type_ = 0;
    result_ = 0;
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruPutUserOnMicRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mic_type;
        break;
      }
      
      // required int32 mic_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_type_)));
          set_has_mic_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }
      
      // required int32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruPutUserOnMicRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_user_id(), output);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mic_type(), output);
  }
  
  // required int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }
  
  // required string mic_channel_str = 7;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruPutUserOnMicRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_user_id(), target);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mic_type(), target);
  }
  
  // required int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }
  
  // required string mic_channel_str = 7;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruPutUserOnMicRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 dst_user_id = 4;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
    // required int32 mic_type = 5;
    if (has_mic_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_type());
    }
    
    // required int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string mic_channel_str = 7;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruPutUserOnMicRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruPutUserOnMicRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruPutUserOnMicRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruPutUserOnMicRS::MergeFrom(const StruPutUserOnMicRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
    if (from.has_mic_type()) {
      set_mic_type(from.mic_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruPutUserOnMicRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruPutUserOnMicRS::CopyFrom(const StruPutUserOnMicRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruPutUserOnMicRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void StruPutUserOnMicRS::Swap(StruPutUserOnMicRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(mic_type_, other->mic_type_);
    std::swap(result_, other->result_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruPutUserOnMicRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruPutUserOnMicRS_descriptor_;
  metadata.reflection = StruPutUserOnMicRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruCancleUserMicRQ::kMsgIdFieldNumber;
const int StruCancleUserMicRQ::kUserIdFieldNumber;
const int StruCancleUserMicRQ::kRoomIdFieldNumber;
const int StruCancleUserMicRQ::kDstUserIdFieldNumber;
const int StruCancleUserMicRQ::kMicTypeFieldNumber;
const int StruCancleUserMicRQ::kMicChannelStrFieldNumber;
#endif  // !_MSC_VER

StruCancleUserMicRQ::StruCancleUserMicRQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruCancleUserMicRQ::InitAsDefaultInstance() {
}

StruCancleUserMicRQ::StruCancleUserMicRQ(const StruCancleUserMicRQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruCancleUserMicRQ::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6022;
  user_id_ = 0;
  room_id_ = 0;
  dst_user_id_ = 0;
  mic_type_ = 0;
  mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruCancleUserMicRQ::~StruCancleUserMicRQ() {
  SharedDtor();
}

void StruCancleUserMicRQ::SharedDtor() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_channel_str_;
  }
  if (this != default_instance_) {
  }
}

void StruCancleUserMicRQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruCancleUserMicRQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruCancleUserMicRQ_descriptor_;
}

const StruCancleUserMicRQ& StruCancleUserMicRQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruCancleUserMicRQ* StruCancleUserMicRQ::default_instance_ = NULL;

StruCancleUserMicRQ* StruCancleUserMicRQ::New() const {
  return new StruCancleUserMicRQ;
}

void StruCancleUserMicRQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6022;
    user_id_ = 0;
    room_id_ = 0;
    dst_user_id_ = 0;
    mic_type_ = 0;
    if (has_mic_channel_str()) {
      if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        mic_channel_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruCancleUserMicRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_user_id;
        break;
      }
      
      // required int32 dst_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_user_id_)));
          set_has_dst_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mic_type;
        break;
      }
      
      // required int32 mic_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mic_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_type_)));
          set_has_mic_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mic_channel_str;
        break;
      }
      
      // required string mic_channel_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_channel_str().data(), this->mic_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruCancleUserMicRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_user_id(), output);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mic_type(), output);
  }
  
  // required string mic_channel_str = 6;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mic_channel_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruCancleUserMicRQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 dst_user_id = 4;
  if (has_dst_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_user_id(), target);
  }
  
  // required int32 mic_type = 5;
  if (has_mic_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mic_type(), target);
  }
  
  // required string mic_channel_str = 6;
  if (has_mic_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_channel_str().data(), this->mic_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mic_channel_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruCancleUserMicRQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 dst_user_id = 4;
    if (has_dst_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_user_id());
    }
    
    // required int32 mic_type = 5;
    if (has_mic_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_type());
    }
    
    // required string mic_channel_str = 6;
    if (has_mic_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_channel_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruCancleUserMicRQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruCancleUserMicRQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruCancleUserMicRQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruCancleUserMicRQ::MergeFrom(const StruCancleUserMicRQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dst_user_id()) {
      set_dst_user_id(from.dst_user_id());
    }
    if (from.has_mic_type()) {
      set_mic_type(from.mic_type());
    }
    if (from.has_mic_channel_str()) {
      set_mic_channel_str(from.mic_channel_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruCancleUserMicRQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruCancleUserMicRQ::CopyFrom(const StruCancleUserMicRQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruCancleUserMicRQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StruCancleUserMicRQ::Swap(StruCancleUserMicRQ* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(dst_user_id_, other->dst_user_id_);
    std::swap(mic_type_, other->mic_type_);
    std::swap(mic_channel_str_, other->mic_channel_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruCancleUserMicRQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruCancleUserMicRQ_descriptor_;
  metadata.reflection = StruCancleUserMicRQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruCancleUserMicRS::kMsgIdFieldNumber;
const int StruCancleUserMicRS::kUserIdFieldNumber;
const int StruCancleUserMicRS::kRoomIdFieldNumber;
const int StruCancleUserMicRS::kResultFieldNumber;
#endif  // !_MSC_VER

StruCancleUserMicRS::StruCancleUserMicRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruCancleUserMicRS::InitAsDefaultInstance() {
}

StruCancleUserMicRS::StruCancleUserMicRS(const StruCancleUserMicRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruCancleUserMicRS::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6023;
  user_id_ = 0;
  room_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruCancleUserMicRS::~StruCancleUserMicRS() {
  SharedDtor();
}

void StruCancleUserMicRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruCancleUserMicRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruCancleUserMicRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruCancleUserMicRS_descriptor_;
}

const StruCancleUserMicRS& StruCancleUserMicRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruCancleUserMicRS* StruCancleUserMicRS::default_instance_ = NULL;

StruCancleUserMicRS* StruCancleUserMicRS::New() const {
  return new StruCancleUserMicRS;
}

void StruCancleUserMicRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6023;
    user_id_ = 0;
    room_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruCancleUserMicRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruCancleUserMicRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruCancleUserMicRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruCancleUserMicRS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruCancleUserMicRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruCancleUserMicRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruCancleUserMicRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruCancleUserMicRS::MergeFrom(const StruCancleUserMicRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruCancleUserMicRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruCancleUserMicRS::CopyFrom(const StruCancleUserMicRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruCancleUserMicRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StruCancleUserMicRS::Swap(StruCancleUserMicRS* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruCancleUserMicRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruCancleUserMicRS_descriptor_;
  metadata.reflection = StruCancleUserMicRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StruUserExitRoomID::kMsgIdFieldNumber;
const int StruUserExitRoomID::kUserIdFieldNumber;
const int StruUserExitRoomID::kRoomIdFieldNumber;
#endif  // !_MSC_VER

StruUserExitRoomID::StruUserExitRoomID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StruUserExitRoomID::InitAsDefaultInstance() {
}

StruUserExitRoomID::StruUserExitRoomID(const StruUserExitRoomID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StruUserExitRoomID::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 6024;
  user_id_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StruUserExitRoomID::~StruUserExitRoomID() {
  SharedDtor();
}

void StruUserExitRoomID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StruUserExitRoomID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StruUserExitRoomID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StruUserExitRoomID_descriptor_;
}

const StruUserExitRoomID& StruUserExitRoomID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_5fdefine_2eproto();  return *default_instance_;
}

StruUserExitRoomID* StruUserExitRoomID::default_instance_ = NULL;

StruUserExitRoomID* StruUserExitRoomID::New() const {
  return new StruUserExitRoomID;
}

void StruUserExitRoomID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 6024;
    user_id_ = 0;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StruUserExitRoomID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EnumMsgID_IsValid(value)) {
            set_msg_id(static_cast< EnumMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }
      
      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StruUserExitRoomID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StruUserExitRoomID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StruUserExitRoomID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StruUserExitRoomID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StruUserExitRoomID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StruUserExitRoomID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StruUserExitRoomID::MergeFrom(const StruUserExitRoomID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StruUserExitRoomID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StruUserExitRoomID::CopyFrom(const StruUserExitRoomID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StruUserExitRoomID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StruUserExitRoomID::Swap(StruUserExitRoomID* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StruUserExitRoomID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StruUserExitRoomID_descriptor_;
  metadata.reflection = StruUserExitRoomID_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
