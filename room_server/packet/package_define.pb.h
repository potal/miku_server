// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package_define.proto

#ifndef PROTOBUF_package_5fdefine_2eproto__INCLUDED
#define PROTOBUF_package_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_package_5fdefine_2eproto();
void protobuf_AssignDesc_package_5fdefine_2eproto();
void protobuf_ShutdownFile_package_5fdefine_2eproto();

class StruUserLoginRQ;
class StruUserLoginRS;
class StruUserRoleInfoID;
class StruRoomInfoID;
class StruMicInfo;
class StruRoomMicInfoID;
class StruUserInfo;
class StruUserInfoListID;
class StruUserMsgRQ;
class StruUserMsgRS;
class StruUserMsgTextID;
class StruUserGiveGiftRQ;
class StruUserGiveGiftRS;
class StruUserApplyMicRQ;
class StruUserApplyMicRS;
class StruUserOnMicID;
class StruUserOffMicRQ;
class StruUserOffMicRS;
class StruUserOffMicID;
class StruPutUserOnMicRQ;
class StruPutUserOnMicRS;
class StruCancleUserMicRQ;
class StruCancleUserMicRS;
class StruUserExitRoomID;

enum EnumMsgID {
  E_MSG_ID_BASE = 6000,
  E_USER_LOGIN_RQ = 6001,
  E_USER_LOGIN_RS = 6002,
  E_USER_ROLE_INFO_ID = 6003,
  E_ROOM_INFO_ID = 6004,
  E_MIC_INFO = 6005,
  E_ROOM_MIC_INFO_ID = 6006,
  E_USER_INFO = 6007,
  E_USER_INFO_LIST_ID = 6008,
  E_USER_MSG_RQ = 6009,
  E_USER_MSG_RS = 6010,
  E_USER_MSG_TEXT_ID = 6011,
  E_USER_GIVE_GIFT_RQ = 6012,
  E_USER_GIVE_GIFT_RS = 6013,
  E_USER_APPLY_MIC_RQ = 6014,
  E_USER_APPLY_MIC_RS = 6015,
  E_USER_ON_MIC_ID = 6016,
  E_USER_OFF_MIC_RQ = 6017,
  E_USER_OFF_MIC_RS = 6018,
  E_USER_OFF_MIC_ID = 6019,
  E_PUT_USER_ON_MIC_RQ = 6020,
  E_PUT_USER_ON_MIC_RS = 6021,
  E_CANCLE_USER_MIC_RQ = 6022,
  E_CANCLE_USER_MIC_RS = 6023,
  E_USER_EXIT_ROOM_ID = 6024
};
bool EnumMsgID_IsValid(int value);
const EnumMsgID EnumMsgID_MIN = E_MSG_ID_BASE;
const EnumMsgID EnumMsgID_MAX = E_USER_EXIT_ROOM_ID;
const int EnumMsgID_ARRAYSIZE = EnumMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumMsgID_descriptor();
inline const ::std::string& EnumMsgID_Name(EnumMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumMsgID_descriptor(), value);
}
inline bool EnumMsgID_Parse(
    const ::std::string& name, EnumMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumMsgID>(
    EnumMsgID_descriptor(), name, value);
}
// ===================================================================

class StruUserLoginRQ : public ::google::protobuf::Message {
 public:
  StruUserLoginRQ();
  virtual ~StruUserLoginRQ();
  
  StruUserLoginRQ(const StruUserLoginRQ& from);
  
  inline StruUserLoginRQ& operator=(const StruUserLoginRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserLoginRQ& default_instance();
  
  void Swap(StruUserLoginRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruUserLoginRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserLoginRQ& from);
  void MergeFrom(const StruUserLoginRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required string user_psw = 4;
  inline bool has_user_psw() const;
  inline void clear_user_psw();
  static const int kUserPswFieldNumber = 4;
  inline const ::std::string& user_psw() const;
  inline void set_user_psw(const ::std::string& value);
  inline void set_user_psw(const char* value);
  inline void set_user_psw(const char* value, size_t size);
  inline ::std::string* mutable_user_psw();
  inline ::std::string* release_user_psw();
  
  // required string user_account_name = 5;
  inline bool has_user_account_name() const;
  inline void clear_user_account_name();
  static const int kUserAccountNameFieldNumber = 5;
  inline const ::std::string& user_account_name() const;
  inline void set_user_account_name(const ::std::string& value);
  inline void set_user_account_name(const char* value);
  inline void set_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_user_account_name();
  inline ::std::string* release_user_account_name();
  
  // @@protoc_insertion_point(class_scope:StruUserLoginRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_user_psw();
  inline void clear_has_user_psw();
  inline void set_has_user_account_name();
  inline void clear_has_user_account_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_psw_;
  ::std::string* user_account_name_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserLoginRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruUserLoginRS : public ::google::protobuf::Message {
 public:
  StruUserLoginRS();
  virtual ~StruUserLoginRS();
  
  StruUserLoginRS(const StruUserLoginRS& from);
  
  inline StruUserLoginRS& operator=(const StruUserLoginRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserLoginRS& default_instance();
  
  void Swap(StruUserLoginRS* other);
  
  // implements Message ----------------------------------------------
  
  StruUserLoginRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserLoginRS& from);
  void MergeFrom(const StruUserLoginRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserLoginRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserLoginRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserRoleInfoID : public ::google::protobuf::Message {
 public:
  StruUserRoleInfoID();
  virtual ~StruUserRoleInfoID();
  
  StruUserRoleInfoID(const StruUserRoleInfoID& from);
  
  inline StruUserRoleInfoID& operator=(const StruUserRoleInfoID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserRoleInfoID& default_instance();
  
  void Swap(StruUserRoleInfoID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserRoleInfoID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserRoleInfoID& from);
  void MergeFrom(const StruUserRoleInfoID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required string user_account_name = 4;
  inline bool has_user_account_name() const;
  inline void clear_user_account_name();
  static const int kUserAccountNameFieldNumber = 4;
  inline const ::std::string& user_account_name() const;
  inline void set_user_account_name(const ::std::string& value);
  inline void set_user_account_name(const char* value);
  inline void set_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_user_account_name();
  inline ::std::string* release_user_account_name();
  
  // required string user_role_uid = 5;
  inline bool has_user_role_uid() const;
  inline void clear_user_role_uid();
  static const int kUserRoleUidFieldNumber = 5;
  inline const ::std::string& user_role_uid() const;
  inline void set_user_role_uid(const ::std::string& value);
  inline void set_user_role_uid(const char* value);
  inline void set_user_role_uid(const char* value, size_t size);
  inline ::std::string* mutable_user_role_uid();
  inline ::std::string* release_user_role_uid();
  
  // optional string other_data = 6;
  inline bool has_other_data() const;
  inline void clear_other_data();
  static const int kOtherDataFieldNumber = 6;
  inline const ::std::string& other_data() const;
  inline void set_other_data(const ::std::string& value);
  inline void set_other_data(const char* value);
  inline void set_other_data(const char* value, size_t size);
  inline ::std::string* mutable_other_data();
  inline ::std::string* release_other_data();
  
  // @@protoc_insertion_point(class_scope:StruUserRoleInfoID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_user_account_name();
  inline void clear_has_user_account_name();
  inline void set_has_user_role_uid();
  inline void clear_has_user_role_uid();
  inline void set_has_other_data();
  inline void clear_has_other_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_account_name_;
  ::std::string* user_role_uid_;
  ::std::string* other_data_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserRoleInfoID* default_instance_;
};
// -------------------------------------------------------------------

class StruRoomInfoID : public ::google::protobuf::Message {
 public:
  StruRoomInfoID();
  virtual ~StruRoomInfoID();
  
  StruRoomInfoID(const StruRoomInfoID& from);
  
  inline StruRoomInfoID& operator=(const StruRoomInfoID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruRoomInfoID& default_instance();
  
  void Swap(StruRoomInfoID* other);
  
  // implements Message ----------------------------------------------
  
  StruRoomInfoID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruRoomInfoID& from);
  void MergeFrom(const StruRoomInfoID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 room_type = 4;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 4;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);
  
  // required string room_name = 5;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 5;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  
  // required string room_advert = 6;
  inline bool has_room_advert() const;
  inline void clear_room_advert();
  static const int kRoomAdvertFieldNumber = 6;
  inline const ::std::string& room_advert() const;
  inline void set_room_advert(const ::std::string& value);
  inline void set_room_advert(const char* value);
  inline void set_room_advert(const char* value, size_t size);
  inline ::std::string* mutable_room_advert();
  inline ::std::string* release_room_advert();
  
  // required string room_announce = 7;
  inline bool has_room_announce() const;
  inline void clear_room_announce();
  static const int kRoomAnnounceFieldNumber = 7;
  inline const ::std::string& room_announce() const;
  inline void set_room_announce(const ::std::string& value);
  inline void set_room_announce(const char* value);
  inline void set_room_announce(const char* value, size_t size);
  inline ::std::string* mutable_room_announce();
  inline ::std::string* release_room_announce();
  
  // @@protoc_insertion_point(class_scope:StruRoomInfoID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_room_advert();
  inline void clear_has_room_advert();
  inline void set_has_room_announce();
  inline void clear_has_room_announce();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 room_type_;
  ::std::string* room_name_;
  ::std::string* room_advert_;
  ::std::string* room_announce_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruRoomInfoID* default_instance_;
};
// -------------------------------------------------------------------

class StruMicInfo : public ::google::protobuf::Message {
 public:
  StruMicInfo();
  virtual ~StruMicInfo();
  
  StruMicInfo(const StruMicInfo& from);
  
  inline StruMicInfo& operator=(const StruMicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruMicInfo& default_instance();
  
  void Swap(StruMicInfo* other);
  
  // implements Message ----------------------------------------------
  
  StruMicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruMicInfo& from);
  void MergeFrom(const StruMicInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required string user_account_name = 3;
  inline bool has_user_account_name() const;
  inline void clear_user_account_name();
  static const int kUserAccountNameFieldNumber = 3;
  inline const ::std::string& user_account_name() const;
  inline void set_user_account_name(const ::std::string& value);
  inline void set_user_account_name(const char* value);
  inline void set_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_user_account_name();
  inline ::std::string* release_user_account_name();
  
  // required string mic_channel_str = 4;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 4;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruMicInfo)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_account_name();
  inline void clear_has_user_account_name();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_account_name_;
  ::std::string* mic_channel_str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruMicInfo* default_instance_;
};
// -------------------------------------------------------------------

class StruRoomMicInfoID : public ::google::protobuf::Message {
 public:
  StruRoomMicInfoID();
  virtual ~StruRoomMicInfoID();
  
  StruRoomMicInfoID(const StruRoomMicInfoID& from);
  
  inline StruRoomMicInfoID& operator=(const StruRoomMicInfoID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruRoomMicInfoID& default_instance();
  
  void Swap(StruRoomMicInfoID* other);
  
  // implements Message ----------------------------------------------
  
  StruRoomMicInfoID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruRoomMicInfoID& from);
  void MergeFrom(const StruRoomMicInfoID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // repeated .StruMicInfo mic_list = 4;
  inline int mic_list_size() const;
  inline void clear_mic_list();
  static const int kMicListFieldNumber = 4;
  inline const ::StruMicInfo& mic_list(int index) const;
  inline ::StruMicInfo* mutable_mic_list(int index);
  inline ::StruMicInfo* add_mic_list();
  inline const ::google::protobuf::RepeatedPtrField< ::StruMicInfo >&
      mic_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::StruMicInfo >*
      mutable_mic_list();
  
  // @@protoc_insertion_point(class_scope:StruRoomMicInfoID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::StruMicInfo > mic_list_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruRoomMicInfoID* default_instance_;
};
// -------------------------------------------------------------------

class StruUserInfo : public ::google::protobuf::Message {
 public:
  StruUserInfo();
  virtual ~StruUserInfo();
  
  StruUserInfo(const StruUserInfo& from);
  
  inline StruUserInfo& operator=(const StruUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserInfo& default_instance();
  
  void Swap(StruUserInfo* other);
  
  // implements Message ----------------------------------------------
  
  StruUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserInfo& from);
  void MergeFrom(const StruUserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required string user_account_name = 3;
  inline bool has_user_account_name() const;
  inline void clear_user_account_name();
  static const int kUserAccountNameFieldNumber = 3;
  inline const ::std::string& user_account_name() const;
  inline void set_user_account_name(const ::std::string& value);
  inline void set_user_account_name(const char* value);
  inline void set_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_user_account_name();
  inline ::std::string* release_user_account_name();
  
  // required string user_role_uid = 4;
  inline bool has_user_role_uid() const;
  inline void clear_user_role_uid();
  static const int kUserRoleUidFieldNumber = 4;
  inline const ::std::string& user_role_uid() const;
  inline void set_user_role_uid(const ::std::string& value);
  inline void set_user_role_uid(const char* value);
  inline void set_user_role_uid(const char* value, size_t size);
  inline ::std::string* mutable_user_role_uid();
  inline ::std::string* release_user_role_uid();
  
  // @@protoc_insertion_point(class_scope:StruUserInfo)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_account_name();
  inline void clear_has_user_account_name();
  inline void set_has_user_role_uid();
  inline void clear_has_user_role_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_account_name_;
  ::std::string* user_role_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class StruUserInfoListID : public ::google::protobuf::Message {
 public:
  StruUserInfoListID();
  virtual ~StruUserInfoListID();
  
  StruUserInfoListID(const StruUserInfoListID& from);
  
  inline StruUserInfoListID& operator=(const StruUserInfoListID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserInfoListID& default_instance();
  
  void Swap(StruUserInfoListID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserInfoListID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserInfoListID& from);
  void MergeFrom(const StruUserInfoListID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // repeated .StruUserInfo user_info_list = 4;
  inline int user_info_list_size() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 4;
  inline const ::StruUserInfo& user_info_list(int index) const;
  inline ::StruUserInfo* mutable_user_info_list(int index);
  inline ::StruUserInfo* add_user_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::StruUserInfo >&
      user_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::StruUserInfo >*
      mutable_user_info_list();
  
  // @@protoc_insertion_point(class_scope:StruUserInfoListID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::StruUserInfo > user_info_list_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserInfoListID* default_instance_;
};
// -------------------------------------------------------------------

class StruUserMsgRQ : public ::google::protobuf::Message {
 public:
  StruUserMsgRQ();
  virtual ~StruUserMsgRQ();
  
  StruUserMsgRQ(const StruUserMsgRQ& from);
  
  inline StruUserMsgRQ& operator=(const StruUserMsgRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserMsgRQ& default_instance();
  
  void Swap(StruUserMsgRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruUserMsgRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserMsgRQ& from);
  void MergeFrom(const StruUserMsgRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required string msg_text = 4;
  inline bool has_msg_text() const;
  inline void clear_msg_text();
  static const int kMsgTextFieldNumber = 4;
  inline const ::std::string& msg_text() const;
  inline void set_msg_text(const ::std::string& value);
  inline void set_msg_text(const char* value);
  inline void set_msg_text(const char* value, size_t size);
  inline ::std::string* mutable_msg_text();
  inline ::std::string* release_msg_text();
  
  // required bool is_private = 5;
  inline bool has_is_private() const;
  inline void clear_is_private();
  static const int kIsPrivateFieldNumber = 5;
  inline bool is_private() const;
  inline void set_is_private(bool value);
  
  // required int32 dst_user_id = 6;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 6;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserMsgRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_msg_text();
  inline void clear_has_msg_text();
  inline void set_has_is_private();
  inline void clear_has_is_private();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* msg_text_;
  ::google::protobuf::int32 room_id_;
  bool is_private_;
  ::google::protobuf::int32 dst_user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserMsgRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruUserMsgRS : public ::google::protobuf::Message {
 public:
  StruUserMsgRS();
  virtual ~StruUserMsgRS();
  
  StruUserMsgRS(const StruUserMsgRS& from);
  
  inline StruUserMsgRS& operator=(const StruUserMsgRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserMsgRS& default_instance();
  
  void Swap(StruUserMsgRS* other);
  
  // implements Message ----------------------------------------------
  
  StruUserMsgRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserMsgRS& from);
  void MergeFrom(const StruUserMsgRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserMsgRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserMsgRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserMsgTextID : public ::google::protobuf::Message {
 public:
  StruUserMsgTextID();
  virtual ~StruUserMsgTextID();
  
  StruUserMsgTextID(const StruUserMsgTextID& from);
  
  inline StruUserMsgTextID& operator=(const StruUserMsgTextID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserMsgTextID& default_instance();
  
  void Swap(StruUserMsgTextID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserMsgTextID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserMsgTextID& from);
  void MergeFrom(const StruUserMsgTextID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required string msg_text = 4;
  inline bool has_msg_text() const;
  inline void clear_msg_text();
  static const int kMsgTextFieldNumber = 4;
  inline const ::std::string& msg_text() const;
  inline void set_msg_text(const ::std::string& value);
  inline void set_msg_text(const char* value);
  inline void set_msg_text(const char* value, size_t size);
  inline ::std::string* mutable_msg_text();
  inline ::std::string* release_msg_text();
  
  // required bool is_private = 5;
  inline bool has_is_private() const;
  inline void clear_is_private();
  static const int kIsPrivateFieldNumber = 5;
  inline bool is_private() const;
  inline void set_is_private(bool value);
  
  // required int32 dst_user_id = 6;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 6;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserMsgTextID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_msg_text();
  inline void clear_has_msg_text();
  inline void set_has_is_private();
  inline void clear_has_is_private();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* msg_text_;
  ::google::protobuf::int32 room_id_;
  bool is_private_;
  ::google::protobuf::int32 dst_user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserMsgTextID* default_instance_;
};
// -------------------------------------------------------------------

class StruUserGiveGiftRQ : public ::google::protobuf::Message {
 public:
  StruUserGiveGiftRQ();
  virtual ~StruUserGiveGiftRQ();
  
  StruUserGiveGiftRQ(const StruUserGiveGiftRQ& from);
  
  inline StruUserGiveGiftRQ& operator=(const StruUserGiveGiftRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserGiveGiftRQ& default_instance();
  
  void Swap(StruUserGiveGiftRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruUserGiveGiftRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserGiveGiftRQ& from);
  void MergeFrom(const StruUserGiveGiftRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required string gift_code = 4;
  inline bool has_gift_code() const;
  inline void clear_gift_code();
  static const int kGiftCodeFieldNumber = 4;
  inline const ::std::string& gift_code() const;
  inline void set_gift_code(const ::std::string& value);
  inline void set_gift_code(const char* value);
  inline void set_gift_code(const char* value, size_t size);
  inline ::std::string* mutable_gift_code();
  inline ::std::string* release_gift_code();
  
  // required int32 dst_user_id = 5;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 5;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserGiveGiftRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_gift_code();
  inline void clear_has_gift_code();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::std::string* gift_code_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 dst_user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserGiveGiftRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruUserGiveGiftRS : public ::google::protobuf::Message {
 public:
  StruUserGiveGiftRS();
  virtual ~StruUserGiveGiftRS();
  
  StruUserGiveGiftRS(const StruUserGiveGiftRS& from);
  
  inline StruUserGiveGiftRS& operator=(const StruUserGiveGiftRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserGiveGiftRS& default_instance();
  
  void Swap(StruUserGiveGiftRS* other);
  
  // implements Message ----------------------------------------------
  
  StruUserGiveGiftRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserGiveGiftRS& from);
  void MergeFrom(const StruUserGiveGiftRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required string gift_code = 5;
  inline bool has_gift_code() const;
  inline void clear_gift_code();
  static const int kGiftCodeFieldNumber = 5;
  inline const ::std::string& gift_code() const;
  inline void set_gift_code(const ::std::string& value);
  inline void set_gift_code(const char* value);
  inline void set_gift_code(const char* value, size_t size);
  inline ::std::string* mutable_gift_code();
  inline ::std::string* release_gift_code();
  
  // required int32 dst_user_id = 6;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 6;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserGiveGiftRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gift_code();
  inline void clear_has_gift_code();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  ::std::string* gift_code_;
  ::google::protobuf::int32 dst_user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserGiveGiftRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserApplyMicRQ : public ::google::protobuf::Message {
 public:
  StruUserApplyMicRQ();
  virtual ~StruUserApplyMicRQ();
  
  StruUserApplyMicRQ(const StruUserApplyMicRQ& from);
  
  inline StruUserApplyMicRQ& operator=(const StruUserApplyMicRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserApplyMicRQ& default_instance();
  
  void Swap(StruUserApplyMicRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruUserApplyMicRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserApplyMicRQ& from);
  void MergeFrom(const StruUserApplyMicRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserApplyMicRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserApplyMicRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruUserApplyMicRS : public ::google::protobuf::Message {
 public:
  StruUserApplyMicRS();
  virtual ~StruUserApplyMicRS();
  
  StruUserApplyMicRS(const StruUserApplyMicRS& from);
  
  inline StruUserApplyMicRS& operator=(const StruUserApplyMicRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserApplyMicRS& default_instance();
  
  void Swap(StruUserApplyMicRS* other);
  
  // implements Message ----------------------------------------------
  
  StruUserApplyMicRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserApplyMicRS& from);
  void MergeFrom(const StruUserApplyMicRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required string mic_channel_str = 5;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 5;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruUserApplyMicRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  ::std::string* mic_channel_str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserApplyMicRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserOnMicID : public ::google::protobuf::Message {
 public:
  StruUserOnMicID();
  virtual ~StruUserOnMicID();
  
  StruUserOnMicID(const StruUserOnMicID& from);
  
  inline StruUserOnMicID& operator=(const StruUserOnMicID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserOnMicID& default_instance();
  
  void Swap(StruUserOnMicID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserOnMicID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserOnMicID& from);
  void MergeFrom(const StruUserOnMicID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 mic_user_id = 2;
  inline bool has_mic_user_id() const;
  inline void clear_mic_user_id();
  static const int kMicUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 mic_user_id() const;
  inline void set_mic_user_id(::google::protobuf::int32 value);
  
  // required int32 mic_room_id = 3;
  inline bool has_mic_room_id() const;
  inline void clear_mic_room_id();
  static const int kMicRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 mic_room_id() const;
  inline void set_mic_room_id(::google::protobuf::int32 value);
  
  // required string mic_user_account_name = 4;
  inline bool has_mic_user_account_name() const;
  inline void clear_mic_user_account_name();
  static const int kMicUserAccountNameFieldNumber = 4;
  inline const ::std::string& mic_user_account_name() const;
  inline void set_mic_user_account_name(const ::std::string& value);
  inline void set_mic_user_account_name(const char* value);
  inline void set_mic_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_mic_user_account_name();
  inline ::std::string* release_mic_user_account_name();
  
  // required string mic_channel_str = 5;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 5;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruUserOnMicID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_mic_user_id();
  inline void clear_has_mic_user_id();
  inline void set_has_mic_room_id();
  inline void clear_has_mic_room_id();
  inline void set_has_mic_user_account_name();
  inline void clear_has_mic_user_account_name();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 mic_user_id_;
  ::std::string* mic_user_account_name_;
  ::std::string* mic_channel_str_;
  ::google::protobuf::int32 mic_room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserOnMicID* default_instance_;
};
// -------------------------------------------------------------------

class StruUserOffMicRQ : public ::google::protobuf::Message {
 public:
  StruUserOffMicRQ();
  virtual ~StruUserOffMicRQ();
  
  StruUserOffMicRQ(const StruUserOffMicRQ& from);
  
  inline StruUserOffMicRQ& operator=(const StruUserOffMicRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserOffMicRQ& default_instance();
  
  void Swap(StruUserOffMicRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruUserOffMicRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserOffMicRQ& from);
  void MergeFrom(const StruUserOffMicRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserOffMicRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserOffMicRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruUserOffMicRS : public ::google::protobuf::Message {
 public:
  StruUserOffMicRS();
  virtual ~StruUserOffMicRS();
  
  StruUserOffMicRS(const StruUserOffMicRS& from);
  
  inline StruUserOffMicRS& operator=(const StruUserOffMicRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserOffMicRS& default_instance();
  
  void Swap(StruUserOffMicRS* other);
  
  // implements Message ----------------------------------------------
  
  StruUserOffMicRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserOffMicRS& from);
  void MergeFrom(const StruUserOffMicRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserOffMicRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserOffMicRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserOffMicID : public ::google::protobuf::Message {
 public:
  StruUserOffMicID();
  virtual ~StruUserOffMicID();
  
  StruUserOffMicID(const StruUserOffMicID& from);
  
  inline StruUserOffMicID& operator=(const StruUserOffMicID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserOffMicID& default_instance();
  
  void Swap(StruUserOffMicID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserOffMicID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserOffMicID& from);
  void MergeFrom(const StruUserOffMicID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 mic_user_id = 2;
  inline bool has_mic_user_id() const;
  inline void clear_mic_user_id();
  static const int kMicUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 mic_user_id() const;
  inline void set_mic_user_id(::google::protobuf::int32 value);
  
  // required int32 mic_room_id = 3;
  inline bool has_mic_room_id() const;
  inline void clear_mic_room_id();
  static const int kMicRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 mic_room_id() const;
  inline void set_mic_room_id(::google::protobuf::int32 value);
  
  // required string mic_user_account_name = 4;
  inline bool has_mic_user_account_name() const;
  inline void clear_mic_user_account_name();
  static const int kMicUserAccountNameFieldNumber = 4;
  inline const ::std::string& mic_user_account_name() const;
  inline void set_mic_user_account_name(const ::std::string& value);
  inline void set_mic_user_account_name(const char* value);
  inline void set_mic_user_account_name(const char* value, size_t size);
  inline ::std::string* mutable_mic_user_account_name();
  inline ::std::string* release_mic_user_account_name();
  
  // required string mic_channel_str = 5;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 5;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruUserOffMicID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_mic_user_id();
  inline void clear_has_mic_user_id();
  inline void set_has_mic_room_id();
  inline void clear_has_mic_room_id();
  inline void set_has_mic_user_account_name();
  inline void clear_has_mic_user_account_name();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 mic_user_id_;
  ::std::string* mic_user_account_name_;
  ::std::string* mic_channel_str_;
  ::google::protobuf::int32 mic_room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserOffMicID* default_instance_;
};
// -------------------------------------------------------------------

class StruPutUserOnMicRQ : public ::google::protobuf::Message {
 public:
  StruPutUserOnMicRQ();
  virtual ~StruPutUserOnMicRQ();
  
  StruPutUserOnMicRQ(const StruPutUserOnMicRQ& from);
  
  inline StruPutUserOnMicRQ& operator=(const StruPutUserOnMicRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruPutUserOnMicRQ& default_instance();
  
  void Swap(StruPutUserOnMicRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruPutUserOnMicRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruPutUserOnMicRQ& from);
  void MergeFrom(const StruPutUserOnMicRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 dst_user_id = 4;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // required int32 mic_type = 5;
  inline bool has_mic_type() const;
  inline void clear_mic_type();
  static const int kMicTypeFieldNumber = 5;
  inline ::google::protobuf::int32 mic_type() const;
  inline void set_mic_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruPutUserOnMicRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  inline void set_has_mic_type();
  inline void clear_has_mic_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 dst_user_id_;
  ::google::protobuf::int32 mic_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruPutUserOnMicRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruPutUserOnMicRS : public ::google::protobuf::Message {
 public:
  StruPutUserOnMicRS();
  virtual ~StruPutUserOnMicRS();
  
  StruPutUserOnMicRS(const StruPutUserOnMicRS& from);
  
  inline StruPutUserOnMicRS& operator=(const StruPutUserOnMicRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruPutUserOnMicRS& default_instance();
  
  void Swap(StruPutUserOnMicRS* other);
  
  // implements Message ----------------------------------------------
  
  StruPutUserOnMicRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruPutUserOnMicRS& from);
  void MergeFrom(const StruPutUserOnMicRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 dst_user_id = 4;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // required int32 mic_type = 5;
  inline bool has_mic_type() const;
  inline void clear_mic_type();
  static const int kMicTypeFieldNumber = 5;
  inline ::google::protobuf::int32 mic_type() const;
  inline void set_mic_type(::google::protobuf::int32 value);
  
  // required int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required string mic_channel_str = 7;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 7;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruPutUserOnMicRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  inline void set_has_mic_type();
  inline void clear_has_mic_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 dst_user_id_;
  ::google::protobuf::int32 mic_type_;
  ::google::protobuf::int32 result_;
  ::std::string* mic_channel_str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruPutUserOnMicRS* default_instance_;
};
// -------------------------------------------------------------------

class StruCancleUserMicRQ : public ::google::protobuf::Message {
 public:
  StruCancleUserMicRQ();
  virtual ~StruCancleUserMicRQ();
  
  StruCancleUserMicRQ(const StruCancleUserMicRQ& from);
  
  inline StruCancleUserMicRQ& operator=(const StruCancleUserMicRQ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruCancleUserMicRQ& default_instance();
  
  void Swap(StruCancleUserMicRQ* other);
  
  // implements Message ----------------------------------------------
  
  StruCancleUserMicRQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruCancleUserMicRQ& from);
  void MergeFrom(const StruCancleUserMicRQ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 dst_user_id = 4;
  inline bool has_dst_user_id() const;
  inline void clear_dst_user_id();
  static const int kDstUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 dst_user_id() const;
  inline void set_dst_user_id(::google::protobuf::int32 value);
  
  // required int32 mic_type = 5;
  inline bool has_mic_type() const;
  inline void clear_mic_type();
  static const int kMicTypeFieldNumber = 5;
  inline ::google::protobuf::int32 mic_type() const;
  inline void set_mic_type(::google::protobuf::int32 value);
  
  // required string mic_channel_str = 6;
  inline bool has_mic_channel_str() const;
  inline void clear_mic_channel_str();
  static const int kMicChannelStrFieldNumber = 6;
  inline const ::std::string& mic_channel_str() const;
  inline void set_mic_channel_str(const ::std::string& value);
  inline void set_mic_channel_str(const char* value);
  inline void set_mic_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_mic_channel_str();
  inline ::std::string* release_mic_channel_str();
  
  // @@protoc_insertion_point(class_scope:StruCancleUserMicRQ)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_dst_user_id();
  inline void clear_has_dst_user_id();
  inline void set_has_mic_type();
  inline void clear_has_mic_type();
  inline void set_has_mic_channel_str();
  inline void clear_has_mic_channel_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 dst_user_id_;
  ::std::string* mic_channel_str_;
  ::google::protobuf::int32 mic_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruCancleUserMicRQ* default_instance_;
};
// -------------------------------------------------------------------

class StruCancleUserMicRS : public ::google::protobuf::Message {
 public:
  StruCancleUserMicRS();
  virtual ~StruCancleUserMicRS();
  
  StruCancleUserMicRS(const StruCancleUserMicRS& from);
  
  inline StruCancleUserMicRS& operator=(const StruCancleUserMicRS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruCancleUserMicRS& default_instance();
  
  void Swap(StruCancleUserMicRS* other);
  
  // implements Message ----------------------------------------------
  
  StruCancleUserMicRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruCancleUserMicRS& from);
  void MergeFrom(const StruCancleUserMicRS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruCancleUserMicRS)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruCancleUserMicRS* default_instance_;
};
// -------------------------------------------------------------------

class StruUserExitRoomID : public ::google::protobuf::Message {
 public:
  StruUserExitRoomID();
  virtual ~StruUserExitRoomID();
  
  StruUserExitRoomID(const StruUserExitRoomID& from);
  
  inline StruUserExitRoomID& operator=(const StruUserExitRoomID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StruUserExitRoomID& default_instance();
  
  void Swap(StruUserExitRoomID* other);
  
  // implements Message ----------------------------------------------
  
  StruUserExitRoomID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StruUserExitRoomID& from);
  void MergeFrom(const StruUserExitRoomID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline EnumMsgID msg_id() const;
  inline void set_msg_id(EnumMsgID value);
  
  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StruUserExitRoomID)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 room_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_package_5fdefine_2eproto();
  friend void protobuf_AssignDesc_package_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_package_5fdefine_2eproto();
  
  void InitAsDefaultInstance();
  static StruUserExitRoomID* default_instance_;
};
// ===================================================================


// ===================================================================

// StruUserLoginRQ

// required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RQ];
inline bool StruUserLoginRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserLoginRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserLoginRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserLoginRQ::clear_msg_id() {
  msg_id_ = 6001;
  clear_has_msg_id();
}
inline EnumMsgID StruUserLoginRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserLoginRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserLoginRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserLoginRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserLoginRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserLoginRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserLoginRQ::user_id() const {
  return user_id_;
}
inline void StruUserLoginRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserLoginRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserLoginRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserLoginRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserLoginRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserLoginRQ::room_id() const {
  return room_id_;
}
inline void StruUserLoginRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required string user_psw = 4;
inline bool StruUserLoginRQ::has_user_psw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserLoginRQ::set_has_user_psw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserLoginRQ::clear_has_user_psw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserLoginRQ::clear_user_psw() {
  if (user_psw_ != &::google::protobuf::internal::kEmptyString) {
    user_psw_->clear();
  }
  clear_has_user_psw();
}
inline const ::std::string& StruUserLoginRQ::user_psw() const {
  return *user_psw_;
}
inline void StruUserLoginRQ::set_user_psw(const ::std::string& value) {
  set_has_user_psw();
  if (user_psw_ == &::google::protobuf::internal::kEmptyString) {
    user_psw_ = new ::std::string;
  }
  user_psw_->assign(value);
}
inline void StruUserLoginRQ::set_user_psw(const char* value) {
  set_has_user_psw();
  if (user_psw_ == &::google::protobuf::internal::kEmptyString) {
    user_psw_ = new ::std::string;
  }
  user_psw_->assign(value);
}
inline void StruUserLoginRQ::set_user_psw(const char* value, size_t size) {
  set_has_user_psw();
  if (user_psw_ == &::google::protobuf::internal::kEmptyString) {
    user_psw_ = new ::std::string;
  }
  user_psw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserLoginRQ::mutable_user_psw() {
  set_has_user_psw();
  if (user_psw_ == &::google::protobuf::internal::kEmptyString) {
    user_psw_ = new ::std::string;
  }
  return user_psw_;
}
inline ::std::string* StruUserLoginRQ::release_user_psw() {
  clear_has_user_psw();
  if (user_psw_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_psw_;
    user_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user_account_name = 5;
inline bool StruUserLoginRQ::has_user_account_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserLoginRQ::set_has_user_account_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserLoginRQ::clear_has_user_account_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserLoginRQ::clear_user_account_name() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    user_account_name_->clear();
  }
  clear_has_user_account_name();
}
inline const ::std::string& StruUserLoginRQ::user_account_name() const {
  return *user_account_name_;
}
inline void StruUserLoginRQ::set_user_account_name(const ::std::string& value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserLoginRQ::set_user_account_name(const char* value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserLoginRQ::set_user_account_name(const char* value, size_t size) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserLoginRQ::mutable_user_account_name() {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  return user_account_name_;
}
inline ::std::string* StruUserLoginRQ::release_user_account_name() {
  clear_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_account_name_;
    user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruUserLoginRS

// required .EnumMsgID msg_id = 1 [default = E_USER_LOGIN_RS];
inline bool StruUserLoginRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserLoginRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserLoginRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserLoginRS::clear_msg_id() {
  msg_id_ = 6002;
  clear_has_msg_id();
}
inline EnumMsgID StruUserLoginRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserLoginRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserLoginRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserLoginRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserLoginRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserLoginRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserLoginRS::user_id() const {
  return user_id_;
}
inline void StruUserLoginRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserLoginRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserLoginRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserLoginRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserLoginRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserLoginRS::room_id() const {
  return room_id_;
}
inline void StruUserLoginRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruUserLoginRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserLoginRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserLoginRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserLoginRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruUserLoginRS::result() const {
  return result_;
}
inline void StruUserLoginRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruUserRoleInfoID

// required .EnumMsgID msg_id = 1 [default = E_USER_ROLE_INFO_ID];
inline bool StruUserRoleInfoID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserRoleInfoID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserRoleInfoID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserRoleInfoID::clear_msg_id() {
  msg_id_ = 6003;
  clear_has_msg_id();
}
inline EnumMsgID StruUserRoleInfoID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserRoleInfoID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserRoleInfoID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserRoleInfoID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserRoleInfoID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserRoleInfoID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserRoleInfoID::user_id() const {
  return user_id_;
}
inline void StruUserRoleInfoID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserRoleInfoID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserRoleInfoID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserRoleInfoID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserRoleInfoID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserRoleInfoID::room_id() const {
  return room_id_;
}
inline void StruUserRoleInfoID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required string user_account_name = 4;
inline bool StruUserRoleInfoID::has_user_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserRoleInfoID::set_has_user_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserRoleInfoID::clear_has_user_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserRoleInfoID::clear_user_account_name() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    user_account_name_->clear();
  }
  clear_has_user_account_name();
}
inline const ::std::string& StruUserRoleInfoID::user_account_name() const {
  return *user_account_name_;
}
inline void StruUserRoleInfoID::set_user_account_name(const ::std::string& value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserRoleInfoID::set_user_account_name(const char* value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserRoleInfoID::set_user_account_name(const char* value, size_t size) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserRoleInfoID::mutable_user_account_name() {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  return user_account_name_;
}
inline ::std::string* StruUserRoleInfoID::release_user_account_name() {
  clear_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_account_name_;
    user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user_role_uid = 5;
inline bool StruUserRoleInfoID::has_user_role_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserRoleInfoID::set_has_user_role_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserRoleInfoID::clear_has_user_role_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserRoleInfoID::clear_user_role_uid() {
  if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
    user_role_uid_->clear();
  }
  clear_has_user_role_uid();
}
inline const ::std::string& StruUserRoleInfoID::user_role_uid() const {
  return *user_role_uid_;
}
inline void StruUserRoleInfoID::set_user_role_uid(const ::std::string& value) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(value);
}
inline void StruUserRoleInfoID::set_user_role_uid(const char* value) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(value);
}
inline void StruUserRoleInfoID::set_user_role_uid(const char* value, size_t size) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserRoleInfoID::mutable_user_role_uid() {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  return user_role_uid_;
}
inline ::std::string* StruUserRoleInfoID::release_user_role_uid() {
  clear_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_role_uid_;
    user_role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string other_data = 6;
inline bool StruUserRoleInfoID::has_other_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruUserRoleInfoID::set_has_other_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruUserRoleInfoID::clear_has_other_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruUserRoleInfoID::clear_other_data() {
  if (other_data_ != &::google::protobuf::internal::kEmptyString) {
    other_data_->clear();
  }
  clear_has_other_data();
}
inline const ::std::string& StruUserRoleInfoID::other_data() const {
  return *other_data_;
}
inline void StruUserRoleInfoID::set_other_data(const ::std::string& value) {
  set_has_other_data();
  if (other_data_ == &::google::protobuf::internal::kEmptyString) {
    other_data_ = new ::std::string;
  }
  other_data_->assign(value);
}
inline void StruUserRoleInfoID::set_other_data(const char* value) {
  set_has_other_data();
  if (other_data_ == &::google::protobuf::internal::kEmptyString) {
    other_data_ = new ::std::string;
  }
  other_data_->assign(value);
}
inline void StruUserRoleInfoID::set_other_data(const char* value, size_t size) {
  set_has_other_data();
  if (other_data_ == &::google::protobuf::internal::kEmptyString) {
    other_data_ = new ::std::string;
  }
  other_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserRoleInfoID::mutable_other_data() {
  set_has_other_data();
  if (other_data_ == &::google::protobuf::internal::kEmptyString) {
    other_data_ = new ::std::string;
  }
  return other_data_;
}
inline ::std::string* StruUserRoleInfoID::release_other_data() {
  clear_has_other_data();
  if (other_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = other_data_;
    other_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruRoomInfoID

// required .EnumMsgID msg_id = 1 [default = E_ROOM_INFO_ID];
inline bool StruRoomInfoID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruRoomInfoID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruRoomInfoID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruRoomInfoID::clear_msg_id() {
  msg_id_ = 6004;
  clear_has_msg_id();
}
inline EnumMsgID StruRoomInfoID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruRoomInfoID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruRoomInfoID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruRoomInfoID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruRoomInfoID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruRoomInfoID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruRoomInfoID::user_id() const {
  return user_id_;
}
inline void StruRoomInfoID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruRoomInfoID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruRoomInfoID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruRoomInfoID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruRoomInfoID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruRoomInfoID::room_id() const {
  return room_id_;
}
inline void StruRoomInfoID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 room_type = 4;
inline bool StruRoomInfoID::has_room_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruRoomInfoID::set_has_room_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruRoomInfoID::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruRoomInfoID::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 StruRoomInfoID::room_type() const {
  return room_type_;
}
inline void StruRoomInfoID::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// required string room_name = 5;
inline bool StruRoomInfoID::has_room_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruRoomInfoID::set_has_room_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruRoomInfoID::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruRoomInfoID::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& StruRoomInfoID::room_name() const {
  return *room_name_;
}
inline void StruRoomInfoID::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void StruRoomInfoID::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void StruRoomInfoID::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruRoomInfoID::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* StruRoomInfoID::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string room_advert = 6;
inline bool StruRoomInfoID::has_room_advert() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruRoomInfoID::set_has_room_advert() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruRoomInfoID::clear_has_room_advert() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruRoomInfoID::clear_room_advert() {
  if (room_advert_ != &::google::protobuf::internal::kEmptyString) {
    room_advert_->clear();
  }
  clear_has_room_advert();
}
inline const ::std::string& StruRoomInfoID::room_advert() const {
  return *room_advert_;
}
inline void StruRoomInfoID::set_room_advert(const ::std::string& value) {
  set_has_room_advert();
  if (room_advert_ == &::google::protobuf::internal::kEmptyString) {
    room_advert_ = new ::std::string;
  }
  room_advert_->assign(value);
}
inline void StruRoomInfoID::set_room_advert(const char* value) {
  set_has_room_advert();
  if (room_advert_ == &::google::protobuf::internal::kEmptyString) {
    room_advert_ = new ::std::string;
  }
  room_advert_->assign(value);
}
inline void StruRoomInfoID::set_room_advert(const char* value, size_t size) {
  set_has_room_advert();
  if (room_advert_ == &::google::protobuf::internal::kEmptyString) {
    room_advert_ = new ::std::string;
  }
  room_advert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruRoomInfoID::mutable_room_advert() {
  set_has_room_advert();
  if (room_advert_ == &::google::protobuf::internal::kEmptyString) {
    room_advert_ = new ::std::string;
  }
  return room_advert_;
}
inline ::std::string* StruRoomInfoID::release_room_advert() {
  clear_has_room_advert();
  if (room_advert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_advert_;
    room_advert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string room_announce = 7;
inline bool StruRoomInfoID::has_room_announce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StruRoomInfoID::set_has_room_announce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StruRoomInfoID::clear_has_room_announce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StruRoomInfoID::clear_room_announce() {
  if (room_announce_ != &::google::protobuf::internal::kEmptyString) {
    room_announce_->clear();
  }
  clear_has_room_announce();
}
inline const ::std::string& StruRoomInfoID::room_announce() const {
  return *room_announce_;
}
inline void StruRoomInfoID::set_room_announce(const ::std::string& value) {
  set_has_room_announce();
  if (room_announce_ == &::google::protobuf::internal::kEmptyString) {
    room_announce_ = new ::std::string;
  }
  room_announce_->assign(value);
}
inline void StruRoomInfoID::set_room_announce(const char* value) {
  set_has_room_announce();
  if (room_announce_ == &::google::protobuf::internal::kEmptyString) {
    room_announce_ = new ::std::string;
  }
  room_announce_->assign(value);
}
inline void StruRoomInfoID::set_room_announce(const char* value, size_t size) {
  set_has_room_announce();
  if (room_announce_ == &::google::protobuf::internal::kEmptyString) {
    room_announce_ = new ::std::string;
  }
  room_announce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruRoomInfoID::mutable_room_announce() {
  set_has_room_announce();
  if (room_announce_ == &::google::protobuf::internal::kEmptyString) {
    room_announce_ = new ::std::string;
  }
  return room_announce_;
}
inline ::std::string* StruRoomInfoID::release_room_announce() {
  clear_has_room_announce();
  if (room_announce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_announce_;
    room_announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruMicInfo

// required .EnumMsgID msg_id = 1 [default = E_MIC_INFO];
inline bool StruMicInfo::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruMicInfo::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruMicInfo::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruMicInfo::clear_msg_id() {
  msg_id_ = 6005;
  clear_has_msg_id();
}
inline EnumMsgID StruMicInfo::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruMicInfo::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruMicInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruMicInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruMicInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruMicInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruMicInfo::user_id() const {
  return user_id_;
}
inline void StruMicInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string user_account_name = 3;
inline bool StruMicInfo::has_user_account_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruMicInfo::set_has_user_account_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruMicInfo::clear_has_user_account_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruMicInfo::clear_user_account_name() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    user_account_name_->clear();
  }
  clear_has_user_account_name();
}
inline const ::std::string& StruMicInfo::user_account_name() const {
  return *user_account_name_;
}
inline void StruMicInfo::set_user_account_name(const ::std::string& value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruMicInfo::set_user_account_name(const char* value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruMicInfo::set_user_account_name(const char* value, size_t size) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruMicInfo::mutable_user_account_name() {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  return user_account_name_;
}
inline ::std::string* StruMicInfo::release_user_account_name() {
  clear_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_account_name_;
    user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mic_channel_str = 4;
inline bool StruMicInfo::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruMicInfo::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruMicInfo::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruMicInfo::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruMicInfo::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruMicInfo::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruMicInfo::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruMicInfo::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruMicInfo::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruMicInfo::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruRoomMicInfoID

// required .EnumMsgID msg_id = 1 [default = E_ROOM_MIC_INFO_ID];
inline bool StruRoomMicInfoID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruRoomMicInfoID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruRoomMicInfoID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruRoomMicInfoID::clear_msg_id() {
  msg_id_ = 6006;
  clear_has_msg_id();
}
inline EnumMsgID StruRoomMicInfoID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruRoomMicInfoID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruRoomMicInfoID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruRoomMicInfoID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruRoomMicInfoID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruRoomMicInfoID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruRoomMicInfoID::user_id() const {
  return user_id_;
}
inline void StruRoomMicInfoID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruRoomMicInfoID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruRoomMicInfoID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruRoomMicInfoID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruRoomMicInfoID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruRoomMicInfoID::room_id() const {
  return room_id_;
}
inline void StruRoomMicInfoID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .StruMicInfo mic_list = 4;
inline int StruRoomMicInfoID::mic_list_size() const {
  return mic_list_.size();
}
inline void StruRoomMicInfoID::clear_mic_list() {
  mic_list_.Clear();
}
inline const ::StruMicInfo& StruRoomMicInfoID::mic_list(int index) const {
  return mic_list_.Get(index);
}
inline ::StruMicInfo* StruRoomMicInfoID::mutable_mic_list(int index) {
  return mic_list_.Mutable(index);
}
inline ::StruMicInfo* StruRoomMicInfoID::add_mic_list() {
  return mic_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StruMicInfo >&
StruRoomMicInfoID::mic_list() const {
  return mic_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::StruMicInfo >*
StruRoomMicInfoID::mutable_mic_list() {
  return &mic_list_;
}

// -------------------------------------------------------------------

// StruUserInfo

// required .EnumMsgID msg_id = 1 [default = E_USER_INFO];
inline bool StruUserInfo::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserInfo::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserInfo::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserInfo::clear_msg_id() {
  msg_id_ = 6007;
  clear_has_msg_id();
}
inline EnumMsgID StruUserInfo::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserInfo::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserInfo::user_id() const {
  return user_id_;
}
inline void StruUserInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string user_account_name = 3;
inline bool StruUserInfo::has_user_account_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserInfo::set_has_user_account_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserInfo::clear_has_user_account_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserInfo::clear_user_account_name() {
  if (user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    user_account_name_->clear();
  }
  clear_has_user_account_name();
}
inline const ::std::string& StruUserInfo::user_account_name() const {
  return *user_account_name_;
}
inline void StruUserInfo::set_user_account_name(const ::std::string& value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserInfo::set_user_account_name(const char* value) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(value);
}
inline void StruUserInfo::set_user_account_name(const char* value, size_t size) {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserInfo::mutable_user_account_name() {
  set_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    user_account_name_ = new ::std::string;
  }
  return user_account_name_;
}
inline ::std::string* StruUserInfo::release_user_account_name() {
  clear_has_user_account_name();
  if (user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_account_name_;
    user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user_role_uid = 4;
inline bool StruUserInfo::has_user_role_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserInfo::set_has_user_role_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserInfo::clear_has_user_role_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserInfo::clear_user_role_uid() {
  if (user_role_uid_ != &::google::protobuf::internal::kEmptyString) {
    user_role_uid_->clear();
  }
  clear_has_user_role_uid();
}
inline const ::std::string& StruUserInfo::user_role_uid() const {
  return *user_role_uid_;
}
inline void StruUserInfo::set_user_role_uid(const ::std::string& value) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(value);
}
inline void StruUserInfo::set_user_role_uid(const char* value) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(value);
}
inline void StruUserInfo::set_user_role_uid(const char* value, size_t size) {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  user_role_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserInfo::mutable_user_role_uid() {
  set_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    user_role_uid_ = new ::std::string;
  }
  return user_role_uid_;
}
inline ::std::string* StruUserInfo::release_user_role_uid() {
  clear_has_user_role_uid();
  if (user_role_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_role_uid_;
    user_role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruUserInfoListID

// required .EnumMsgID msg_id = 1 [default = E_USER_INFO_LIST_ID];
inline bool StruUserInfoListID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserInfoListID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserInfoListID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserInfoListID::clear_msg_id() {
  msg_id_ = 6008;
  clear_has_msg_id();
}
inline EnumMsgID StruUserInfoListID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserInfoListID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserInfoListID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserInfoListID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserInfoListID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserInfoListID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserInfoListID::user_id() const {
  return user_id_;
}
inline void StruUserInfoListID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserInfoListID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserInfoListID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserInfoListID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserInfoListID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserInfoListID::room_id() const {
  return room_id_;
}
inline void StruUserInfoListID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .StruUserInfo user_info_list = 4;
inline int StruUserInfoListID::user_info_list_size() const {
  return user_info_list_.size();
}
inline void StruUserInfoListID::clear_user_info_list() {
  user_info_list_.Clear();
}
inline const ::StruUserInfo& StruUserInfoListID::user_info_list(int index) const {
  return user_info_list_.Get(index);
}
inline ::StruUserInfo* StruUserInfoListID::mutable_user_info_list(int index) {
  return user_info_list_.Mutable(index);
}
inline ::StruUserInfo* StruUserInfoListID::add_user_info_list() {
  return user_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StruUserInfo >&
StruUserInfoListID::user_info_list() const {
  return user_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::StruUserInfo >*
StruUserInfoListID::mutable_user_info_list() {
  return &user_info_list_;
}

// -------------------------------------------------------------------

// StruUserMsgRQ

// required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RQ];
inline bool StruUserMsgRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserMsgRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserMsgRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserMsgRQ::clear_msg_id() {
  msg_id_ = 6009;
  clear_has_msg_id();
}
inline EnumMsgID StruUserMsgRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserMsgRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserMsgRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserMsgRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserMsgRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserMsgRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserMsgRQ::user_id() const {
  return user_id_;
}
inline void StruUserMsgRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserMsgRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserMsgRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserMsgRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserMsgRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserMsgRQ::room_id() const {
  return room_id_;
}
inline void StruUserMsgRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required string msg_text = 4;
inline bool StruUserMsgRQ::has_msg_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserMsgRQ::set_has_msg_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserMsgRQ::clear_has_msg_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserMsgRQ::clear_msg_text() {
  if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
    msg_text_->clear();
  }
  clear_has_msg_text();
}
inline const ::std::string& StruUserMsgRQ::msg_text() const {
  return *msg_text_;
}
inline void StruUserMsgRQ::set_msg_text(const ::std::string& value) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(value);
}
inline void StruUserMsgRQ::set_msg_text(const char* value) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(value);
}
inline void StruUserMsgRQ::set_msg_text(const char* value, size_t size) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserMsgRQ::mutable_msg_text() {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  return msg_text_;
}
inline ::std::string* StruUserMsgRQ::release_msg_text() {
  clear_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_text_;
    msg_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_private = 5;
inline bool StruUserMsgRQ::has_is_private() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserMsgRQ::set_has_is_private() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserMsgRQ::clear_has_is_private() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserMsgRQ::clear_is_private() {
  is_private_ = false;
  clear_has_is_private();
}
inline bool StruUserMsgRQ::is_private() const {
  return is_private_;
}
inline void StruUserMsgRQ::set_is_private(bool value) {
  set_has_is_private();
  is_private_ = value;
}

// required int32 dst_user_id = 6;
inline bool StruUserMsgRQ::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruUserMsgRQ::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruUserMsgRQ::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruUserMsgRQ::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruUserMsgRQ::dst_user_id() const {
  return dst_user_id_;
}
inline void StruUserMsgRQ::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// -------------------------------------------------------------------

// StruUserMsgRS

// required .EnumMsgID msg_id = 1 [default = E_USER_MSG_RS];
inline bool StruUserMsgRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserMsgRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserMsgRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserMsgRS::clear_msg_id() {
  msg_id_ = 6010;
  clear_has_msg_id();
}
inline EnumMsgID StruUserMsgRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserMsgRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserMsgRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserMsgRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserMsgRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserMsgRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserMsgRS::user_id() const {
  return user_id_;
}
inline void StruUserMsgRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserMsgRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserMsgRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserMsgRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserMsgRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserMsgRS::room_id() const {
  return room_id_;
}
inline void StruUserMsgRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruUserMsgRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserMsgRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserMsgRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserMsgRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruUserMsgRS::result() const {
  return result_;
}
inline void StruUserMsgRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruUserMsgTextID

// required .EnumMsgID msg_id = 1 [default = E_USER_MSG_TEXT_ID];
inline bool StruUserMsgTextID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserMsgTextID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserMsgTextID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserMsgTextID::clear_msg_id() {
  msg_id_ = 6011;
  clear_has_msg_id();
}
inline EnumMsgID StruUserMsgTextID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserMsgTextID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserMsgTextID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserMsgTextID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserMsgTextID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserMsgTextID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserMsgTextID::user_id() const {
  return user_id_;
}
inline void StruUserMsgTextID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserMsgTextID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserMsgTextID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserMsgTextID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserMsgTextID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserMsgTextID::room_id() const {
  return room_id_;
}
inline void StruUserMsgTextID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required string msg_text = 4;
inline bool StruUserMsgTextID::has_msg_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserMsgTextID::set_has_msg_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserMsgTextID::clear_has_msg_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserMsgTextID::clear_msg_text() {
  if (msg_text_ != &::google::protobuf::internal::kEmptyString) {
    msg_text_->clear();
  }
  clear_has_msg_text();
}
inline const ::std::string& StruUserMsgTextID::msg_text() const {
  return *msg_text_;
}
inline void StruUserMsgTextID::set_msg_text(const ::std::string& value) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(value);
}
inline void StruUserMsgTextID::set_msg_text(const char* value) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(value);
}
inline void StruUserMsgTextID::set_msg_text(const char* value, size_t size) {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  msg_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserMsgTextID::mutable_msg_text() {
  set_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    msg_text_ = new ::std::string;
  }
  return msg_text_;
}
inline ::std::string* StruUserMsgTextID::release_msg_text() {
  clear_has_msg_text();
  if (msg_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_text_;
    msg_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_private = 5;
inline bool StruUserMsgTextID::has_is_private() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserMsgTextID::set_has_is_private() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserMsgTextID::clear_has_is_private() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserMsgTextID::clear_is_private() {
  is_private_ = false;
  clear_has_is_private();
}
inline bool StruUserMsgTextID::is_private() const {
  return is_private_;
}
inline void StruUserMsgTextID::set_is_private(bool value) {
  set_has_is_private();
  is_private_ = value;
}

// required int32 dst_user_id = 6;
inline bool StruUserMsgTextID::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruUserMsgTextID::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruUserMsgTextID::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruUserMsgTextID::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruUserMsgTextID::dst_user_id() const {
  return dst_user_id_;
}
inline void StruUserMsgTextID::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// -------------------------------------------------------------------

// StruUserGiveGiftRQ

// required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RQ];
inline bool StruUserGiveGiftRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserGiveGiftRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserGiveGiftRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserGiveGiftRQ::clear_msg_id() {
  msg_id_ = 6012;
  clear_has_msg_id();
}
inline EnumMsgID StruUserGiveGiftRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserGiveGiftRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserGiveGiftRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserGiveGiftRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserGiveGiftRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserGiveGiftRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRQ::user_id() const {
  return user_id_;
}
inline void StruUserGiveGiftRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserGiveGiftRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserGiveGiftRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserGiveGiftRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserGiveGiftRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRQ::room_id() const {
  return room_id_;
}
inline void StruUserGiveGiftRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required string gift_code = 4;
inline bool StruUserGiveGiftRQ::has_gift_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserGiveGiftRQ::set_has_gift_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserGiveGiftRQ::clear_has_gift_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserGiveGiftRQ::clear_gift_code() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    gift_code_->clear();
  }
  clear_has_gift_code();
}
inline const ::std::string& StruUserGiveGiftRQ::gift_code() const {
  return *gift_code_;
}
inline void StruUserGiveGiftRQ::set_gift_code(const ::std::string& value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void StruUserGiveGiftRQ::set_gift_code(const char* value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void StruUserGiveGiftRQ::set_gift_code(const char* value, size_t size) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserGiveGiftRQ::mutable_gift_code() {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  return gift_code_;
}
inline ::std::string* StruUserGiveGiftRQ::release_gift_code() {
  clear_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_code_;
    gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 dst_user_id = 5;
inline bool StruUserGiveGiftRQ::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserGiveGiftRQ::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserGiveGiftRQ::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserGiveGiftRQ::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRQ::dst_user_id() const {
  return dst_user_id_;
}
inline void StruUserGiveGiftRQ::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// -------------------------------------------------------------------

// StruUserGiveGiftRS

// required .EnumMsgID msg_id = 1 [default = E_USER_GIVE_GIFT_RS];
inline bool StruUserGiveGiftRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserGiveGiftRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserGiveGiftRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserGiveGiftRS::clear_msg_id() {
  msg_id_ = 6013;
  clear_has_msg_id();
}
inline EnumMsgID StruUserGiveGiftRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserGiveGiftRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserGiveGiftRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserGiveGiftRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserGiveGiftRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserGiveGiftRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRS::user_id() const {
  return user_id_;
}
inline void StruUserGiveGiftRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserGiveGiftRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserGiveGiftRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserGiveGiftRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserGiveGiftRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRS::room_id() const {
  return room_id_;
}
inline void StruUserGiveGiftRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruUserGiveGiftRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserGiveGiftRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserGiveGiftRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserGiveGiftRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruUserGiveGiftRS::result() const {
  return result_;
}
inline void StruUserGiveGiftRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string gift_code = 5;
inline bool StruUserGiveGiftRS::has_gift_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserGiveGiftRS::set_has_gift_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserGiveGiftRS::clear_has_gift_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserGiveGiftRS::clear_gift_code() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    gift_code_->clear();
  }
  clear_has_gift_code();
}
inline const ::std::string& StruUserGiveGiftRS::gift_code() const {
  return *gift_code_;
}
inline void StruUserGiveGiftRS::set_gift_code(const ::std::string& value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void StruUserGiveGiftRS::set_gift_code(const char* value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void StruUserGiveGiftRS::set_gift_code(const char* value, size_t size) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserGiveGiftRS::mutable_gift_code() {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  return gift_code_;
}
inline ::std::string* StruUserGiveGiftRS::release_gift_code() {
  clear_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_code_;
    gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 dst_user_id = 6;
inline bool StruUserGiveGiftRS::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruUserGiveGiftRS::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruUserGiveGiftRS::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruUserGiveGiftRS::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruUserGiveGiftRS::dst_user_id() const {
  return dst_user_id_;
}
inline void StruUserGiveGiftRS::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// -------------------------------------------------------------------

// StruUserApplyMicRQ

// required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RQ];
inline bool StruUserApplyMicRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserApplyMicRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserApplyMicRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserApplyMicRQ::clear_msg_id() {
  msg_id_ = 6014;
  clear_has_msg_id();
}
inline EnumMsgID StruUserApplyMicRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserApplyMicRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserApplyMicRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserApplyMicRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserApplyMicRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserApplyMicRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserApplyMicRQ::user_id() const {
  return user_id_;
}
inline void StruUserApplyMicRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserApplyMicRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserApplyMicRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserApplyMicRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserApplyMicRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserApplyMicRQ::room_id() const {
  return room_id_;
}
inline void StruUserApplyMicRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// StruUserApplyMicRS

// required .EnumMsgID msg_id = 1 [default = E_USER_APPLY_MIC_RS];
inline bool StruUserApplyMicRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserApplyMicRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserApplyMicRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserApplyMicRS::clear_msg_id() {
  msg_id_ = 6015;
  clear_has_msg_id();
}
inline EnumMsgID StruUserApplyMicRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserApplyMicRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserApplyMicRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserApplyMicRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserApplyMicRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserApplyMicRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserApplyMicRS::user_id() const {
  return user_id_;
}
inline void StruUserApplyMicRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserApplyMicRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserApplyMicRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserApplyMicRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserApplyMicRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserApplyMicRS::room_id() const {
  return room_id_;
}
inline void StruUserApplyMicRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruUserApplyMicRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserApplyMicRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserApplyMicRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserApplyMicRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruUserApplyMicRS::result() const {
  return result_;
}
inline void StruUserApplyMicRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string mic_channel_str = 5;
inline bool StruUserApplyMicRS::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserApplyMicRS::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserApplyMicRS::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserApplyMicRS::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruUserApplyMicRS::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruUserApplyMicRS::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserApplyMicRS::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserApplyMicRS::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserApplyMicRS::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruUserApplyMicRS::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruUserOnMicID

// required .EnumMsgID msg_id = 1 [default = E_USER_ON_MIC_ID];
inline bool StruUserOnMicID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserOnMicID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserOnMicID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserOnMicID::clear_msg_id() {
  msg_id_ = 6016;
  clear_has_msg_id();
}
inline EnumMsgID StruUserOnMicID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserOnMicID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 mic_user_id = 2;
inline bool StruUserOnMicID::has_mic_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserOnMicID::set_has_mic_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserOnMicID::clear_has_mic_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserOnMicID::clear_mic_user_id() {
  mic_user_id_ = 0;
  clear_has_mic_user_id();
}
inline ::google::protobuf::int32 StruUserOnMicID::mic_user_id() const {
  return mic_user_id_;
}
inline void StruUserOnMicID::set_mic_user_id(::google::protobuf::int32 value) {
  set_has_mic_user_id();
  mic_user_id_ = value;
}

// required int32 mic_room_id = 3;
inline bool StruUserOnMicID::has_mic_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserOnMicID::set_has_mic_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserOnMicID::clear_has_mic_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserOnMicID::clear_mic_room_id() {
  mic_room_id_ = 0;
  clear_has_mic_room_id();
}
inline ::google::protobuf::int32 StruUserOnMicID::mic_room_id() const {
  return mic_room_id_;
}
inline void StruUserOnMicID::set_mic_room_id(::google::protobuf::int32 value) {
  set_has_mic_room_id();
  mic_room_id_ = value;
}

// required string mic_user_account_name = 4;
inline bool StruUserOnMicID::has_mic_user_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserOnMicID::set_has_mic_user_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserOnMicID::clear_has_mic_user_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserOnMicID::clear_mic_user_account_name() {
  if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_->clear();
  }
  clear_has_mic_user_account_name();
}
inline const ::std::string& StruUserOnMicID::mic_user_account_name() const {
  return *mic_user_account_name_;
}
inline void StruUserOnMicID::set_mic_user_account_name(const ::std::string& value) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(value);
}
inline void StruUserOnMicID::set_mic_user_account_name(const char* value) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(value);
}
inline void StruUserOnMicID::set_mic_user_account_name(const char* value, size_t size) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserOnMicID::mutable_mic_user_account_name() {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  return mic_user_account_name_;
}
inline ::std::string* StruUserOnMicID::release_mic_user_account_name() {
  clear_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_user_account_name_;
    mic_user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mic_channel_str = 5;
inline bool StruUserOnMicID::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserOnMicID::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserOnMicID::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserOnMicID::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruUserOnMicID::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruUserOnMicID::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserOnMicID::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserOnMicID::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserOnMicID::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruUserOnMicID::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruUserOffMicRQ

// required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RQ];
inline bool StruUserOffMicRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserOffMicRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserOffMicRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserOffMicRQ::clear_msg_id() {
  msg_id_ = 6017;
  clear_has_msg_id();
}
inline EnumMsgID StruUserOffMicRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserOffMicRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserOffMicRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserOffMicRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserOffMicRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserOffMicRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserOffMicRQ::user_id() const {
  return user_id_;
}
inline void StruUserOffMicRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserOffMicRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserOffMicRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserOffMicRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserOffMicRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserOffMicRQ::room_id() const {
  return room_id_;
}
inline void StruUserOffMicRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// StruUserOffMicRS

// required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_RS];
inline bool StruUserOffMicRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserOffMicRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserOffMicRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserOffMicRS::clear_msg_id() {
  msg_id_ = 6018;
  clear_has_msg_id();
}
inline EnumMsgID StruUserOffMicRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserOffMicRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserOffMicRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserOffMicRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserOffMicRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserOffMicRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserOffMicRS::user_id() const {
  return user_id_;
}
inline void StruUserOffMicRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserOffMicRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserOffMicRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserOffMicRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserOffMicRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserOffMicRS::room_id() const {
  return room_id_;
}
inline void StruUserOffMicRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruUserOffMicRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserOffMicRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserOffMicRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserOffMicRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruUserOffMicRS::result() const {
  return result_;
}
inline void StruUserOffMicRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruUserOffMicID

// required .EnumMsgID msg_id = 1 [default = E_USER_OFF_MIC_ID];
inline bool StruUserOffMicID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserOffMicID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserOffMicID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserOffMicID::clear_msg_id() {
  msg_id_ = 6019;
  clear_has_msg_id();
}
inline EnumMsgID StruUserOffMicID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserOffMicID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 mic_user_id = 2;
inline bool StruUserOffMicID::has_mic_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserOffMicID::set_has_mic_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserOffMicID::clear_has_mic_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserOffMicID::clear_mic_user_id() {
  mic_user_id_ = 0;
  clear_has_mic_user_id();
}
inline ::google::protobuf::int32 StruUserOffMicID::mic_user_id() const {
  return mic_user_id_;
}
inline void StruUserOffMicID::set_mic_user_id(::google::protobuf::int32 value) {
  set_has_mic_user_id();
  mic_user_id_ = value;
}

// required int32 mic_room_id = 3;
inline bool StruUserOffMicID::has_mic_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserOffMicID::set_has_mic_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserOffMicID::clear_has_mic_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserOffMicID::clear_mic_room_id() {
  mic_room_id_ = 0;
  clear_has_mic_room_id();
}
inline ::google::protobuf::int32 StruUserOffMicID::mic_room_id() const {
  return mic_room_id_;
}
inline void StruUserOffMicID::set_mic_room_id(::google::protobuf::int32 value) {
  set_has_mic_room_id();
  mic_room_id_ = value;
}

// required string mic_user_account_name = 4;
inline bool StruUserOffMicID::has_mic_user_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruUserOffMicID::set_has_mic_user_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruUserOffMicID::clear_has_mic_user_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruUserOffMicID::clear_mic_user_account_name() {
  if (mic_user_account_name_ != &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_->clear();
  }
  clear_has_mic_user_account_name();
}
inline const ::std::string& StruUserOffMicID::mic_user_account_name() const {
  return *mic_user_account_name_;
}
inline void StruUserOffMicID::set_mic_user_account_name(const ::std::string& value) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(value);
}
inline void StruUserOffMicID::set_mic_user_account_name(const char* value) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(value);
}
inline void StruUserOffMicID::set_mic_user_account_name(const char* value, size_t size) {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  mic_user_account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserOffMicID::mutable_mic_user_account_name() {
  set_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_user_account_name_ = new ::std::string;
  }
  return mic_user_account_name_;
}
inline ::std::string* StruUserOffMicID::release_mic_user_account_name() {
  clear_has_mic_user_account_name();
  if (mic_user_account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_user_account_name_;
    mic_user_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mic_channel_str = 5;
inline bool StruUserOffMicID::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruUserOffMicID::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruUserOffMicID::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruUserOffMicID::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruUserOffMicID::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruUserOffMicID::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserOffMicID::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruUserOffMicID::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruUserOffMicID::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruUserOffMicID::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruPutUserOnMicRQ

// required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RQ];
inline bool StruPutUserOnMicRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruPutUserOnMicRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruPutUserOnMicRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruPutUserOnMicRQ::clear_msg_id() {
  msg_id_ = 6020;
  clear_has_msg_id();
}
inline EnumMsgID StruPutUserOnMicRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruPutUserOnMicRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruPutUserOnMicRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruPutUserOnMicRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruPutUserOnMicRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruPutUserOnMicRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRQ::user_id() const {
  return user_id_;
}
inline void StruPutUserOnMicRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruPutUserOnMicRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruPutUserOnMicRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruPutUserOnMicRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruPutUserOnMicRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRQ::room_id() const {
  return room_id_;
}
inline void StruPutUserOnMicRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 dst_user_id = 4;
inline bool StruPutUserOnMicRQ::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruPutUserOnMicRQ::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruPutUserOnMicRQ::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruPutUserOnMicRQ::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRQ::dst_user_id() const {
  return dst_user_id_;
}
inline void StruPutUserOnMicRQ::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// required int32 mic_type = 5;
inline bool StruPutUserOnMicRQ::has_mic_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruPutUserOnMicRQ::set_has_mic_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruPutUserOnMicRQ::clear_has_mic_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruPutUserOnMicRQ::clear_mic_type() {
  mic_type_ = 0;
  clear_has_mic_type();
}
inline ::google::protobuf::int32 StruPutUserOnMicRQ::mic_type() const {
  return mic_type_;
}
inline void StruPutUserOnMicRQ::set_mic_type(::google::protobuf::int32 value) {
  set_has_mic_type();
  mic_type_ = value;
}

// -------------------------------------------------------------------

// StruPutUserOnMicRS

// required .EnumMsgID msg_id = 1 [default = E_PUT_USER_ON_MIC_RS];
inline bool StruPutUserOnMicRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruPutUserOnMicRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruPutUserOnMicRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruPutUserOnMicRS::clear_msg_id() {
  msg_id_ = 6021;
  clear_has_msg_id();
}
inline EnumMsgID StruPutUserOnMicRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruPutUserOnMicRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruPutUserOnMicRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruPutUserOnMicRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruPutUserOnMicRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruPutUserOnMicRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRS::user_id() const {
  return user_id_;
}
inline void StruPutUserOnMicRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruPutUserOnMicRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruPutUserOnMicRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruPutUserOnMicRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruPutUserOnMicRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRS::room_id() const {
  return room_id_;
}
inline void StruPutUserOnMicRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 dst_user_id = 4;
inline bool StruPutUserOnMicRS::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruPutUserOnMicRS::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruPutUserOnMicRS::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruPutUserOnMicRS::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruPutUserOnMicRS::dst_user_id() const {
  return dst_user_id_;
}
inline void StruPutUserOnMicRS::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// required int32 mic_type = 5;
inline bool StruPutUserOnMicRS::has_mic_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruPutUserOnMicRS::set_has_mic_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruPutUserOnMicRS::clear_has_mic_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruPutUserOnMicRS::clear_mic_type() {
  mic_type_ = 0;
  clear_has_mic_type();
}
inline ::google::protobuf::int32 StruPutUserOnMicRS::mic_type() const {
  return mic_type_;
}
inline void StruPutUserOnMicRS::set_mic_type(::google::protobuf::int32 value) {
  set_has_mic_type();
  mic_type_ = value;
}

// required int32 result = 6;
inline bool StruPutUserOnMicRS::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruPutUserOnMicRS::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruPutUserOnMicRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruPutUserOnMicRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruPutUserOnMicRS::result() const {
  return result_;
}
inline void StruPutUserOnMicRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string mic_channel_str = 7;
inline bool StruPutUserOnMicRS::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StruPutUserOnMicRS::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StruPutUserOnMicRS::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StruPutUserOnMicRS::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruPutUserOnMicRS::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruPutUserOnMicRS::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruPutUserOnMicRS::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruPutUserOnMicRS::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruPutUserOnMicRS::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruPutUserOnMicRS::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruCancleUserMicRQ

// required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RQ];
inline bool StruCancleUserMicRQ::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruCancleUserMicRQ::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruCancleUserMicRQ::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruCancleUserMicRQ::clear_msg_id() {
  msg_id_ = 6022;
  clear_has_msg_id();
}
inline EnumMsgID StruCancleUserMicRQ::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruCancleUserMicRQ::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruCancleUserMicRQ::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruCancleUserMicRQ::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruCancleUserMicRQ::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruCancleUserMicRQ::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruCancleUserMicRQ::user_id() const {
  return user_id_;
}
inline void StruCancleUserMicRQ::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruCancleUserMicRQ::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruCancleUserMicRQ::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruCancleUserMicRQ::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruCancleUserMicRQ::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruCancleUserMicRQ::room_id() const {
  return room_id_;
}
inline void StruCancleUserMicRQ::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 dst_user_id = 4;
inline bool StruCancleUserMicRQ::has_dst_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruCancleUserMicRQ::set_has_dst_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruCancleUserMicRQ::clear_has_dst_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruCancleUserMicRQ::clear_dst_user_id() {
  dst_user_id_ = 0;
  clear_has_dst_user_id();
}
inline ::google::protobuf::int32 StruCancleUserMicRQ::dst_user_id() const {
  return dst_user_id_;
}
inline void StruCancleUserMicRQ::set_dst_user_id(::google::protobuf::int32 value) {
  set_has_dst_user_id();
  dst_user_id_ = value;
}

// required int32 mic_type = 5;
inline bool StruCancleUserMicRQ::has_mic_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StruCancleUserMicRQ::set_has_mic_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StruCancleUserMicRQ::clear_has_mic_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StruCancleUserMicRQ::clear_mic_type() {
  mic_type_ = 0;
  clear_has_mic_type();
}
inline ::google::protobuf::int32 StruCancleUserMicRQ::mic_type() const {
  return mic_type_;
}
inline void StruCancleUserMicRQ::set_mic_type(::google::protobuf::int32 value) {
  set_has_mic_type();
  mic_type_ = value;
}

// required string mic_channel_str = 6;
inline bool StruCancleUserMicRQ::has_mic_channel_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StruCancleUserMicRQ::set_has_mic_channel_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StruCancleUserMicRQ::clear_has_mic_channel_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StruCancleUserMicRQ::clear_mic_channel_str() {
  if (mic_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_->clear();
  }
  clear_has_mic_channel_str();
}
inline const ::std::string& StruCancleUserMicRQ::mic_channel_str() const {
  return *mic_channel_str_;
}
inline void StruCancleUserMicRQ::set_mic_channel_str(const ::std::string& value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruCancleUserMicRQ::set_mic_channel_str(const char* value) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(value);
}
inline void StruCancleUserMicRQ::set_mic_channel_str(const char* value, size_t size) {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  mic_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StruCancleUserMicRQ::mutable_mic_channel_str() {
  set_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    mic_channel_str_ = new ::std::string;
  }
  return mic_channel_str_;
}
inline ::std::string* StruCancleUserMicRQ::release_mic_channel_str() {
  clear_has_mic_channel_str();
  if (mic_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_channel_str_;
    mic_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StruCancleUserMicRS

// required .EnumMsgID msg_id = 1 [default = E_CANCLE_USER_MIC_RS];
inline bool StruCancleUserMicRS::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruCancleUserMicRS::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruCancleUserMicRS::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruCancleUserMicRS::clear_msg_id() {
  msg_id_ = 6023;
  clear_has_msg_id();
}
inline EnumMsgID StruCancleUserMicRS::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruCancleUserMicRS::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruCancleUserMicRS::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruCancleUserMicRS::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruCancleUserMicRS::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruCancleUserMicRS::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruCancleUserMicRS::user_id() const {
  return user_id_;
}
inline void StruCancleUserMicRS::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruCancleUserMicRS::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruCancleUserMicRS::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruCancleUserMicRS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruCancleUserMicRS::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruCancleUserMicRS::room_id() const {
  return room_id_;
}
inline void StruCancleUserMicRS::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 result = 4;
inline bool StruCancleUserMicRS::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StruCancleUserMicRS::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StruCancleUserMicRS::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StruCancleUserMicRS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StruCancleUserMicRS::result() const {
  return result_;
}
inline void StruCancleUserMicRS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// StruUserExitRoomID

// required .EnumMsgID msg_id = 1 [default = E_USER_EXIT_ROOM_ID];
inline bool StruUserExitRoomID::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StruUserExitRoomID::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StruUserExitRoomID::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StruUserExitRoomID::clear_msg_id() {
  msg_id_ = 6024;
  clear_has_msg_id();
}
inline EnumMsgID StruUserExitRoomID::msg_id() const {
  return static_cast< EnumMsgID >(msg_id_);
}
inline void StruUserExitRoomID::set_msg_id(EnumMsgID value) {
  GOOGLE_DCHECK(EnumMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// required int32 user_id = 2;
inline bool StruUserExitRoomID::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StruUserExitRoomID::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StruUserExitRoomID::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StruUserExitRoomID::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 StruUserExitRoomID::user_id() const {
  return user_id_;
}
inline void StruUserExitRoomID::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 room_id = 3;
inline bool StruUserExitRoomID::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StruUserExitRoomID::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StruUserExitRoomID::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StruUserExitRoomID::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 StruUserExitRoomID::room_id() const {
  return room_id_;
}
inline void StruUserExitRoomID::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< EnumMsgID>() {
  return EnumMsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_package_5fdefine_2eproto__INCLUDED
